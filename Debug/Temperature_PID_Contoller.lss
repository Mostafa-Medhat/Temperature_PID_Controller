
Temperature_PID_Contoller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000024d6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000134  00800060  000024d6  0000256a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800194  00800194  0000269e  2**0
                  ALLOC
  3 .stab         0000237c  00000000  00000000  000026a0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f96  00000000  00000000  00004a1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  000059b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d1  00000000  00000000  00005b32  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002010  00000000  00000000  00005d03  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001161  00000000  00000000  00007d13  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001003  00000000  00000000  00008e74  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  00009e78  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002be  00000000  00000000  0000a018  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000090e  00000000  00000000  0000a2d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000abe4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ed       	ldi	r30, 0xD6	; 214
      68:	f4 e2       	ldi	r31, 0x24	; 36
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 39       	cpi	r26, 0x94	; 148
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a4 e9       	ldi	r26, 0x94	; 148
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 39       	cpi	r26, 0x97	; 151
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <main>
      8a:	0c 94 69 12 	jmp	0x24d2	; 0x24d2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 01 12 	jmp	0x2402	; 0x2402 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 1d 12 	jmp	0x243a	; 0x243a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 0d 12 	jmp	0x241a	; 0x241a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 29 12 	jmp	0x2452	; 0x2452 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 0d 12 	jmp	0x241a	; 0x241a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 29 12 	jmp	0x2452	; 0x2452 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 01 12 	jmp	0x2402	; 0x2402 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 1d 12 	jmp	0x243a	; 0x243a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 0d 12 	jmp	0x241a	; 0x241a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 29 12 	jmp	0x2452	; 0x2452 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 0d 12 	jmp	0x241a	; 0x241a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 29 12 	jmp	0x2452	; 0x2452 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 0d 12 	jmp	0x241a	; 0x241a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 29 12 	jmp	0x2452	; 0x2452 <__epilogue_restores__+0x18>

00000752 <__floatsisf>:
     752:	a8 e0       	ldi	r26, 0x08	; 8
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 0a 12 	jmp	0x2414	; 0x2414 <__prologue_saves__+0x12>
     75e:	9b 01       	movw	r18, r22
     760:	ac 01       	movw	r20, r24
     762:	83 e0       	ldi	r24, 0x03	; 3
     764:	89 83       	std	Y+1, r24	; 0x01
     766:	da 01       	movw	r26, r20
     768:	c9 01       	movw	r24, r18
     76a:	88 27       	eor	r24, r24
     76c:	b7 fd       	sbrc	r27, 7
     76e:	83 95       	inc	r24
     770:	99 27       	eor	r25, r25
     772:	aa 27       	eor	r26, r26
     774:	bb 27       	eor	r27, r27
     776:	b8 2e       	mov	r11, r24
     778:	21 15       	cp	r18, r1
     77a:	31 05       	cpc	r19, r1
     77c:	41 05       	cpc	r20, r1
     77e:	51 05       	cpc	r21, r1
     780:	19 f4       	brne	.+6      	; 0x788 <__floatsisf+0x36>
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	89 83       	std	Y+1, r24	; 0x01
     786:	3a c0       	rjmp	.+116    	; 0x7fc <__floatsisf+0xaa>
     788:	88 23       	and	r24, r24
     78a:	a9 f0       	breq	.+42     	; 0x7b6 <__floatsisf+0x64>
     78c:	20 30       	cpi	r18, 0x00	; 0
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	38 07       	cpc	r19, r24
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	48 07       	cpc	r20, r24
     796:	80 e8       	ldi	r24, 0x80	; 128
     798:	58 07       	cpc	r21, r24
     79a:	29 f4       	brne	.+10     	; 0x7a6 <__floatsisf+0x54>
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	9f ec       	ldi	r25, 0xCF	; 207
     7a4:	30 c0       	rjmp	.+96     	; 0x806 <__floatsisf+0xb4>
     7a6:	ee 24       	eor	r14, r14
     7a8:	ff 24       	eor	r15, r15
     7aa:	87 01       	movw	r16, r14
     7ac:	e2 1a       	sub	r14, r18
     7ae:	f3 0a       	sbc	r15, r19
     7b0:	04 0b       	sbc	r16, r20
     7b2:	15 0b       	sbc	r17, r21
     7b4:	02 c0       	rjmp	.+4      	; 0x7ba <__floatsisf+0x68>
     7b6:	79 01       	movw	r14, r18
     7b8:	8a 01       	movw	r16, r20
     7ba:	8e e1       	ldi	r24, 0x1E	; 30
     7bc:	c8 2e       	mov	r12, r24
     7be:	d1 2c       	mov	r13, r1
     7c0:	dc 82       	std	Y+4, r13	; 0x04
     7c2:	cb 82       	std	Y+3, r12	; 0x03
     7c4:	ed 82       	std	Y+5, r14	; 0x05
     7c6:	fe 82       	std	Y+6, r15	; 0x06
     7c8:	0f 83       	std	Y+7, r16	; 0x07
     7ca:	18 87       	std	Y+8, r17	; 0x08
     7cc:	c8 01       	movw	r24, r16
     7ce:	b7 01       	movw	r22, r14
     7d0:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__clzsi2>
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	18 16       	cp	r1, r24
     7d8:	19 06       	cpc	r1, r25
     7da:	84 f4       	brge	.+32     	; 0x7fc <__floatsisf+0xaa>
     7dc:	08 2e       	mov	r0, r24
     7de:	04 c0       	rjmp	.+8      	; 0x7e8 <__floatsisf+0x96>
     7e0:	ee 0c       	add	r14, r14
     7e2:	ff 1c       	adc	r15, r15
     7e4:	00 1f       	adc	r16, r16
     7e6:	11 1f       	adc	r17, r17
     7e8:	0a 94       	dec	r0
     7ea:	d2 f7       	brpl	.-12     	; 0x7e0 <__floatsisf+0x8e>
     7ec:	ed 82       	std	Y+5, r14	; 0x05
     7ee:	fe 82       	std	Y+6, r15	; 0x06
     7f0:	0f 83       	std	Y+7, r16	; 0x07
     7f2:	18 87       	std	Y+8, r17	; 0x08
     7f4:	c8 1a       	sub	r12, r24
     7f6:	d9 0a       	sbc	r13, r25
     7f8:	dc 82       	std	Y+4, r13	; 0x04
     7fa:	cb 82       	std	Y+3, r12	; 0x03
     7fc:	ba 82       	std	Y+2, r11	; 0x02
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     806:	28 96       	adiw	r28, 0x08	; 8
     808:	e9 e0       	ldi	r30, 0x09	; 9
     80a:	0c 94 26 12 	jmp	0x244c	; 0x244c <__epilogue_restores__+0x12>

0000080e <__fixsfsi>:
     80e:	ac e0       	ldi	r26, 0x0C	; 12
     810:	b0 e0       	ldi	r27, 0x00	; 0
     812:	ed e0       	ldi	r30, 0x0D	; 13
     814:	f4 e0       	ldi	r31, 0x04	; 4
     816:	0c 94 11 12 	jmp	0x2422	; 0x2422 <__prologue_saves__+0x20>
     81a:	69 83       	std	Y+1, r22	; 0x01
     81c:	7a 83       	std	Y+2, r23	; 0x02
     81e:	8b 83       	std	Y+3, r24	; 0x03
     820:	9c 83       	std	Y+4, r25	; 0x04
     822:	ce 01       	movw	r24, r28
     824:	01 96       	adiw	r24, 0x01	; 1
     826:	be 01       	movw	r22, r28
     828:	6b 5f       	subi	r22, 0xFB	; 251
     82a:	7f 4f       	sbci	r23, 0xFF	; 255
     82c:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     830:	8d 81       	ldd	r24, Y+5	; 0x05
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	61 f1       	breq	.+88     	; 0x88e <__fixsfsi+0x80>
     836:	82 30       	cpi	r24, 0x02	; 2
     838:	50 f1       	brcs	.+84     	; 0x88e <__fixsfsi+0x80>
     83a:	84 30       	cpi	r24, 0x04	; 4
     83c:	21 f4       	brne	.+8      	; 0x846 <__fixsfsi+0x38>
     83e:	8e 81       	ldd	r24, Y+6	; 0x06
     840:	88 23       	and	r24, r24
     842:	51 f1       	breq	.+84     	; 0x898 <__fixsfsi+0x8a>
     844:	2e c0       	rjmp	.+92     	; 0x8a2 <__fixsfsi+0x94>
     846:	2f 81       	ldd	r18, Y+7	; 0x07
     848:	38 85       	ldd	r19, Y+8	; 0x08
     84a:	37 fd       	sbrc	r19, 7
     84c:	20 c0       	rjmp	.+64     	; 0x88e <__fixsfsi+0x80>
     84e:	6e 81       	ldd	r22, Y+6	; 0x06
     850:	2f 31       	cpi	r18, 0x1F	; 31
     852:	31 05       	cpc	r19, r1
     854:	1c f0       	brlt	.+6      	; 0x85c <__fixsfsi+0x4e>
     856:	66 23       	and	r22, r22
     858:	f9 f0       	breq	.+62     	; 0x898 <__fixsfsi+0x8a>
     85a:	23 c0       	rjmp	.+70     	; 0x8a2 <__fixsfsi+0x94>
     85c:	8e e1       	ldi	r24, 0x1E	; 30
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	82 1b       	sub	r24, r18
     862:	93 0b       	sbc	r25, r19
     864:	29 85       	ldd	r18, Y+9	; 0x09
     866:	3a 85       	ldd	r19, Y+10	; 0x0a
     868:	4b 85       	ldd	r20, Y+11	; 0x0b
     86a:	5c 85       	ldd	r21, Y+12	; 0x0c
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__fixsfsi+0x68>
     86e:	56 95       	lsr	r21
     870:	47 95       	ror	r20
     872:	37 95       	ror	r19
     874:	27 95       	ror	r18
     876:	8a 95       	dec	r24
     878:	d2 f7       	brpl	.-12     	; 0x86e <__fixsfsi+0x60>
     87a:	66 23       	and	r22, r22
     87c:	b1 f0       	breq	.+44     	; 0x8aa <__fixsfsi+0x9c>
     87e:	50 95       	com	r21
     880:	40 95       	com	r20
     882:	30 95       	com	r19
     884:	21 95       	neg	r18
     886:	3f 4f       	sbci	r19, 0xFF	; 255
     888:	4f 4f       	sbci	r20, 0xFF	; 255
     88a:	5f 4f       	sbci	r21, 0xFF	; 255
     88c:	0e c0       	rjmp	.+28     	; 0x8aa <__fixsfsi+0x9c>
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	50 e0       	ldi	r21, 0x00	; 0
     896:	09 c0       	rjmp	.+18     	; 0x8aa <__fixsfsi+0x9c>
     898:	2f ef       	ldi	r18, 0xFF	; 255
     89a:	3f ef       	ldi	r19, 0xFF	; 255
     89c:	4f ef       	ldi	r20, 0xFF	; 255
     89e:	5f e7       	ldi	r21, 0x7F	; 127
     8a0:	04 c0       	rjmp	.+8      	; 0x8aa <__fixsfsi+0x9c>
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	40 e0       	ldi	r20, 0x00	; 0
     8a8:	50 e8       	ldi	r21, 0x80	; 128
     8aa:	b9 01       	movw	r22, r18
     8ac:	ca 01       	movw	r24, r20
     8ae:	2c 96       	adiw	r28, 0x0c	; 12
     8b0:	e2 e0       	ldi	r30, 0x02	; 2
     8b2:	0c 94 2d 12 	jmp	0x245a	; 0x245a <__epilogue_restores__+0x20>

000008b6 <__clzsi2>:
     8b6:	ef 92       	push	r14
     8b8:	ff 92       	push	r15
     8ba:	0f 93       	push	r16
     8bc:	1f 93       	push	r17
     8be:	7b 01       	movw	r14, r22
     8c0:	8c 01       	movw	r16, r24
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	e8 16       	cp	r14, r24
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	f8 06       	cpc	r15, r24
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	08 07       	cpc	r16, r24
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	18 07       	cpc	r17, r24
     8d2:	88 f4       	brcc	.+34     	; 0x8f6 <__clzsi2+0x40>
     8d4:	8f ef       	ldi	r24, 0xFF	; 255
     8d6:	e8 16       	cp	r14, r24
     8d8:	f1 04       	cpc	r15, r1
     8da:	01 05       	cpc	r16, r1
     8dc:	11 05       	cpc	r17, r1
     8de:	31 f0       	breq	.+12     	; 0x8ec <__clzsi2+0x36>
     8e0:	28 f0       	brcs	.+10     	; 0x8ec <__clzsi2+0x36>
     8e2:	88 e0       	ldi	r24, 0x08	; 8
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	b0 e0       	ldi	r27, 0x00	; 0
     8ea:	17 c0       	rjmp	.+46     	; 0x91a <__clzsi2+0x64>
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	a0 e0       	ldi	r26, 0x00	; 0
     8f2:	b0 e0       	ldi	r27, 0x00	; 0
     8f4:	12 c0       	rjmp	.+36     	; 0x91a <__clzsi2+0x64>
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	e8 16       	cp	r14, r24
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	f8 06       	cpc	r15, r24
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	08 07       	cpc	r16, r24
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	18 07       	cpc	r17, r24
     906:	28 f0       	brcs	.+10     	; 0x912 <__clzsi2+0x5c>
     908:	88 e1       	ldi	r24, 0x18	; 24
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e0       	ldi	r26, 0x00	; 0
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	04 c0       	rjmp	.+8      	; 0x91a <__clzsi2+0x64>
     912:	80 e1       	ldi	r24, 0x10	; 16
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	a0 e0       	ldi	r26, 0x00	; 0
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	20 e2       	ldi	r18, 0x20	; 32
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	28 1b       	sub	r18, r24
     924:	39 0b       	sbc	r19, r25
     926:	4a 0b       	sbc	r20, r26
     928:	5b 0b       	sbc	r21, r27
     92a:	04 c0       	rjmp	.+8      	; 0x934 <__clzsi2+0x7e>
     92c:	16 95       	lsr	r17
     92e:	07 95       	ror	r16
     930:	f7 94       	ror	r15
     932:	e7 94       	ror	r14
     934:	8a 95       	dec	r24
     936:	d2 f7       	brpl	.-12     	; 0x92c <__clzsi2+0x76>
     938:	f7 01       	movw	r30, r14
     93a:	e8 59       	subi	r30, 0x98	; 152
     93c:	ff 4f       	sbci	r31, 0xFF	; 255
     93e:	80 81       	ld	r24, Z
     940:	28 1b       	sub	r18, r24
     942:	31 09       	sbc	r19, r1
     944:	41 09       	sbc	r20, r1
     946:	51 09       	sbc	r21, r1
     948:	c9 01       	movw	r24, r18
     94a:	1f 91       	pop	r17
     94c:	0f 91       	pop	r16
     94e:	ff 90       	pop	r15
     950:	ef 90       	pop	r14
     952:	08 95       	ret

00000954 <__pack_f>:
     954:	df 92       	push	r13
     956:	ef 92       	push	r14
     958:	ff 92       	push	r15
     95a:	0f 93       	push	r16
     95c:	1f 93       	push	r17
     95e:	fc 01       	movw	r30, r24
     960:	e4 80       	ldd	r14, Z+4	; 0x04
     962:	f5 80       	ldd	r15, Z+5	; 0x05
     964:	06 81       	ldd	r16, Z+6	; 0x06
     966:	17 81       	ldd	r17, Z+7	; 0x07
     968:	d1 80       	ldd	r13, Z+1	; 0x01
     96a:	80 81       	ld	r24, Z
     96c:	82 30       	cpi	r24, 0x02	; 2
     96e:	48 f4       	brcc	.+18     	; 0x982 <__pack_f+0x2e>
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	a0 e1       	ldi	r26, 0x10	; 16
     976:	b0 e0       	ldi	r27, 0x00	; 0
     978:	e8 2a       	or	r14, r24
     97a:	f9 2a       	or	r15, r25
     97c:	0a 2b       	or	r16, r26
     97e:	1b 2b       	or	r17, r27
     980:	a5 c0       	rjmp	.+330    	; 0xacc <__pack_f+0x178>
     982:	84 30       	cpi	r24, 0x04	; 4
     984:	09 f4       	brne	.+2      	; 0x988 <__pack_f+0x34>
     986:	9f c0       	rjmp	.+318    	; 0xac6 <__pack_f+0x172>
     988:	82 30       	cpi	r24, 0x02	; 2
     98a:	21 f4       	brne	.+8      	; 0x994 <__pack_f+0x40>
     98c:	ee 24       	eor	r14, r14
     98e:	ff 24       	eor	r15, r15
     990:	87 01       	movw	r16, r14
     992:	05 c0       	rjmp	.+10     	; 0x99e <__pack_f+0x4a>
     994:	e1 14       	cp	r14, r1
     996:	f1 04       	cpc	r15, r1
     998:	01 05       	cpc	r16, r1
     99a:	11 05       	cpc	r17, r1
     99c:	19 f4       	brne	.+6      	; 0x9a4 <__pack_f+0x50>
     99e:	e0 e0       	ldi	r30, 0x00	; 0
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	96 c0       	rjmp	.+300    	; 0xad0 <__pack_f+0x17c>
     9a4:	62 81       	ldd	r22, Z+2	; 0x02
     9a6:	73 81       	ldd	r23, Z+3	; 0x03
     9a8:	9f ef       	ldi	r25, 0xFF	; 255
     9aa:	62 38       	cpi	r22, 0x82	; 130
     9ac:	79 07       	cpc	r23, r25
     9ae:	0c f0       	brlt	.+2      	; 0x9b2 <__pack_f+0x5e>
     9b0:	5b c0       	rjmp	.+182    	; 0xa68 <__pack_f+0x114>
     9b2:	22 e8       	ldi	r18, 0x82	; 130
     9b4:	3f ef       	ldi	r19, 0xFF	; 255
     9b6:	26 1b       	sub	r18, r22
     9b8:	37 0b       	sbc	r19, r23
     9ba:	2a 31       	cpi	r18, 0x1A	; 26
     9bc:	31 05       	cpc	r19, r1
     9be:	2c f0       	brlt	.+10     	; 0x9ca <__pack_f+0x76>
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	40 e0       	ldi	r20, 0x00	; 0
     9c6:	50 e0       	ldi	r21, 0x00	; 0
     9c8:	2a c0       	rjmp	.+84     	; 0xa1e <__pack_f+0xca>
     9ca:	b8 01       	movw	r22, r16
     9cc:	a7 01       	movw	r20, r14
     9ce:	02 2e       	mov	r0, r18
     9d0:	04 c0       	rjmp	.+8      	; 0x9da <__pack_f+0x86>
     9d2:	76 95       	lsr	r23
     9d4:	67 95       	ror	r22
     9d6:	57 95       	ror	r21
     9d8:	47 95       	ror	r20
     9da:	0a 94       	dec	r0
     9dc:	d2 f7       	brpl	.-12     	; 0x9d2 <__pack_f+0x7e>
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	a0 e0       	ldi	r26, 0x00	; 0
     9e4:	b0 e0       	ldi	r27, 0x00	; 0
     9e6:	04 c0       	rjmp	.+8      	; 0x9f0 <__pack_f+0x9c>
     9e8:	88 0f       	add	r24, r24
     9ea:	99 1f       	adc	r25, r25
     9ec:	aa 1f       	adc	r26, r26
     9ee:	bb 1f       	adc	r27, r27
     9f0:	2a 95       	dec	r18
     9f2:	d2 f7       	brpl	.-12     	; 0x9e8 <__pack_f+0x94>
     9f4:	01 97       	sbiw	r24, 0x01	; 1
     9f6:	a1 09       	sbc	r26, r1
     9f8:	b1 09       	sbc	r27, r1
     9fa:	8e 21       	and	r24, r14
     9fc:	9f 21       	and	r25, r15
     9fe:	a0 23       	and	r26, r16
     a00:	b1 23       	and	r27, r17
     a02:	00 97       	sbiw	r24, 0x00	; 0
     a04:	a1 05       	cpc	r26, r1
     a06:	b1 05       	cpc	r27, r1
     a08:	21 f0       	breq	.+8      	; 0xa12 <__pack_f+0xbe>
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	a0 e0       	ldi	r26, 0x00	; 0
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	9a 01       	movw	r18, r20
     a14:	ab 01       	movw	r20, r22
     a16:	28 2b       	or	r18, r24
     a18:	39 2b       	or	r19, r25
     a1a:	4a 2b       	or	r20, r26
     a1c:	5b 2b       	or	r21, r27
     a1e:	da 01       	movw	r26, r20
     a20:	c9 01       	movw	r24, r18
     a22:	8f 77       	andi	r24, 0x7F	; 127
     a24:	90 70       	andi	r25, 0x00	; 0
     a26:	a0 70       	andi	r26, 0x00	; 0
     a28:	b0 70       	andi	r27, 0x00	; 0
     a2a:	80 34       	cpi	r24, 0x40	; 64
     a2c:	91 05       	cpc	r25, r1
     a2e:	a1 05       	cpc	r26, r1
     a30:	b1 05       	cpc	r27, r1
     a32:	39 f4       	brne	.+14     	; 0xa42 <__pack_f+0xee>
     a34:	27 ff       	sbrs	r18, 7
     a36:	09 c0       	rjmp	.+18     	; 0xa4a <__pack_f+0xf6>
     a38:	20 5c       	subi	r18, 0xC0	; 192
     a3a:	3f 4f       	sbci	r19, 0xFF	; 255
     a3c:	4f 4f       	sbci	r20, 0xFF	; 255
     a3e:	5f 4f       	sbci	r21, 0xFF	; 255
     a40:	04 c0       	rjmp	.+8      	; 0xa4a <__pack_f+0xf6>
     a42:	21 5c       	subi	r18, 0xC1	; 193
     a44:	3f 4f       	sbci	r19, 0xFF	; 255
     a46:	4f 4f       	sbci	r20, 0xFF	; 255
     a48:	5f 4f       	sbci	r21, 0xFF	; 255
     a4a:	e0 e0       	ldi	r30, 0x00	; 0
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	20 30       	cpi	r18, 0x00	; 0
     a50:	a0 e0       	ldi	r26, 0x00	; 0
     a52:	3a 07       	cpc	r19, r26
     a54:	a0 e0       	ldi	r26, 0x00	; 0
     a56:	4a 07       	cpc	r20, r26
     a58:	a0 e4       	ldi	r26, 0x40	; 64
     a5a:	5a 07       	cpc	r21, r26
     a5c:	10 f0       	brcs	.+4      	; 0xa62 <__pack_f+0x10e>
     a5e:	e1 e0       	ldi	r30, 0x01	; 1
     a60:	f0 e0       	ldi	r31, 0x00	; 0
     a62:	79 01       	movw	r14, r18
     a64:	8a 01       	movw	r16, r20
     a66:	27 c0       	rjmp	.+78     	; 0xab6 <__pack_f+0x162>
     a68:	60 38       	cpi	r22, 0x80	; 128
     a6a:	71 05       	cpc	r23, r1
     a6c:	64 f5       	brge	.+88     	; 0xac6 <__pack_f+0x172>
     a6e:	fb 01       	movw	r30, r22
     a70:	e1 58       	subi	r30, 0x81	; 129
     a72:	ff 4f       	sbci	r31, 0xFF	; 255
     a74:	d8 01       	movw	r26, r16
     a76:	c7 01       	movw	r24, r14
     a78:	8f 77       	andi	r24, 0x7F	; 127
     a7a:	90 70       	andi	r25, 0x00	; 0
     a7c:	a0 70       	andi	r26, 0x00	; 0
     a7e:	b0 70       	andi	r27, 0x00	; 0
     a80:	80 34       	cpi	r24, 0x40	; 64
     a82:	91 05       	cpc	r25, r1
     a84:	a1 05       	cpc	r26, r1
     a86:	b1 05       	cpc	r27, r1
     a88:	39 f4       	brne	.+14     	; 0xa98 <__pack_f+0x144>
     a8a:	e7 fe       	sbrs	r14, 7
     a8c:	0d c0       	rjmp	.+26     	; 0xaa8 <__pack_f+0x154>
     a8e:	80 e4       	ldi	r24, 0x40	; 64
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	a0 e0       	ldi	r26, 0x00	; 0
     a94:	b0 e0       	ldi	r27, 0x00	; 0
     a96:	04 c0       	rjmp	.+8      	; 0xaa0 <__pack_f+0x14c>
     a98:	8f e3       	ldi	r24, 0x3F	; 63
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	a0 e0       	ldi	r26, 0x00	; 0
     a9e:	b0 e0       	ldi	r27, 0x00	; 0
     aa0:	e8 0e       	add	r14, r24
     aa2:	f9 1e       	adc	r15, r25
     aa4:	0a 1f       	adc	r16, r26
     aa6:	1b 1f       	adc	r17, r27
     aa8:	17 ff       	sbrs	r17, 7
     aaa:	05 c0       	rjmp	.+10     	; 0xab6 <__pack_f+0x162>
     aac:	16 95       	lsr	r17
     aae:	07 95       	ror	r16
     ab0:	f7 94       	ror	r15
     ab2:	e7 94       	ror	r14
     ab4:	31 96       	adiw	r30, 0x01	; 1
     ab6:	87 e0       	ldi	r24, 0x07	; 7
     ab8:	16 95       	lsr	r17
     aba:	07 95       	ror	r16
     abc:	f7 94       	ror	r15
     abe:	e7 94       	ror	r14
     ac0:	8a 95       	dec	r24
     ac2:	d1 f7       	brne	.-12     	; 0xab8 <__pack_f+0x164>
     ac4:	05 c0       	rjmp	.+10     	; 0xad0 <__pack_f+0x17c>
     ac6:	ee 24       	eor	r14, r14
     ac8:	ff 24       	eor	r15, r15
     aca:	87 01       	movw	r16, r14
     acc:	ef ef       	ldi	r30, 0xFF	; 255
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	6e 2f       	mov	r22, r30
     ad2:	67 95       	ror	r22
     ad4:	66 27       	eor	r22, r22
     ad6:	67 95       	ror	r22
     ad8:	90 2f       	mov	r25, r16
     ada:	9f 77       	andi	r25, 0x7F	; 127
     adc:	d7 94       	ror	r13
     ade:	dd 24       	eor	r13, r13
     ae0:	d7 94       	ror	r13
     ae2:	8e 2f       	mov	r24, r30
     ae4:	86 95       	lsr	r24
     ae6:	49 2f       	mov	r20, r25
     ae8:	46 2b       	or	r20, r22
     aea:	58 2f       	mov	r21, r24
     aec:	5d 29       	or	r21, r13
     aee:	b7 01       	movw	r22, r14
     af0:	ca 01       	movw	r24, r20
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	ff 90       	pop	r15
     af8:	ef 90       	pop	r14
     afa:	df 90       	pop	r13
     afc:	08 95       	ret

00000afe <__unpack_f>:
     afe:	fc 01       	movw	r30, r24
     b00:	db 01       	movw	r26, r22
     b02:	40 81       	ld	r20, Z
     b04:	51 81       	ldd	r21, Z+1	; 0x01
     b06:	22 81       	ldd	r18, Z+2	; 0x02
     b08:	62 2f       	mov	r22, r18
     b0a:	6f 77       	andi	r22, 0x7F	; 127
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	22 1f       	adc	r18, r18
     b10:	22 27       	eor	r18, r18
     b12:	22 1f       	adc	r18, r18
     b14:	93 81       	ldd	r25, Z+3	; 0x03
     b16:	89 2f       	mov	r24, r25
     b18:	88 0f       	add	r24, r24
     b1a:	82 2b       	or	r24, r18
     b1c:	28 2f       	mov	r18, r24
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	99 1f       	adc	r25, r25
     b22:	99 27       	eor	r25, r25
     b24:	99 1f       	adc	r25, r25
     b26:	11 96       	adiw	r26, 0x01	; 1
     b28:	9c 93       	st	X, r25
     b2a:	11 97       	sbiw	r26, 0x01	; 1
     b2c:	21 15       	cp	r18, r1
     b2e:	31 05       	cpc	r19, r1
     b30:	a9 f5       	brne	.+106    	; 0xb9c <__unpack_f+0x9e>
     b32:	41 15       	cp	r20, r1
     b34:	51 05       	cpc	r21, r1
     b36:	61 05       	cpc	r22, r1
     b38:	71 05       	cpc	r23, r1
     b3a:	11 f4       	brne	.+4      	; 0xb40 <__unpack_f+0x42>
     b3c:	82 e0       	ldi	r24, 0x02	; 2
     b3e:	37 c0       	rjmp	.+110    	; 0xbae <__unpack_f+0xb0>
     b40:	82 e8       	ldi	r24, 0x82	; 130
     b42:	9f ef       	ldi	r25, 0xFF	; 255
     b44:	13 96       	adiw	r26, 0x03	; 3
     b46:	9c 93       	st	X, r25
     b48:	8e 93       	st	-X, r24
     b4a:	12 97       	sbiw	r26, 0x02	; 2
     b4c:	9a 01       	movw	r18, r20
     b4e:	ab 01       	movw	r20, r22
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	6a 95       	dec	r22
     b5c:	d1 f7       	brne	.-12     	; 0xb52 <__unpack_f+0x54>
     b5e:	83 e0       	ldi	r24, 0x03	; 3
     b60:	8c 93       	st	X, r24
     b62:	0d c0       	rjmp	.+26     	; 0xb7e <__unpack_f+0x80>
     b64:	22 0f       	add	r18, r18
     b66:	33 1f       	adc	r19, r19
     b68:	44 1f       	adc	r20, r20
     b6a:	55 1f       	adc	r21, r21
     b6c:	12 96       	adiw	r26, 0x02	; 2
     b6e:	8d 91       	ld	r24, X+
     b70:	9c 91       	ld	r25, X
     b72:	13 97       	sbiw	r26, 0x03	; 3
     b74:	01 97       	sbiw	r24, 0x01	; 1
     b76:	13 96       	adiw	r26, 0x03	; 3
     b78:	9c 93       	st	X, r25
     b7a:	8e 93       	st	-X, r24
     b7c:	12 97       	sbiw	r26, 0x02	; 2
     b7e:	20 30       	cpi	r18, 0x00	; 0
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	38 07       	cpc	r19, r24
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	48 07       	cpc	r20, r24
     b88:	80 e4       	ldi	r24, 0x40	; 64
     b8a:	58 07       	cpc	r21, r24
     b8c:	58 f3       	brcs	.-42     	; 0xb64 <__unpack_f+0x66>
     b8e:	14 96       	adiw	r26, 0x04	; 4
     b90:	2d 93       	st	X+, r18
     b92:	3d 93       	st	X+, r19
     b94:	4d 93       	st	X+, r20
     b96:	5c 93       	st	X, r21
     b98:	17 97       	sbiw	r26, 0x07	; 7
     b9a:	08 95       	ret
     b9c:	2f 3f       	cpi	r18, 0xFF	; 255
     b9e:	31 05       	cpc	r19, r1
     ba0:	79 f4       	brne	.+30     	; 0xbc0 <__unpack_f+0xc2>
     ba2:	41 15       	cp	r20, r1
     ba4:	51 05       	cpc	r21, r1
     ba6:	61 05       	cpc	r22, r1
     ba8:	71 05       	cpc	r23, r1
     baa:	19 f4       	brne	.+6      	; 0xbb2 <__unpack_f+0xb4>
     bac:	84 e0       	ldi	r24, 0x04	; 4
     bae:	8c 93       	st	X, r24
     bb0:	08 95       	ret
     bb2:	64 ff       	sbrs	r22, 4
     bb4:	03 c0       	rjmp	.+6      	; 0xbbc <__unpack_f+0xbe>
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	8c 93       	st	X, r24
     bba:	12 c0       	rjmp	.+36     	; 0xbe0 <__unpack_f+0xe2>
     bbc:	1c 92       	st	X, r1
     bbe:	10 c0       	rjmp	.+32     	; 0xbe0 <__unpack_f+0xe2>
     bc0:	2f 57       	subi	r18, 0x7F	; 127
     bc2:	30 40       	sbci	r19, 0x00	; 0
     bc4:	13 96       	adiw	r26, 0x03	; 3
     bc6:	3c 93       	st	X, r19
     bc8:	2e 93       	st	-X, r18
     bca:	12 97       	sbiw	r26, 0x02	; 2
     bcc:	83 e0       	ldi	r24, 0x03	; 3
     bce:	8c 93       	st	X, r24
     bd0:	87 e0       	ldi	r24, 0x07	; 7
     bd2:	44 0f       	add	r20, r20
     bd4:	55 1f       	adc	r21, r21
     bd6:	66 1f       	adc	r22, r22
     bd8:	77 1f       	adc	r23, r23
     bda:	8a 95       	dec	r24
     bdc:	d1 f7       	brne	.-12     	; 0xbd2 <__unpack_f+0xd4>
     bde:	70 64       	ori	r23, 0x40	; 64
     be0:	14 96       	adiw	r26, 0x04	; 4
     be2:	4d 93       	st	X+, r20
     be4:	5d 93       	st	X+, r21
     be6:	6d 93       	st	X+, r22
     be8:	7c 93       	st	X, r23
     bea:	17 97       	sbiw	r26, 0x07	; 7
     bec:	08 95       	ret

00000bee <__fpcmp_parts_f>:
     bee:	1f 93       	push	r17
     bf0:	dc 01       	movw	r26, r24
     bf2:	fb 01       	movw	r30, r22
     bf4:	9c 91       	ld	r25, X
     bf6:	92 30       	cpi	r25, 0x02	; 2
     bf8:	08 f4       	brcc	.+2      	; 0xbfc <__fpcmp_parts_f+0xe>
     bfa:	47 c0       	rjmp	.+142    	; 0xc8a <__fpcmp_parts_f+0x9c>
     bfc:	80 81       	ld	r24, Z
     bfe:	82 30       	cpi	r24, 0x02	; 2
     c00:	08 f4       	brcc	.+2      	; 0xc04 <__fpcmp_parts_f+0x16>
     c02:	43 c0       	rjmp	.+134    	; 0xc8a <__fpcmp_parts_f+0x9c>
     c04:	94 30       	cpi	r25, 0x04	; 4
     c06:	51 f4       	brne	.+20     	; 0xc1c <__fpcmp_parts_f+0x2e>
     c08:	11 96       	adiw	r26, 0x01	; 1
     c0a:	1c 91       	ld	r17, X
     c0c:	84 30       	cpi	r24, 0x04	; 4
     c0e:	99 f5       	brne	.+102    	; 0xc76 <__fpcmp_parts_f+0x88>
     c10:	81 81       	ldd	r24, Z+1	; 0x01
     c12:	68 2f       	mov	r22, r24
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	61 1b       	sub	r22, r17
     c18:	71 09       	sbc	r23, r1
     c1a:	3f c0       	rjmp	.+126    	; 0xc9a <__fpcmp_parts_f+0xac>
     c1c:	84 30       	cpi	r24, 0x04	; 4
     c1e:	21 f0       	breq	.+8      	; 0xc28 <__fpcmp_parts_f+0x3a>
     c20:	92 30       	cpi	r25, 0x02	; 2
     c22:	31 f4       	brne	.+12     	; 0xc30 <__fpcmp_parts_f+0x42>
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	b9 f1       	breq	.+110    	; 0xc96 <__fpcmp_parts_f+0xa8>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	88 23       	and	r24, r24
     c2c:	89 f1       	breq	.+98     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c2e:	2d c0       	rjmp	.+90     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c30:	11 96       	adiw	r26, 0x01	; 1
     c32:	1c 91       	ld	r17, X
     c34:	11 97       	sbiw	r26, 0x01	; 1
     c36:	82 30       	cpi	r24, 0x02	; 2
     c38:	f1 f0       	breq	.+60     	; 0xc76 <__fpcmp_parts_f+0x88>
     c3a:	81 81       	ldd	r24, Z+1	; 0x01
     c3c:	18 17       	cp	r17, r24
     c3e:	d9 f4       	brne	.+54     	; 0xc76 <__fpcmp_parts_f+0x88>
     c40:	12 96       	adiw	r26, 0x02	; 2
     c42:	2d 91       	ld	r18, X+
     c44:	3c 91       	ld	r19, X
     c46:	13 97       	sbiw	r26, 0x03	; 3
     c48:	82 81       	ldd	r24, Z+2	; 0x02
     c4a:	93 81       	ldd	r25, Z+3	; 0x03
     c4c:	82 17       	cp	r24, r18
     c4e:	93 07       	cpc	r25, r19
     c50:	94 f0       	brlt	.+36     	; 0xc76 <__fpcmp_parts_f+0x88>
     c52:	28 17       	cp	r18, r24
     c54:	39 07       	cpc	r19, r25
     c56:	bc f0       	brlt	.+46     	; 0xc86 <__fpcmp_parts_f+0x98>
     c58:	14 96       	adiw	r26, 0x04	; 4
     c5a:	8d 91       	ld	r24, X+
     c5c:	9d 91       	ld	r25, X+
     c5e:	0d 90       	ld	r0, X+
     c60:	bc 91       	ld	r27, X
     c62:	a0 2d       	mov	r26, r0
     c64:	24 81       	ldd	r18, Z+4	; 0x04
     c66:	35 81       	ldd	r19, Z+5	; 0x05
     c68:	46 81       	ldd	r20, Z+6	; 0x06
     c6a:	57 81       	ldd	r21, Z+7	; 0x07
     c6c:	28 17       	cp	r18, r24
     c6e:	39 07       	cpc	r19, r25
     c70:	4a 07       	cpc	r20, r26
     c72:	5b 07       	cpc	r21, r27
     c74:	18 f4       	brcc	.+6      	; 0xc7c <__fpcmp_parts_f+0x8e>
     c76:	11 23       	and	r17, r17
     c78:	41 f0       	breq	.+16     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c7a:	0a c0       	rjmp	.+20     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c7c:	82 17       	cp	r24, r18
     c7e:	93 07       	cpc	r25, r19
     c80:	a4 07       	cpc	r26, r20
     c82:	b5 07       	cpc	r27, r21
     c84:	40 f4       	brcc	.+16     	; 0xc96 <__fpcmp_parts_f+0xa8>
     c86:	11 23       	and	r17, r17
     c88:	19 f0       	breq	.+6      	; 0xc90 <__fpcmp_parts_f+0xa2>
     c8a:	61 e0       	ldi	r22, 0x01	; 1
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	05 c0       	rjmp	.+10     	; 0xc9a <__fpcmp_parts_f+0xac>
     c90:	6f ef       	ldi	r22, 0xFF	; 255
     c92:	7f ef       	ldi	r23, 0xFF	; 255
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <__fpcmp_parts_f+0xac>
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	cb 01       	movw	r24, r22
     c9c:	1f 91       	pop	r17
     c9e:	08 95       	ret

00000ca0 <Handle_data>:
 */
#include "PollingDataClient.h"
#include "lcd.h"

void Handle_data(float data)
{
     ca0:	df 93       	push	r29
     ca2:	cf 93       	push	r28
     ca4:	00 d0       	rcall	.+0      	; 0xca6 <Handle_data+0x6>
     ca6:	00 d0       	rcall	.+0      	; 0xca8 <Handle_data+0x8>
     ca8:	cd b7       	in	r28, 0x3d	; 61
     caa:	de b7       	in	r29, 0x3e	; 62
     cac:	69 83       	std	Y+1, r22	; 0x01
     cae:	7a 83       	std	Y+2, r23	; 0x02
     cb0:	8b 83       	std	Y+3, r24	; 0x03
     cb2:	9c 83       	std	Y+4, r25	; 0x04
	LCD_intgerToString(data);
     cb4:	69 81       	ldd	r22, Y+1	; 0x01
     cb6:	7a 81       	ldd	r23, Y+2	; 0x02
     cb8:	8b 81       	ldd	r24, Y+3	; 0x03
     cba:	9c 81       	ldd	r25, Y+4	; 0x04
     cbc:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
     cc0:	dc 01       	movw	r26, r24
     cc2:	cb 01       	movw	r24, r22
     cc4:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <LCD_intgerToString>
}
     cc8:	0f 90       	pop	r0
     cca:	0f 90       	pop	r0
     ccc:	0f 90       	pop	r0
     cce:	0f 90       	pop	r0
     cd0:	cf 91       	pop	r28
     cd2:	df 91       	pop	r29
     cd4:	08 95       	ret

00000cd6 <Get_Data>:
#include "spi.h"

unsigned char data;

unsigned char Get_Data(void)
{
     cd6:	df 93       	push	r29
     cd8:	cf 93       	push	r28
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
	SPI_sendReceiveByte(0x80);
     cde:	80 e8       	ldi	r24, 0x80	; 128
     ce0:	0e 94 53 11 	call	0x22a6	; 0x22a6 <SPI_sendReceiveByte>
	data = SPI_sendReceiveByte(0x02);
     ce4:	82 e0       	ldi	r24, 0x02	; 2
     ce6:	0e 94 53 11 	call	0x22a6	; 0x22a6 <SPI_sendReceiveByte>
     cea:	80 93 96 01 	sts	0x0196, r24
	return data;
     cee:	80 91 96 01 	lds	r24, 0x0196
}
     cf2:	cf 91       	pop	r28
     cf4:	df 91       	pop	r29
     cf6:	08 95       	ret

00000cf8 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     cf8:	df 93       	push	r29
     cfa:	cf 93       	push	r28
     cfc:	00 d0       	rcall	.+0      	; 0xcfe <GPIO_setupPinDirection+0x6>
     cfe:	00 d0       	rcall	.+0      	; 0xd00 <GPIO_setupPinDirection+0x8>
     d00:	0f 92       	push	r0
     d02:	cd b7       	in	r28, 0x3d	; 61
     d04:	de b7       	in	r29, 0x3e	; 62
     d06:	89 83       	std	Y+1, r24	; 0x01
     d08:	6a 83       	std	Y+2, r22	; 0x02
     d0a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     d0c:	8a 81       	ldd	r24, Y+2	; 0x02
     d0e:	88 30       	cpi	r24, 0x08	; 8
     d10:	08 f0       	brcs	.+2      	; 0xd14 <GPIO_setupPinDirection+0x1c>
     d12:	d5 c0       	rjmp	.+426    	; 0xebe <GPIO_setupPinDirection+0x1c6>
     d14:	89 81       	ldd	r24, Y+1	; 0x01
     d16:	84 30       	cpi	r24, 0x04	; 4
     d18:	08 f0       	brcs	.+2      	; 0xd1c <GPIO_setupPinDirection+0x24>
     d1a:	d1 c0       	rjmp	.+418    	; 0xebe <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     d1c:	89 81       	ldd	r24, Y+1	; 0x01
     d1e:	28 2f       	mov	r18, r24
     d20:	30 e0       	ldi	r19, 0x00	; 0
     d22:	3d 83       	std	Y+5, r19	; 0x05
     d24:	2c 83       	std	Y+4, r18	; 0x04
     d26:	8c 81       	ldd	r24, Y+4	; 0x04
     d28:	9d 81       	ldd	r25, Y+5	; 0x05
     d2a:	81 30       	cpi	r24, 0x01	; 1
     d2c:	91 05       	cpc	r25, r1
     d2e:	09 f4       	brne	.+2      	; 0xd32 <GPIO_setupPinDirection+0x3a>
     d30:	43 c0       	rjmp	.+134    	; 0xdb8 <GPIO_setupPinDirection+0xc0>
     d32:	2c 81       	ldd	r18, Y+4	; 0x04
     d34:	3d 81       	ldd	r19, Y+5	; 0x05
     d36:	22 30       	cpi	r18, 0x02	; 2
     d38:	31 05       	cpc	r19, r1
     d3a:	2c f4       	brge	.+10     	; 0xd46 <GPIO_setupPinDirection+0x4e>
     d3c:	8c 81       	ldd	r24, Y+4	; 0x04
     d3e:	9d 81       	ldd	r25, Y+5	; 0x05
     d40:	00 97       	sbiw	r24, 0x00	; 0
     d42:	71 f0       	breq	.+28     	; 0xd60 <GPIO_setupPinDirection+0x68>
     d44:	bc c0       	rjmp	.+376    	; 0xebe <GPIO_setupPinDirection+0x1c6>
     d46:	2c 81       	ldd	r18, Y+4	; 0x04
     d48:	3d 81       	ldd	r19, Y+5	; 0x05
     d4a:	22 30       	cpi	r18, 0x02	; 2
     d4c:	31 05       	cpc	r19, r1
     d4e:	09 f4       	brne	.+2      	; 0xd52 <GPIO_setupPinDirection+0x5a>
     d50:	5f c0       	rjmp	.+190    	; 0xe10 <GPIO_setupPinDirection+0x118>
     d52:	8c 81       	ldd	r24, Y+4	; 0x04
     d54:	9d 81       	ldd	r25, Y+5	; 0x05
     d56:	83 30       	cpi	r24, 0x03	; 3
     d58:	91 05       	cpc	r25, r1
     d5a:	09 f4       	brne	.+2      	; 0xd5e <GPIO_setupPinDirection+0x66>
     d5c:	85 c0       	rjmp	.+266    	; 0xe68 <GPIO_setupPinDirection+0x170>
     d5e:	af c0       	rjmp	.+350    	; 0xebe <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     d60:	8b 81       	ldd	r24, Y+3	; 0x03
     d62:	81 30       	cpi	r24, 0x01	; 1
     d64:	a1 f4       	brne	.+40     	; 0xd8e <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     d66:	aa e3       	ldi	r26, 0x3A	; 58
     d68:	b0 e0       	ldi	r27, 0x00	; 0
     d6a:	ea e3       	ldi	r30, 0x3A	; 58
     d6c:	f0 e0       	ldi	r31, 0x00	; 0
     d6e:	80 81       	ld	r24, Z
     d70:	48 2f       	mov	r20, r24
     d72:	8a 81       	ldd	r24, Y+2	; 0x02
     d74:	28 2f       	mov	r18, r24
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	02 2e       	mov	r0, r18
     d7e:	02 c0       	rjmp	.+4      	; 0xd84 <GPIO_setupPinDirection+0x8c>
     d80:	88 0f       	add	r24, r24
     d82:	99 1f       	adc	r25, r25
     d84:	0a 94       	dec	r0
     d86:	e2 f7       	brpl	.-8      	; 0xd80 <GPIO_setupPinDirection+0x88>
     d88:	84 2b       	or	r24, r20
     d8a:	8c 93       	st	X, r24
     d8c:	98 c0       	rjmp	.+304    	; 0xebe <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     d8e:	aa e3       	ldi	r26, 0x3A	; 58
     d90:	b0 e0       	ldi	r27, 0x00	; 0
     d92:	ea e3       	ldi	r30, 0x3A	; 58
     d94:	f0 e0       	ldi	r31, 0x00	; 0
     d96:	80 81       	ld	r24, Z
     d98:	48 2f       	mov	r20, r24
     d9a:	8a 81       	ldd	r24, Y+2	; 0x02
     d9c:	28 2f       	mov	r18, r24
     d9e:	30 e0       	ldi	r19, 0x00	; 0
     da0:	81 e0       	ldi	r24, 0x01	; 1
     da2:	90 e0       	ldi	r25, 0x00	; 0
     da4:	02 2e       	mov	r0, r18
     da6:	02 c0       	rjmp	.+4      	; 0xdac <GPIO_setupPinDirection+0xb4>
     da8:	88 0f       	add	r24, r24
     daa:	99 1f       	adc	r25, r25
     dac:	0a 94       	dec	r0
     dae:	e2 f7       	brpl	.-8      	; 0xda8 <GPIO_setupPinDirection+0xb0>
     db0:	80 95       	com	r24
     db2:	84 23       	and	r24, r20
     db4:	8c 93       	st	X, r24
     db6:	83 c0       	rjmp	.+262    	; 0xebe <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     db8:	8b 81       	ldd	r24, Y+3	; 0x03
     dba:	81 30       	cpi	r24, 0x01	; 1
     dbc:	a1 f4       	brne	.+40     	; 0xde6 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     dbe:	a7 e3       	ldi	r26, 0x37	; 55
     dc0:	b0 e0       	ldi	r27, 0x00	; 0
     dc2:	e7 e3       	ldi	r30, 0x37	; 55
     dc4:	f0 e0       	ldi	r31, 0x00	; 0
     dc6:	80 81       	ld	r24, Z
     dc8:	48 2f       	mov	r20, r24
     dca:	8a 81       	ldd	r24, Y+2	; 0x02
     dcc:	28 2f       	mov	r18, r24
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	02 2e       	mov	r0, r18
     dd6:	02 c0       	rjmp	.+4      	; 0xddc <GPIO_setupPinDirection+0xe4>
     dd8:	88 0f       	add	r24, r24
     dda:	99 1f       	adc	r25, r25
     ddc:	0a 94       	dec	r0
     dde:	e2 f7       	brpl	.-8      	; 0xdd8 <GPIO_setupPinDirection+0xe0>
     de0:	84 2b       	or	r24, r20
     de2:	8c 93       	st	X, r24
     de4:	6c c0       	rjmp	.+216    	; 0xebe <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     de6:	a7 e3       	ldi	r26, 0x37	; 55
     de8:	b0 e0       	ldi	r27, 0x00	; 0
     dea:	e7 e3       	ldi	r30, 0x37	; 55
     dec:	f0 e0       	ldi	r31, 0x00	; 0
     dee:	80 81       	ld	r24, Z
     df0:	48 2f       	mov	r20, r24
     df2:	8a 81       	ldd	r24, Y+2	; 0x02
     df4:	28 2f       	mov	r18, r24
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	90 e0       	ldi	r25, 0x00	; 0
     dfc:	02 2e       	mov	r0, r18
     dfe:	02 c0       	rjmp	.+4      	; 0xe04 <GPIO_setupPinDirection+0x10c>
     e00:	88 0f       	add	r24, r24
     e02:	99 1f       	adc	r25, r25
     e04:	0a 94       	dec	r0
     e06:	e2 f7       	brpl	.-8      	; 0xe00 <GPIO_setupPinDirection+0x108>
     e08:	80 95       	com	r24
     e0a:	84 23       	and	r24, r20
     e0c:	8c 93       	st	X, r24
     e0e:	57 c0       	rjmp	.+174    	; 0xebe <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     e10:	8b 81       	ldd	r24, Y+3	; 0x03
     e12:	81 30       	cpi	r24, 0x01	; 1
     e14:	a1 f4       	brne	.+40     	; 0xe3e <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     e16:	a4 e3       	ldi	r26, 0x34	; 52
     e18:	b0 e0       	ldi	r27, 0x00	; 0
     e1a:	e4 e3       	ldi	r30, 0x34	; 52
     e1c:	f0 e0       	ldi	r31, 0x00	; 0
     e1e:	80 81       	ld	r24, Z
     e20:	48 2f       	mov	r20, r24
     e22:	8a 81       	ldd	r24, Y+2	; 0x02
     e24:	28 2f       	mov	r18, r24
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	90 e0       	ldi	r25, 0x00	; 0
     e2c:	02 2e       	mov	r0, r18
     e2e:	02 c0       	rjmp	.+4      	; 0xe34 <GPIO_setupPinDirection+0x13c>
     e30:	88 0f       	add	r24, r24
     e32:	99 1f       	adc	r25, r25
     e34:	0a 94       	dec	r0
     e36:	e2 f7       	brpl	.-8      	; 0xe30 <GPIO_setupPinDirection+0x138>
     e38:	84 2b       	or	r24, r20
     e3a:	8c 93       	st	X, r24
     e3c:	40 c0       	rjmp	.+128    	; 0xebe <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     e3e:	a4 e3       	ldi	r26, 0x34	; 52
     e40:	b0 e0       	ldi	r27, 0x00	; 0
     e42:	e4 e3       	ldi	r30, 0x34	; 52
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	80 81       	ld	r24, Z
     e48:	48 2f       	mov	r20, r24
     e4a:	8a 81       	ldd	r24, Y+2	; 0x02
     e4c:	28 2f       	mov	r18, r24
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	02 2e       	mov	r0, r18
     e56:	02 c0       	rjmp	.+4      	; 0xe5c <GPIO_setupPinDirection+0x164>
     e58:	88 0f       	add	r24, r24
     e5a:	99 1f       	adc	r25, r25
     e5c:	0a 94       	dec	r0
     e5e:	e2 f7       	brpl	.-8      	; 0xe58 <GPIO_setupPinDirection+0x160>
     e60:	80 95       	com	r24
     e62:	84 23       	and	r24, r20
     e64:	8c 93       	st	X, r24
     e66:	2b c0       	rjmp	.+86     	; 0xebe <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     e68:	8b 81       	ldd	r24, Y+3	; 0x03
     e6a:	81 30       	cpi	r24, 0x01	; 1
     e6c:	a1 f4       	brne	.+40     	; 0xe96 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     e6e:	a1 e3       	ldi	r26, 0x31	; 49
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	e1 e3       	ldi	r30, 0x31	; 49
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	48 2f       	mov	r20, r24
     e7a:	8a 81       	ldd	r24, Y+2	; 0x02
     e7c:	28 2f       	mov	r18, r24
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	81 e0       	ldi	r24, 0x01	; 1
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	02 2e       	mov	r0, r18
     e86:	02 c0       	rjmp	.+4      	; 0xe8c <GPIO_setupPinDirection+0x194>
     e88:	88 0f       	add	r24, r24
     e8a:	99 1f       	adc	r25, r25
     e8c:	0a 94       	dec	r0
     e8e:	e2 f7       	brpl	.-8      	; 0xe88 <GPIO_setupPinDirection+0x190>
     e90:	84 2b       	or	r24, r20
     e92:	8c 93       	st	X, r24
     e94:	14 c0       	rjmp	.+40     	; 0xebe <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     e96:	a1 e3       	ldi	r26, 0x31	; 49
     e98:	b0 e0       	ldi	r27, 0x00	; 0
     e9a:	e1 e3       	ldi	r30, 0x31	; 49
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	80 81       	ld	r24, Z
     ea0:	48 2f       	mov	r20, r24
     ea2:	8a 81       	ldd	r24, Y+2	; 0x02
     ea4:	28 2f       	mov	r18, r24
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	02 2e       	mov	r0, r18
     eae:	02 c0       	rjmp	.+4      	; 0xeb4 <GPIO_setupPinDirection+0x1bc>
     eb0:	88 0f       	add	r24, r24
     eb2:	99 1f       	adc	r25, r25
     eb4:	0a 94       	dec	r0
     eb6:	e2 f7       	brpl	.-8      	; 0xeb0 <GPIO_setupPinDirection+0x1b8>
     eb8:	80 95       	com	r24
     eba:	84 23       	and	r24, r20
     ebc:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     ebe:	0f 90       	pop	r0
     ec0:	0f 90       	pop	r0
     ec2:	0f 90       	pop	r0
     ec4:	0f 90       	pop	r0
     ec6:	0f 90       	pop	r0
     ec8:	cf 91       	pop	r28
     eca:	df 91       	pop	r29
     ecc:	08 95       	ret

00000ece <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     ece:	df 93       	push	r29
     ed0:	cf 93       	push	r28
     ed2:	00 d0       	rcall	.+0      	; 0xed4 <GPIO_writePin+0x6>
     ed4:	00 d0       	rcall	.+0      	; 0xed6 <GPIO_writePin+0x8>
     ed6:	0f 92       	push	r0
     ed8:	cd b7       	in	r28, 0x3d	; 61
     eda:	de b7       	in	r29, 0x3e	; 62
     edc:	89 83       	std	Y+1, r24	; 0x01
     ede:	6a 83       	std	Y+2, r22	; 0x02
     ee0:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     ee2:	8a 81       	ldd	r24, Y+2	; 0x02
     ee4:	88 30       	cpi	r24, 0x08	; 8
     ee6:	08 f0       	brcs	.+2      	; 0xeea <GPIO_writePin+0x1c>
     ee8:	d5 c0       	rjmp	.+426    	; 0x1094 <GPIO_writePin+0x1c6>
     eea:	89 81       	ldd	r24, Y+1	; 0x01
     eec:	84 30       	cpi	r24, 0x04	; 4
     eee:	08 f0       	brcs	.+2      	; 0xef2 <GPIO_writePin+0x24>
     ef0:	d1 c0       	rjmp	.+418    	; 0x1094 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     ef2:	89 81       	ldd	r24, Y+1	; 0x01
     ef4:	28 2f       	mov	r18, r24
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	3d 83       	std	Y+5, r19	; 0x05
     efa:	2c 83       	std	Y+4, r18	; 0x04
     efc:	8c 81       	ldd	r24, Y+4	; 0x04
     efe:	9d 81       	ldd	r25, Y+5	; 0x05
     f00:	81 30       	cpi	r24, 0x01	; 1
     f02:	91 05       	cpc	r25, r1
     f04:	09 f4       	brne	.+2      	; 0xf08 <GPIO_writePin+0x3a>
     f06:	43 c0       	rjmp	.+134    	; 0xf8e <GPIO_writePin+0xc0>
     f08:	2c 81       	ldd	r18, Y+4	; 0x04
     f0a:	3d 81       	ldd	r19, Y+5	; 0x05
     f0c:	22 30       	cpi	r18, 0x02	; 2
     f0e:	31 05       	cpc	r19, r1
     f10:	2c f4       	brge	.+10     	; 0xf1c <GPIO_writePin+0x4e>
     f12:	8c 81       	ldd	r24, Y+4	; 0x04
     f14:	9d 81       	ldd	r25, Y+5	; 0x05
     f16:	00 97       	sbiw	r24, 0x00	; 0
     f18:	71 f0       	breq	.+28     	; 0xf36 <GPIO_writePin+0x68>
     f1a:	bc c0       	rjmp	.+376    	; 0x1094 <GPIO_writePin+0x1c6>
     f1c:	2c 81       	ldd	r18, Y+4	; 0x04
     f1e:	3d 81       	ldd	r19, Y+5	; 0x05
     f20:	22 30       	cpi	r18, 0x02	; 2
     f22:	31 05       	cpc	r19, r1
     f24:	09 f4       	brne	.+2      	; 0xf28 <GPIO_writePin+0x5a>
     f26:	5f c0       	rjmp	.+190    	; 0xfe6 <GPIO_writePin+0x118>
     f28:	8c 81       	ldd	r24, Y+4	; 0x04
     f2a:	9d 81       	ldd	r25, Y+5	; 0x05
     f2c:	83 30       	cpi	r24, 0x03	; 3
     f2e:	91 05       	cpc	r25, r1
     f30:	09 f4       	brne	.+2      	; 0xf34 <GPIO_writePin+0x66>
     f32:	85 c0       	rjmp	.+266    	; 0x103e <GPIO_writePin+0x170>
     f34:	af c0       	rjmp	.+350    	; 0x1094 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     f36:	8b 81       	ldd	r24, Y+3	; 0x03
     f38:	81 30       	cpi	r24, 0x01	; 1
     f3a:	a1 f4       	brne	.+40     	; 0xf64 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     f3c:	ab e3       	ldi	r26, 0x3B	; 59
     f3e:	b0 e0       	ldi	r27, 0x00	; 0
     f40:	eb e3       	ldi	r30, 0x3B	; 59
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	80 81       	ld	r24, Z
     f46:	48 2f       	mov	r20, r24
     f48:	8a 81       	ldd	r24, Y+2	; 0x02
     f4a:	28 2f       	mov	r18, r24
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	81 e0       	ldi	r24, 0x01	; 1
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	02 2e       	mov	r0, r18
     f54:	02 c0       	rjmp	.+4      	; 0xf5a <GPIO_writePin+0x8c>
     f56:	88 0f       	add	r24, r24
     f58:	99 1f       	adc	r25, r25
     f5a:	0a 94       	dec	r0
     f5c:	e2 f7       	brpl	.-8      	; 0xf56 <GPIO_writePin+0x88>
     f5e:	84 2b       	or	r24, r20
     f60:	8c 93       	st	X, r24
     f62:	98 c0       	rjmp	.+304    	; 0x1094 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     f64:	ab e3       	ldi	r26, 0x3B	; 59
     f66:	b0 e0       	ldi	r27, 0x00	; 0
     f68:	eb e3       	ldi	r30, 0x3B	; 59
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	48 2f       	mov	r20, r24
     f70:	8a 81       	ldd	r24, Y+2	; 0x02
     f72:	28 2f       	mov	r18, r24
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	02 2e       	mov	r0, r18
     f7c:	02 c0       	rjmp	.+4      	; 0xf82 <GPIO_writePin+0xb4>
     f7e:	88 0f       	add	r24, r24
     f80:	99 1f       	adc	r25, r25
     f82:	0a 94       	dec	r0
     f84:	e2 f7       	brpl	.-8      	; 0xf7e <GPIO_writePin+0xb0>
     f86:	80 95       	com	r24
     f88:	84 23       	and	r24, r20
     f8a:	8c 93       	st	X, r24
     f8c:	83 c0       	rjmp	.+262    	; 0x1094 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     f8e:	8b 81       	ldd	r24, Y+3	; 0x03
     f90:	81 30       	cpi	r24, 0x01	; 1
     f92:	a1 f4       	brne	.+40     	; 0xfbc <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
     f94:	a8 e3       	ldi	r26, 0x38	; 56
     f96:	b0 e0       	ldi	r27, 0x00	; 0
     f98:	e8 e3       	ldi	r30, 0x38	; 56
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	48 2f       	mov	r20, r24
     fa0:	8a 81       	ldd	r24, Y+2	; 0x02
     fa2:	28 2f       	mov	r18, r24
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	02 2e       	mov	r0, r18
     fac:	02 c0       	rjmp	.+4      	; 0xfb2 <GPIO_writePin+0xe4>
     fae:	88 0f       	add	r24, r24
     fb0:	99 1f       	adc	r25, r25
     fb2:	0a 94       	dec	r0
     fb4:	e2 f7       	brpl	.-8      	; 0xfae <GPIO_writePin+0xe0>
     fb6:	84 2b       	or	r24, r20
     fb8:	8c 93       	st	X, r24
     fba:	6c c0       	rjmp	.+216    	; 0x1094 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     fbc:	a8 e3       	ldi	r26, 0x38	; 56
     fbe:	b0 e0       	ldi	r27, 0x00	; 0
     fc0:	e8 e3       	ldi	r30, 0x38	; 56
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	80 81       	ld	r24, Z
     fc6:	48 2f       	mov	r20, r24
     fc8:	8a 81       	ldd	r24, Y+2	; 0x02
     fca:	28 2f       	mov	r18, r24
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	81 e0       	ldi	r24, 0x01	; 1
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	02 2e       	mov	r0, r18
     fd4:	02 c0       	rjmp	.+4      	; 0xfda <GPIO_writePin+0x10c>
     fd6:	88 0f       	add	r24, r24
     fd8:	99 1f       	adc	r25, r25
     fda:	0a 94       	dec	r0
     fdc:	e2 f7       	brpl	.-8      	; 0xfd6 <GPIO_writePin+0x108>
     fde:	80 95       	com	r24
     fe0:	84 23       	and	r24, r20
     fe2:	8c 93       	st	X, r24
     fe4:	57 c0       	rjmp	.+174    	; 0x1094 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     fe6:	8b 81       	ldd	r24, Y+3	; 0x03
     fe8:	81 30       	cpi	r24, 0x01	; 1
     fea:	a1 f4       	brne	.+40     	; 0x1014 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
     fec:	a5 e3       	ldi	r26, 0x35	; 53
     fee:	b0 e0       	ldi	r27, 0x00	; 0
     ff0:	e5 e3       	ldi	r30, 0x35	; 53
     ff2:	f0 e0       	ldi	r31, 0x00	; 0
     ff4:	80 81       	ld	r24, Z
     ff6:	48 2f       	mov	r20, r24
     ff8:	8a 81       	ldd	r24, Y+2	; 0x02
     ffa:	28 2f       	mov	r18, r24
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	81 e0       	ldi	r24, 0x01	; 1
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	02 2e       	mov	r0, r18
    1004:	02 c0       	rjmp	.+4      	; 0x100a <GPIO_writePin+0x13c>
    1006:	88 0f       	add	r24, r24
    1008:	99 1f       	adc	r25, r25
    100a:	0a 94       	dec	r0
    100c:	e2 f7       	brpl	.-8      	; 0x1006 <GPIO_writePin+0x138>
    100e:	84 2b       	or	r24, r20
    1010:	8c 93       	st	X, r24
    1012:	40 c0       	rjmp	.+128    	; 0x1094 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1014:	a5 e3       	ldi	r26, 0x35	; 53
    1016:	b0 e0       	ldi	r27, 0x00	; 0
    1018:	e5 e3       	ldi	r30, 0x35	; 53
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	80 81       	ld	r24, Z
    101e:	48 2f       	mov	r20, r24
    1020:	8a 81       	ldd	r24, Y+2	; 0x02
    1022:	28 2f       	mov	r18, r24
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	81 e0       	ldi	r24, 0x01	; 1
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	02 2e       	mov	r0, r18
    102c:	02 c0       	rjmp	.+4      	; 0x1032 <GPIO_writePin+0x164>
    102e:	88 0f       	add	r24, r24
    1030:	99 1f       	adc	r25, r25
    1032:	0a 94       	dec	r0
    1034:	e2 f7       	brpl	.-8      	; 0x102e <GPIO_writePin+0x160>
    1036:	80 95       	com	r24
    1038:	84 23       	and	r24, r20
    103a:	8c 93       	st	X, r24
    103c:	2b c0       	rjmp	.+86     	; 0x1094 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    103e:	8b 81       	ldd	r24, Y+3	; 0x03
    1040:	81 30       	cpi	r24, 0x01	; 1
    1042:	a1 f4       	brne	.+40     	; 0x106c <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1044:	a2 e3       	ldi	r26, 0x32	; 50
    1046:	b0 e0       	ldi	r27, 0x00	; 0
    1048:	e2 e3       	ldi	r30, 0x32	; 50
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	48 2f       	mov	r20, r24
    1050:	8a 81       	ldd	r24, Y+2	; 0x02
    1052:	28 2f       	mov	r18, r24
    1054:	30 e0       	ldi	r19, 0x00	; 0
    1056:	81 e0       	ldi	r24, 0x01	; 1
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	02 2e       	mov	r0, r18
    105c:	02 c0       	rjmp	.+4      	; 0x1062 <GPIO_writePin+0x194>
    105e:	88 0f       	add	r24, r24
    1060:	99 1f       	adc	r25, r25
    1062:	0a 94       	dec	r0
    1064:	e2 f7       	brpl	.-8      	; 0x105e <GPIO_writePin+0x190>
    1066:	84 2b       	or	r24, r20
    1068:	8c 93       	st	X, r24
    106a:	14 c0       	rjmp	.+40     	; 0x1094 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    106c:	a2 e3       	ldi	r26, 0x32	; 50
    106e:	b0 e0       	ldi	r27, 0x00	; 0
    1070:	e2 e3       	ldi	r30, 0x32	; 50
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	48 2f       	mov	r20, r24
    1078:	8a 81       	ldd	r24, Y+2	; 0x02
    107a:	28 2f       	mov	r18, r24
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	81 e0       	ldi	r24, 0x01	; 1
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	02 2e       	mov	r0, r18
    1084:	02 c0       	rjmp	.+4      	; 0x108a <GPIO_writePin+0x1bc>
    1086:	88 0f       	add	r24, r24
    1088:	99 1f       	adc	r25, r25
    108a:	0a 94       	dec	r0
    108c:	e2 f7       	brpl	.-8      	; 0x1086 <GPIO_writePin+0x1b8>
    108e:	80 95       	com	r24
    1090:	84 23       	and	r24, r20
    1092:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1094:	0f 90       	pop	r0
    1096:	0f 90       	pop	r0
    1098:	0f 90       	pop	r0
    109a:	0f 90       	pop	r0
    109c:	0f 90       	pop	r0
    109e:	cf 91       	pop	r28
    10a0:	df 91       	pop	r29
    10a2:	08 95       	ret

000010a4 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    10a4:	df 93       	push	r29
    10a6:	cf 93       	push	r28
    10a8:	00 d0       	rcall	.+0      	; 0x10aa <GPIO_readPin+0x6>
    10aa:	00 d0       	rcall	.+0      	; 0x10ac <GPIO_readPin+0x8>
    10ac:	0f 92       	push	r0
    10ae:	cd b7       	in	r28, 0x3d	; 61
    10b0:	de b7       	in	r29, 0x3e	; 62
    10b2:	8a 83       	std	Y+2, r24	; 0x02
    10b4:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    10b6:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    10b8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ba:	88 30       	cpi	r24, 0x08	; 8
    10bc:	08 f0       	brcs	.+2      	; 0x10c0 <GPIO_readPin+0x1c>
    10be:	84 c0       	rjmp	.+264    	; 0x11c8 <GPIO_readPin+0x124>
    10c0:	8a 81       	ldd	r24, Y+2	; 0x02
    10c2:	84 30       	cpi	r24, 0x04	; 4
    10c4:	08 f0       	brcs	.+2      	; 0x10c8 <GPIO_readPin+0x24>
    10c6:	80 c0       	rjmp	.+256    	; 0x11c8 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    10c8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ca:	28 2f       	mov	r18, r24
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	3d 83       	std	Y+5, r19	; 0x05
    10d0:	2c 83       	std	Y+4, r18	; 0x04
    10d2:	4c 81       	ldd	r20, Y+4	; 0x04
    10d4:	5d 81       	ldd	r21, Y+5	; 0x05
    10d6:	41 30       	cpi	r20, 0x01	; 1
    10d8:	51 05       	cpc	r21, r1
    10da:	79 f1       	breq	.+94     	; 0x113a <GPIO_readPin+0x96>
    10dc:	8c 81       	ldd	r24, Y+4	; 0x04
    10de:	9d 81       	ldd	r25, Y+5	; 0x05
    10e0:	82 30       	cpi	r24, 0x02	; 2
    10e2:	91 05       	cpc	r25, r1
    10e4:	34 f4       	brge	.+12     	; 0x10f2 <GPIO_readPin+0x4e>
    10e6:	2c 81       	ldd	r18, Y+4	; 0x04
    10e8:	3d 81       	ldd	r19, Y+5	; 0x05
    10ea:	21 15       	cp	r18, r1
    10ec:	31 05       	cpc	r19, r1
    10ee:	69 f0       	breq	.+26     	; 0x110a <GPIO_readPin+0x66>
    10f0:	6b c0       	rjmp	.+214    	; 0x11c8 <GPIO_readPin+0x124>
    10f2:	4c 81       	ldd	r20, Y+4	; 0x04
    10f4:	5d 81       	ldd	r21, Y+5	; 0x05
    10f6:	42 30       	cpi	r20, 0x02	; 2
    10f8:	51 05       	cpc	r21, r1
    10fa:	b9 f1       	breq	.+110    	; 0x116a <GPIO_readPin+0xc6>
    10fc:	8c 81       	ldd	r24, Y+4	; 0x04
    10fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1100:	83 30       	cpi	r24, 0x03	; 3
    1102:	91 05       	cpc	r25, r1
    1104:	09 f4       	brne	.+2      	; 0x1108 <GPIO_readPin+0x64>
    1106:	49 c0       	rjmp	.+146    	; 0x119a <GPIO_readPin+0xf6>
    1108:	5f c0       	rjmp	.+190    	; 0x11c8 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    110a:	e9 e3       	ldi	r30, 0x39	; 57
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	80 81       	ld	r24, Z
    1110:	28 2f       	mov	r18, r24
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	8b 81       	ldd	r24, Y+3	; 0x03
    1116:	88 2f       	mov	r24, r24
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	a9 01       	movw	r20, r18
    111c:	02 c0       	rjmp	.+4      	; 0x1122 <GPIO_readPin+0x7e>
    111e:	55 95       	asr	r21
    1120:	47 95       	ror	r20
    1122:	8a 95       	dec	r24
    1124:	e2 f7       	brpl	.-8      	; 0x111e <GPIO_readPin+0x7a>
    1126:	ca 01       	movw	r24, r20
    1128:	81 70       	andi	r24, 0x01	; 1
    112a:	90 70       	andi	r25, 0x00	; 0
    112c:	88 23       	and	r24, r24
    112e:	19 f0       	breq	.+6      	; 0x1136 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	89 83       	std	Y+1, r24	; 0x01
    1134:	49 c0       	rjmp	.+146    	; 0x11c8 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1136:	19 82       	std	Y+1, r1	; 0x01
    1138:	47 c0       	rjmp	.+142    	; 0x11c8 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    113a:	e6 e3       	ldi	r30, 0x36	; 54
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	80 81       	ld	r24, Z
    1140:	28 2f       	mov	r18, r24
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	8b 81       	ldd	r24, Y+3	; 0x03
    1146:	88 2f       	mov	r24, r24
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	a9 01       	movw	r20, r18
    114c:	02 c0       	rjmp	.+4      	; 0x1152 <GPIO_readPin+0xae>
    114e:	55 95       	asr	r21
    1150:	47 95       	ror	r20
    1152:	8a 95       	dec	r24
    1154:	e2 f7       	brpl	.-8      	; 0x114e <GPIO_readPin+0xaa>
    1156:	ca 01       	movw	r24, r20
    1158:	81 70       	andi	r24, 0x01	; 1
    115a:	90 70       	andi	r25, 0x00	; 0
    115c:	88 23       	and	r24, r24
    115e:	19 f0       	breq	.+6      	; 0x1166 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1160:	81 e0       	ldi	r24, 0x01	; 1
    1162:	89 83       	std	Y+1, r24	; 0x01
    1164:	31 c0       	rjmp	.+98     	; 0x11c8 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1166:	19 82       	std	Y+1, r1	; 0x01
    1168:	2f c0       	rjmp	.+94     	; 0x11c8 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    116a:	e3 e3       	ldi	r30, 0x33	; 51
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	80 81       	ld	r24, Z
    1170:	28 2f       	mov	r18, r24
    1172:	30 e0       	ldi	r19, 0x00	; 0
    1174:	8b 81       	ldd	r24, Y+3	; 0x03
    1176:	88 2f       	mov	r24, r24
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	a9 01       	movw	r20, r18
    117c:	02 c0       	rjmp	.+4      	; 0x1182 <GPIO_readPin+0xde>
    117e:	55 95       	asr	r21
    1180:	47 95       	ror	r20
    1182:	8a 95       	dec	r24
    1184:	e2 f7       	brpl	.-8      	; 0x117e <GPIO_readPin+0xda>
    1186:	ca 01       	movw	r24, r20
    1188:	81 70       	andi	r24, 0x01	; 1
    118a:	90 70       	andi	r25, 0x00	; 0
    118c:	88 23       	and	r24, r24
    118e:	19 f0       	breq	.+6      	; 0x1196 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	89 83       	std	Y+1, r24	; 0x01
    1194:	19 c0       	rjmp	.+50     	; 0x11c8 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1196:	19 82       	std	Y+1, r1	; 0x01
    1198:	17 c0       	rjmp	.+46     	; 0x11c8 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    119a:	e0 e3       	ldi	r30, 0x30	; 48
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	80 81       	ld	r24, Z
    11a0:	28 2f       	mov	r18, r24
    11a2:	30 e0       	ldi	r19, 0x00	; 0
    11a4:	8b 81       	ldd	r24, Y+3	; 0x03
    11a6:	88 2f       	mov	r24, r24
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	a9 01       	movw	r20, r18
    11ac:	02 c0       	rjmp	.+4      	; 0x11b2 <GPIO_readPin+0x10e>
    11ae:	55 95       	asr	r21
    11b0:	47 95       	ror	r20
    11b2:	8a 95       	dec	r24
    11b4:	e2 f7       	brpl	.-8      	; 0x11ae <GPIO_readPin+0x10a>
    11b6:	ca 01       	movw	r24, r20
    11b8:	81 70       	andi	r24, 0x01	; 1
    11ba:	90 70       	andi	r25, 0x00	; 0
    11bc:	88 23       	and	r24, r24
    11be:	19 f0       	breq	.+6      	; 0x11c6 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	89 83       	std	Y+1, r24	; 0x01
    11c4:	01 c0       	rjmp	.+2      	; 0x11c8 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    11c6:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    11c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    11ca:	0f 90       	pop	r0
    11cc:	0f 90       	pop	r0
    11ce:	0f 90       	pop	r0
    11d0:	0f 90       	pop	r0
    11d2:	0f 90       	pop	r0
    11d4:	cf 91       	pop	r28
    11d6:	df 91       	pop	r29
    11d8:	08 95       	ret

000011da <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    11da:	df 93       	push	r29
    11dc:	cf 93       	push	r28
    11de:	00 d0       	rcall	.+0      	; 0x11e0 <GPIO_setupPortDirection+0x6>
    11e0:	00 d0       	rcall	.+0      	; 0x11e2 <GPIO_setupPortDirection+0x8>
    11e2:	cd b7       	in	r28, 0x3d	; 61
    11e4:	de b7       	in	r29, 0x3e	; 62
    11e6:	89 83       	std	Y+1, r24	; 0x01
    11e8:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    11ea:	89 81       	ldd	r24, Y+1	; 0x01
    11ec:	84 30       	cpi	r24, 0x04	; 4
    11ee:	90 f5       	brcc	.+100    	; 0x1254 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    11f0:	89 81       	ldd	r24, Y+1	; 0x01
    11f2:	28 2f       	mov	r18, r24
    11f4:	30 e0       	ldi	r19, 0x00	; 0
    11f6:	3c 83       	std	Y+4, r19	; 0x04
    11f8:	2b 83       	std	Y+3, r18	; 0x03
    11fa:	8b 81       	ldd	r24, Y+3	; 0x03
    11fc:	9c 81       	ldd	r25, Y+4	; 0x04
    11fe:	81 30       	cpi	r24, 0x01	; 1
    1200:	91 05       	cpc	r25, r1
    1202:	d1 f0       	breq	.+52     	; 0x1238 <GPIO_setupPortDirection+0x5e>
    1204:	2b 81       	ldd	r18, Y+3	; 0x03
    1206:	3c 81       	ldd	r19, Y+4	; 0x04
    1208:	22 30       	cpi	r18, 0x02	; 2
    120a:	31 05       	cpc	r19, r1
    120c:	2c f4       	brge	.+10     	; 0x1218 <GPIO_setupPortDirection+0x3e>
    120e:	8b 81       	ldd	r24, Y+3	; 0x03
    1210:	9c 81       	ldd	r25, Y+4	; 0x04
    1212:	00 97       	sbiw	r24, 0x00	; 0
    1214:	61 f0       	breq	.+24     	; 0x122e <GPIO_setupPortDirection+0x54>
    1216:	1e c0       	rjmp	.+60     	; 0x1254 <GPIO_setupPortDirection+0x7a>
    1218:	2b 81       	ldd	r18, Y+3	; 0x03
    121a:	3c 81       	ldd	r19, Y+4	; 0x04
    121c:	22 30       	cpi	r18, 0x02	; 2
    121e:	31 05       	cpc	r19, r1
    1220:	81 f0       	breq	.+32     	; 0x1242 <GPIO_setupPortDirection+0x68>
    1222:	8b 81       	ldd	r24, Y+3	; 0x03
    1224:	9c 81       	ldd	r25, Y+4	; 0x04
    1226:	83 30       	cpi	r24, 0x03	; 3
    1228:	91 05       	cpc	r25, r1
    122a:	81 f0       	breq	.+32     	; 0x124c <GPIO_setupPortDirection+0x72>
    122c:	13 c0       	rjmp	.+38     	; 0x1254 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    122e:	ea e3       	ldi	r30, 0x3A	; 58
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	8a 81       	ldd	r24, Y+2	; 0x02
    1234:	80 83       	st	Z, r24
    1236:	0e c0       	rjmp	.+28     	; 0x1254 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1238:	e7 e3       	ldi	r30, 0x37	; 55
    123a:	f0 e0       	ldi	r31, 0x00	; 0
    123c:	8a 81       	ldd	r24, Y+2	; 0x02
    123e:	80 83       	st	Z, r24
    1240:	09 c0       	rjmp	.+18     	; 0x1254 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1242:	e4 e3       	ldi	r30, 0x34	; 52
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	8a 81       	ldd	r24, Y+2	; 0x02
    1248:	80 83       	st	Z, r24
    124a:	04 c0       	rjmp	.+8      	; 0x1254 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    124c:	e1 e3       	ldi	r30, 0x31	; 49
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	8a 81       	ldd	r24, Y+2	; 0x02
    1252:	80 83       	st	Z, r24
			break;
		}
	}
}
    1254:	0f 90       	pop	r0
    1256:	0f 90       	pop	r0
    1258:	0f 90       	pop	r0
    125a:	0f 90       	pop	r0
    125c:	cf 91       	pop	r28
    125e:	df 91       	pop	r29
    1260:	08 95       	ret

00001262 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1262:	df 93       	push	r29
    1264:	cf 93       	push	r28
    1266:	00 d0       	rcall	.+0      	; 0x1268 <GPIO_writePort+0x6>
    1268:	00 d0       	rcall	.+0      	; 0x126a <GPIO_writePort+0x8>
    126a:	cd b7       	in	r28, 0x3d	; 61
    126c:	de b7       	in	r29, 0x3e	; 62
    126e:	89 83       	std	Y+1, r24	; 0x01
    1270:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1272:	89 81       	ldd	r24, Y+1	; 0x01
    1274:	84 30       	cpi	r24, 0x04	; 4
    1276:	90 f5       	brcc	.+100    	; 0x12dc <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1278:	89 81       	ldd	r24, Y+1	; 0x01
    127a:	28 2f       	mov	r18, r24
    127c:	30 e0       	ldi	r19, 0x00	; 0
    127e:	3c 83       	std	Y+4, r19	; 0x04
    1280:	2b 83       	std	Y+3, r18	; 0x03
    1282:	8b 81       	ldd	r24, Y+3	; 0x03
    1284:	9c 81       	ldd	r25, Y+4	; 0x04
    1286:	81 30       	cpi	r24, 0x01	; 1
    1288:	91 05       	cpc	r25, r1
    128a:	d1 f0       	breq	.+52     	; 0x12c0 <GPIO_writePort+0x5e>
    128c:	2b 81       	ldd	r18, Y+3	; 0x03
    128e:	3c 81       	ldd	r19, Y+4	; 0x04
    1290:	22 30       	cpi	r18, 0x02	; 2
    1292:	31 05       	cpc	r19, r1
    1294:	2c f4       	brge	.+10     	; 0x12a0 <GPIO_writePort+0x3e>
    1296:	8b 81       	ldd	r24, Y+3	; 0x03
    1298:	9c 81       	ldd	r25, Y+4	; 0x04
    129a:	00 97       	sbiw	r24, 0x00	; 0
    129c:	61 f0       	breq	.+24     	; 0x12b6 <GPIO_writePort+0x54>
    129e:	1e c0       	rjmp	.+60     	; 0x12dc <GPIO_writePort+0x7a>
    12a0:	2b 81       	ldd	r18, Y+3	; 0x03
    12a2:	3c 81       	ldd	r19, Y+4	; 0x04
    12a4:	22 30       	cpi	r18, 0x02	; 2
    12a6:	31 05       	cpc	r19, r1
    12a8:	81 f0       	breq	.+32     	; 0x12ca <GPIO_writePort+0x68>
    12aa:	8b 81       	ldd	r24, Y+3	; 0x03
    12ac:	9c 81       	ldd	r25, Y+4	; 0x04
    12ae:	83 30       	cpi	r24, 0x03	; 3
    12b0:	91 05       	cpc	r25, r1
    12b2:	81 f0       	breq	.+32     	; 0x12d4 <GPIO_writePort+0x72>
    12b4:	13 c0       	rjmp	.+38     	; 0x12dc <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    12b6:	eb e3       	ldi	r30, 0x3B	; 59
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	8a 81       	ldd	r24, Y+2	; 0x02
    12bc:	80 83       	st	Z, r24
    12be:	0e c0       	rjmp	.+28     	; 0x12dc <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    12c0:	e8 e3       	ldi	r30, 0x38	; 56
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	8a 81       	ldd	r24, Y+2	; 0x02
    12c6:	80 83       	st	Z, r24
    12c8:	09 c0       	rjmp	.+18     	; 0x12dc <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    12ca:	e5 e3       	ldi	r30, 0x35	; 53
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	8a 81       	ldd	r24, Y+2	; 0x02
    12d0:	80 83       	st	Z, r24
    12d2:	04 c0       	rjmp	.+8      	; 0x12dc <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    12d4:	e2 e3       	ldi	r30, 0x32	; 50
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	8a 81       	ldd	r24, Y+2	; 0x02
    12da:	80 83       	st	Z, r24
			break;
		}
	}
}
    12dc:	0f 90       	pop	r0
    12de:	0f 90       	pop	r0
    12e0:	0f 90       	pop	r0
    12e2:	0f 90       	pop	r0
    12e4:	cf 91       	pop	r28
    12e6:	df 91       	pop	r29
    12e8:	08 95       	ret

000012ea <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    12ea:	df 93       	push	r29
    12ec:	cf 93       	push	r28
    12ee:	00 d0       	rcall	.+0      	; 0x12f0 <GPIO_readPort+0x6>
    12f0:	00 d0       	rcall	.+0      	; 0x12f2 <GPIO_readPort+0x8>
    12f2:	cd b7       	in	r28, 0x3d	; 61
    12f4:	de b7       	in	r29, 0x3e	; 62
    12f6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    12f8:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    12fa:	8a 81       	ldd	r24, Y+2	; 0x02
    12fc:	84 30       	cpi	r24, 0x04	; 4
    12fe:	90 f5       	brcc	.+100    	; 0x1364 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1300:	8a 81       	ldd	r24, Y+2	; 0x02
    1302:	28 2f       	mov	r18, r24
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	3c 83       	std	Y+4, r19	; 0x04
    1308:	2b 83       	std	Y+3, r18	; 0x03
    130a:	8b 81       	ldd	r24, Y+3	; 0x03
    130c:	9c 81       	ldd	r25, Y+4	; 0x04
    130e:	81 30       	cpi	r24, 0x01	; 1
    1310:	91 05       	cpc	r25, r1
    1312:	d1 f0       	breq	.+52     	; 0x1348 <GPIO_readPort+0x5e>
    1314:	2b 81       	ldd	r18, Y+3	; 0x03
    1316:	3c 81       	ldd	r19, Y+4	; 0x04
    1318:	22 30       	cpi	r18, 0x02	; 2
    131a:	31 05       	cpc	r19, r1
    131c:	2c f4       	brge	.+10     	; 0x1328 <GPIO_readPort+0x3e>
    131e:	8b 81       	ldd	r24, Y+3	; 0x03
    1320:	9c 81       	ldd	r25, Y+4	; 0x04
    1322:	00 97       	sbiw	r24, 0x00	; 0
    1324:	61 f0       	breq	.+24     	; 0x133e <GPIO_readPort+0x54>
    1326:	1e c0       	rjmp	.+60     	; 0x1364 <GPIO_readPort+0x7a>
    1328:	2b 81       	ldd	r18, Y+3	; 0x03
    132a:	3c 81       	ldd	r19, Y+4	; 0x04
    132c:	22 30       	cpi	r18, 0x02	; 2
    132e:	31 05       	cpc	r19, r1
    1330:	81 f0       	breq	.+32     	; 0x1352 <GPIO_readPort+0x68>
    1332:	8b 81       	ldd	r24, Y+3	; 0x03
    1334:	9c 81       	ldd	r25, Y+4	; 0x04
    1336:	83 30       	cpi	r24, 0x03	; 3
    1338:	91 05       	cpc	r25, r1
    133a:	81 f0       	breq	.+32     	; 0x135c <GPIO_readPort+0x72>
    133c:	13 c0       	rjmp	.+38     	; 0x1364 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    133e:	e9 e3       	ldi	r30, 0x39	; 57
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	80 81       	ld	r24, Z
    1344:	89 83       	std	Y+1, r24	; 0x01
    1346:	0e c0       	rjmp	.+28     	; 0x1364 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1348:	e6 e3       	ldi	r30, 0x36	; 54
    134a:	f0 e0       	ldi	r31, 0x00	; 0
    134c:	80 81       	ld	r24, Z
    134e:	89 83       	std	Y+1, r24	; 0x01
    1350:	09 c0       	rjmp	.+18     	; 0x1364 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1352:	e3 e3       	ldi	r30, 0x33	; 51
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	80 81       	ld	r24, Z
    1358:	89 83       	std	Y+1, r24	; 0x01
    135a:	04 c0       	rjmp	.+8      	; 0x1364 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    135c:	e0 e3       	ldi	r30, 0x30	; 48
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	80 81       	ld	r24, Z
    1362:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1364:	89 81       	ldd	r24, Y+1	; 0x01
}
    1366:	0f 90       	pop	r0
    1368:	0f 90       	pop	r0
    136a:	0f 90       	pop	r0
    136c:	0f 90       	pop	r0
    136e:	cf 91       	pop	r28
    1370:	df 91       	pop	r29
    1372:	08 95       	ret

00001374 <DIO_init>:


void DIO_init(void)
{
    1374:	df 93       	push	r29
    1376:	cf 93       	push	r28
    1378:	00 d0       	rcall	.+0      	; 0x137a <DIO_init+0x6>
    137a:	00 d0       	rcall	.+0      	; 0x137c <DIO_init+0x8>
    137c:	cd b7       	in	r28, 0x3d	; 61
    137e:	de b7       	in	r29, 0x3e	; 62
	uint8_t loop;
	for(loop=0u; loop < DIO_NUM_OF_CHANNELS ; loop++ ){
    1380:	1c 82       	std	Y+4, r1	; 0x04
    1382:	2f c0       	rjmp	.+94     	; 0x13e2 <DIO_init+0x6e>
		uint8_t portid=dio_config_array[loop].port_id;
    1384:	8c 81       	ldd	r24, Y+4	; 0x04
    1386:	28 2f       	mov	r18, r24
    1388:	30 e0       	ldi	r19, 0x00	; 0
    138a:	c9 01       	movw	r24, r18
    138c:	88 0f       	add	r24, r24
    138e:	99 1f       	adc	r25, r25
    1390:	82 0f       	add	r24, r18
    1392:	93 1f       	adc	r25, r19
    1394:	fc 01       	movw	r30, r24
    1396:	e4 59       	subi	r30, 0x94	; 148
    1398:	fe 4f       	sbci	r31, 0xFE	; 254
    139a:	80 81       	ld	r24, Z
    139c:	8b 83       	std	Y+3, r24	; 0x03
		uint8_t pin_num=dio_config_array[loop].pin_num;
    139e:	8c 81       	ldd	r24, Y+4	; 0x04
    13a0:	28 2f       	mov	r18, r24
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	c9 01       	movw	r24, r18
    13a6:	88 0f       	add	r24, r24
    13a8:	99 1f       	adc	r25, r25
    13aa:	82 0f       	add	r24, r18
    13ac:	93 1f       	adc	r25, r19
    13ae:	fc 01       	movw	r30, r24
    13b0:	e3 59       	subi	r30, 0x93	; 147
    13b2:	fe 4f       	sbci	r31, 0xFE	; 254
    13b4:	80 81       	ld	r24, Z
    13b6:	8a 83       	std	Y+2, r24	; 0x02
		uint8_t direction=dio_config_array[loop].direction;
    13b8:	8c 81       	ldd	r24, Y+4	; 0x04
    13ba:	28 2f       	mov	r18, r24
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	c9 01       	movw	r24, r18
    13c0:	88 0f       	add	r24, r24
    13c2:	99 1f       	adc	r25, r25
    13c4:	82 0f       	add	r24, r18
    13c6:	93 1f       	adc	r25, r19
    13c8:	fc 01       	movw	r30, r24
    13ca:	e2 59       	subi	r30, 0x92	; 146
    13cc:	fe 4f       	sbci	r31, 0xFE	; 254
    13ce:	80 81       	ld	r24, Z
    13d0:	89 83       	std	Y+1, r24	; 0x01
		GPIO_setupPinDirection(portid,pin_num,direction);
    13d2:	8b 81       	ldd	r24, Y+3	; 0x03
    13d4:	6a 81       	ldd	r22, Y+2	; 0x02
    13d6:	49 81       	ldd	r20, Y+1	; 0x01
    13d8:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <GPIO_setupPinDirection>


void DIO_init(void)
{
	uint8_t loop;
	for(loop=0u; loop < DIO_NUM_OF_CHANNELS ; loop++ ){
    13dc:	8c 81       	ldd	r24, Y+4	; 0x04
    13de:	8f 5f       	subi	r24, 0xFF	; 255
    13e0:	8c 83       	std	Y+4, r24	; 0x04
    13e2:	8c 81       	ldd	r24, Y+4	; 0x04
    13e4:	85 30       	cpi	r24, 0x05	; 5
    13e6:	70 f2       	brcs	.-100    	; 0x1384 <DIO_init+0x10>
		uint8_t portid=dio_config_array[loop].port_id;
		uint8_t pin_num=dio_config_array[loop].pin_num;
		uint8_t direction=dio_config_array[loop].direction;
		GPIO_setupPinDirection(portid,pin_num,direction);
	}
}
    13e8:	0f 90       	pop	r0
    13ea:	0f 90       	pop	r0
    13ec:	0f 90       	pop	r0
    13ee:	0f 90       	pop	r0
    13f0:	cf 91       	pop	r28
    13f2:	df 91       	pop	r29
    13f4:	08 95       	ret

000013f6 <DIO_ChannelGroupWrite>:


void DIO_ChannelGroupWrite(ChannelGroupType channel_group_variabe , uint8_t data)
{
    13f6:	cf 92       	push	r12
    13f8:	ef 92       	push	r14
    13fa:	ff 92       	push	r15
    13fc:	0f 93       	push	r16
    13fe:	1f 93       	push	r17
    1400:	df 93       	push	r29
    1402:	cf 93       	push	r28
    1404:	cd b7       	in	r28, 0x3d	; 61
    1406:	de b7       	in	r29, 0x3e	; 62
    1408:	63 97       	sbiw	r28, 0x13	; 19
    140a:	0f b6       	in	r0, 0x3f	; 63
    140c:	f8 94       	cli
    140e:	de bf       	out	0x3e, r29	; 62
    1410:	0f be       	out	0x3f, r0	; 63
    1412:	cd bf       	out	0x3d, r28	; 61
    1414:	ef 82       	std	Y+7, r14	; 0x07
    1416:	f8 86       	std	Y+8, r15	; 0x08
    1418:	09 87       	std	Y+9, r16	; 0x09
    141a:	1a 87       	std	Y+10, r17	; 0x0a
    141c:	2b 87       	std	Y+11, r18	; 0x0b
    141e:	3c 87       	std	Y+12, r19	; 0x0c
    1420:	4d 87       	std	Y+13, r20	; 0x0d
    1422:	5e 87       	std	Y+14, r21	; 0x0e
    1424:	6f 87       	std	Y+15, r22	; 0x0f
    1426:	78 8b       	std	Y+16, r23	; 0x10
    1428:	89 8b       	std	Y+17, r24	; 0x11
    142a:	9a 8b       	std	Y+18, r25	; 0x12
    142c:	cb 8a       	std	Y+19, r12	; 0x13
	uint8_t loop;
	uint8_t to=channel_group_variabe.no_of_channels;
    142e:	8f 81       	ldd	r24, Y+7	; 0x07
    1430:	98 85       	ldd	r25, Y+8	; 0x08
    1432:	8d 83       	std	Y+5, r24	; 0x05

	for(loop=0u; loop <to ; loop++ ){
    1434:	1e 82       	std	Y+6, r1	; 0x06
    1436:	4c c0       	rjmp	.+152    	; 0x14d0 <DIO_ChannelGroupWrite+0xda>
		uint8_t channel_id=channel_group_variabe.group_ids[loop];
    1438:	8e 81       	ldd	r24, Y+6	; 0x06
    143a:	88 2f       	mov	r24, r24
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	01 96       	adiw	r24, 0x01	; 1
    1440:	9c 01       	movw	r18, r24
    1442:	22 0f       	add	r18, r18
    1444:	33 1f       	adc	r19, r19
    1446:	ce 01       	movw	r24, r28
    1448:	01 96       	adiw	r24, 0x01	; 1
    144a:	82 0f       	add	r24, r18
    144c:	93 1f       	adc	r25, r19
    144e:	fc 01       	movw	r30, r24
    1450:	36 96       	adiw	r30, 0x06	; 6
    1452:	80 81       	ld	r24, Z
    1454:	91 81       	ldd	r25, Z+1	; 0x01
    1456:	8c 83       	std	Y+4, r24	; 0x04
		uint8_t portid=dio_config_array[channel_id].port_id;
    1458:	8c 81       	ldd	r24, Y+4	; 0x04
    145a:	28 2f       	mov	r18, r24
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	c9 01       	movw	r24, r18
    1460:	88 0f       	add	r24, r24
    1462:	99 1f       	adc	r25, r25
    1464:	82 0f       	add	r24, r18
    1466:	93 1f       	adc	r25, r19
    1468:	fc 01       	movw	r30, r24
    146a:	e4 59       	subi	r30, 0x94	; 148
    146c:	fe 4f       	sbci	r31, 0xFE	; 254
    146e:	80 81       	ld	r24, Z
    1470:	8b 83       	std	Y+3, r24	; 0x03
		uint8_t pin_num=dio_config_array[channel_id].pin_num;
    1472:	8c 81       	ldd	r24, Y+4	; 0x04
    1474:	28 2f       	mov	r18, r24
    1476:	30 e0       	ldi	r19, 0x00	; 0
    1478:	c9 01       	movw	r24, r18
    147a:	88 0f       	add	r24, r24
    147c:	99 1f       	adc	r25, r25
    147e:	82 0f       	add	r24, r18
    1480:	93 1f       	adc	r25, r19
    1482:	fc 01       	movw	r30, r24
    1484:	e3 59       	subi	r30, 0x93	; 147
    1486:	fe 4f       	sbci	r31, 0xFE	; 254
    1488:	80 81       	ld	r24, Z
    148a:	8a 83       	std	Y+2, r24	; 0x02
		uint8_t bit_data=READ_BIT(data,loop);
    148c:	8e 81       	ldd	r24, Y+6	; 0x06
    148e:	28 2f       	mov	r18, r24
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	02 c0       	rjmp	.+4      	; 0x149c <DIO_ChannelGroupWrite+0xa6>
    1498:	88 0f       	add	r24, r24
    149a:	99 1f       	adc	r25, r25
    149c:	2a 95       	dec	r18
    149e:	e2 f7       	brpl	.-8      	; 0x1498 <DIO_ChannelGroupWrite+0xa2>
    14a0:	98 2f       	mov	r25, r24
    14a2:	8b 89       	ldd	r24, Y+19	; 0x13
    14a4:	89 23       	and	r24, r25
    14a6:	28 2f       	mov	r18, r24
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	8e 81       	ldd	r24, Y+6	; 0x06
    14ac:	88 2f       	mov	r24, r24
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	a9 01       	movw	r20, r18
    14b2:	02 c0       	rjmp	.+4      	; 0x14b8 <DIO_ChannelGroupWrite+0xc2>
    14b4:	55 95       	asr	r21
    14b6:	47 95       	ror	r20
    14b8:	8a 95       	dec	r24
    14ba:	e2 f7       	brpl	.-8      	; 0x14b4 <DIO_ChannelGroupWrite+0xbe>
    14bc:	ca 01       	movw	r24, r20
    14be:	89 83       	std	Y+1, r24	; 0x01
		GPIO_writePin(portid,pin_num,bit_data);
    14c0:	8b 81       	ldd	r24, Y+3	; 0x03
    14c2:	6a 81       	ldd	r22, Y+2	; 0x02
    14c4:	49 81       	ldd	r20, Y+1	; 0x01
    14c6:	0e 94 67 07 	call	0xece	; 0xece <GPIO_writePin>
void DIO_ChannelGroupWrite(ChannelGroupType channel_group_variabe , uint8_t data)
{
	uint8_t loop;
	uint8_t to=channel_group_variabe.no_of_channels;

	for(loop=0u; loop <to ; loop++ ){
    14ca:	8e 81       	ldd	r24, Y+6	; 0x06
    14cc:	8f 5f       	subi	r24, 0xFF	; 255
    14ce:	8e 83       	std	Y+6, r24	; 0x06
    14d0:	9e 81       	ldd	r25, Y+6	; 0x06
    14d2:	8d 81       	ldd	r24, Y+5	; 0x05
    14d4:	98 17       	cp	r25, r24
    14d6:	08 f4       	brcc	.+2      	; 0x14da <DIO_ChannelGroupWrite+0xe4>
    14d8:	af cf       	rjmp	.-162    	; 0x1438 <DIO_ChannelGroupWrite+0x42>
		GPIO_writePin(portid,pin_num,bit_data);

	}


}
    14da:	63 96       	adiw	r28, 0x13	; 19
    14dc:	0f b6       	in	r0, 0x3f	; 63
    14de:	f8 94       	cli
    14e0:	de bf       	out	0x3e, r29	; 62
    14e2:	0f be       	out	0x3f, r0	; 63
    14e4:	cd bf       	out	0x3d, r28	; 61
    14e6:	cf 91       	pop	r28
    14e8:	df 91       	pop	r29
    14ea:	1f 91       	pop	r17
    14ec:	0f 91       	pop	r16
    14ee:	ff 90       	pop	r15
    14f0:	ef 90       	pop	r14
    14f2:	cf 90       	pop	r12
    14f4:	08 95       	ret

000014f6 <DIO_ChannelGroupRead>:


void DIO_ChannelGroupRead(ChannelGroupType channel_group_variabe ,uint8_t * data_ptr)
{
    14f6:	cf 92       	push	r12
    14f8:	df 92       	push	r13
    14fa:	ef 92       	push	r14
    14fc:	ff 92       	push	r15
    14fe:	0f 93       	push	r16
    1500:	1f 93       	push	r17
    1502:	df 93       	push	r29
    1504:	cf 93       	push	r28
    1506:	cd b7       	in	r28, 0x3d	; 61
    1508:	de b7       	in	r29, 0x3e	; 62
    150a:	64 97       	sbiw	r28, 0x14	; 20
    150c:	0f b6       	in	r0, 0x3f	; 63
    150e:	f8 94       	cli
    1510:	de bf       	out	0x3e, r29	; 62
    1512:	0f be       	out	0x3f, r0	; 63
    1514:	cd bf       	out	0x3d, r28	; 61
    1516:	ef 82       	std	Y+7, r14	; 0x07
    1518:	f8 86       	std	Y+8, r15	; 0x08
    151a:	09 87       	std	Y+9, r16	; 0x09
    151c:	1a 87       	std	Y+10, r17	; 0x0a
    151e:	2b 87       	std	Y+11, r18	; 0x0b
    1520:	3c 87       	std	Y+12, r19	; 0x0c
    1522:	4d 87       	std	Y+13, r20	; 0x0d
    1524:	5e 87       	std	Y+14, r21	; 0x0e
    1526:	6f 87       	std	Y+15, r22	; 0x0f
    1528:	78 8b       	std	Y+16, r23	; 0x10
    152a:	89 8b       	std	Y+17, r24	; 0x11
    152c:	9a 8b       	std	Y+18, r25	; 0x12
    152e:	dc 8a       	std	Y+20, r13	; 0x14
    1530:	cb 8a       	std	Y+19, r12	; 0x13

	uint8_t loop;
	uint8_t to=channel_group_variabe.no_of_channels;
    1532:	8f 81       	ldd	r24, Y+7	; 0x07
    1534:	98 85       	ldd	r25, Y+8	; 0x08
    1536:	8d 83       	std	Y+5, r24	; 0x05

	for(loop=0u; loop <to ; loop++ ){
    1538:	1e 82       	std	Y+6, r1	; 0x06
    153a:	5d c0       	rjmp	.+186    	; 0x15f6 <DIO_ChannelGroupRead+0x100>
		uint8_t channel_id=channel_group_variabe.group_ids[loop];
    153c:	8e 81       	ldd	r24, Y+6	; 0x06
    153e:	88 2f       	mov	r24, r24
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	01 96       	adiw	r24, 0x01	; 1
    1544:	9c 01       	movw	r18, r24
    1546:	22 0f       	add	r18, r18
    1548:	33 1f       	adc	r19, r19
    154a:	ce 01       	movw	r24, r28
    154c:	01 96       	adiw	r24, 0x01	; 1
    154e:	82 0f       	add	r24, r18
    1550:	93 1f       	adc	r25, r19
    1552:	fc 01       	movw	r30, r24
    1554:	36 96       	adiw	r30, 0x06	; 6
    1556:	80 81       	ld	r24, Z
    1558:	91 81       	ldd	r25, Z+1	; 0x01
    155a:	8c 83       	std	Y+4, r24	; 0x04
		uint8_t portid=dio_config_array[channel_id].port_id;
    155c:	8c 81       	ldd	r24, Y+4	; 0x04
    155e:	28 2f       	mov	r18, r24
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	c9 01       	movw	r24, r18
    1564:	88 0f       	add	r24, r24
    1566:	99 1f       	adc	r25, r25
    1568:	82 0f       	add	r24, r18
    156a:	93 1f       	adc	r25, r19
    156c:	fc 01       	movw	r30, r24
    156e:	e4 59       	subi	r30, 0x94	; 148
    1570:	fe 4f       	sbci	r31, 0xFE	; 254
    1572:	80 81       	ld	r24, Z
    1574:	8b 83       	std	Y+3, r24	; 0x03
		uint8_t pin_num=dio_config_array[channel_id].pin_num;
    1576:	8c 81       	ldd	r24, Y+4	; 0x04
    1578:	28 2f       	mov	r18, r24
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	c9 01       	movw	r24, r18
    157e:	88 0f       	add	r24, r24
    1580:	99 1f       	adc	r25, r25
    1582:	82 0f       	add	r24, r18
    1584:	93 1f       	adc	r25, r19
    1586:	fc 01       	movw	r30, r24
    1588:	e3 59       	subi	r30, 0x93	; 147
    158a:	fe 4f       	sbci	r31, 0xFE	; 254
    158c:	80 81       	ld	r24, Z
    158e:	8a 83       	std	Y+2, r24	; 0x02
		uint8_t data = GPIO_readPin(portid, pin_num);
    1590:	8b 81       	ldd	r24, Y+3	; 0x03
    1592:	6a 81       	ldd	r22, Y+2	; 0x02
    1594:	0e 94 52 08 	call	0x10a4	; 0x10a4 <GPIO_readPin>
    1598:	89 83       	std	Y+1, r24	; 0x01
		if(data == LOGIC_HIGH){
    159a:	89 81       	ldd	r24, Y+1	; 0x01
    159c:	81 30       	cpi	r24, 0x01	; 1
    159e:	a1 f4       	brne	.+40     	; 0x15c8 <DIO_ChannelGroupRead+0xd2>
			SET_BIT(* data_ptr,loop);
    15a0:	eb 89       	ldd	r30, Y+19	; 0x13
    15a2:	fc 89       	ldd	r31, Y+20	; 0x14
    15a4:	80 81       	ld	r24, Z
    15a6:	48 2f       	mov	r20, r24
    15a8:	8e 81       	ldd	r24, Y+6	; 0x06
    15aa:	28 2f       	mov	r18, r24
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	81 e0       	ldi	r24, 0x01	; 1
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	02 2e       	mov	r0, r18
    15b4:	02 c0       	rjmp	.+4      	; 0x15ba <DIO_ChannelGroupRead+0xc4>
    15b6:	88 0f       	add	r24, r24
    15b8:	99 1f       	adc	r25, r25
    15ba:	0a 94       	dec	r0
    15bc:	e2 f7       	brpl	.-8      	; 0x15b6 <DIO_ChannelGroupRead+0xc0>
    15be:	84 2b       	or	r24, r20
    15c0:	eb 89       	ldd	r30, Y+19	; 0x13
    15c2:	fc 89       	ldd	r31, Y+20	; 0x14
    15c4:	80 83       	st	Z, r24
    15c6:	14 c0       	rjmp	.+40     	; 0x15f0 <DIO_ChannelGroupRead+0xfa>
		}else{
			CLEAR_BIT(* data_ptr,loop);
    15c8:	eb 89       	ldd	r30, Y+19	; 0x13
    15ca:	fc 89       	ldd	r31, Y+20	; 0x14
    15cc:	80 81       	ld	r24, Z
    15ce:	48 2f       	mov	r20, r24
    15d0:	8e 81       	ldd	r24, Y+6	; 0x06
    15d2:	28 2f       	mov	r18, r24
    15d4:	30 e0       	ldi	r19, 0x00	; 0
    15d6:	81 e0       	ldi	r24, 0x01	; 1
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	02 2e       	mov	r0, r18
    15dc:	02 c0       	rjmp	.+4      	; 0x15e2 <DIO_ChannelGroupRead+0xec>
    15de:	88 0f       	add	r24, r24
    15e0:	99 1f       	adc	r25, r25
    15e2:	0a 94       	dec	r0
    15e4:	e2 f7       	brpl	.-8      	; 0x15de <DIO_ChannelGroupRead+0xe8>
    15e6:	80 95       	com	r24
    15e8:	84 23       	and	r24, r20
    15ea:	eb 89       	ldd	r30, Y+19	; 0x13
    15ec:	fc 89       	ldd	r31, Y+20	; 0x14
    15ee:	80 83       	st	Z, r24
{

	uint8_t loop;
	uint8_t to=channel_group_variabe.no_of_channels;

	for(loop=0u; loop <to ; loop++ ){
    15f0:	8e 81       	ldd	r24, Y+6	; 0x06
    15f2:	8f 5f       	subi	r24, 0xFF	; 255
    15f4:	8e 83       	std	Y+6, r24	; 0x06
    15f6:	9e 81       	ldd	r25, Y+6	; 0x06
    15f8:	8d 81       	ldd	r24, Y+5	; 0x05
    15fa:	98 17       	cp	r25, r24
    15fc:	08 f4       	brcc	.+2      	; 0x1600 <DIO_ChannelGroupRead+0x10a>
    15fe:	9e cf       	rjmp	.-196    	; 0x153c <DIO_ChannelGroupRead+0x46>
		}else{
			CLEAR_BIT(* data_ptr,loop);
		}
	}

}
    1600:	64 96       	adiw	r28, 0x14	; 20
    1602:	0f b6       	in	r0, 0x3f	; 63
    1604:	f8 94       	cli
    1606:	de bf       	out	0x3e, r29	; 62
    1608:	0f be       	out	0x3f, r0	; 63
    160a:	cd bf       	out	0x3d, r28	; 61
    160c:	cf 91       	pop	r28
    160e:	df 91       	pop	r29
    1610:	1f 91       	pop	r17
    1612:	0f 91       	pop	r16
    1614:	ff 90       	pop	r15
    1616:	ef 90       	pop	r14
    1618:	df 90       	pop	r13
    161a:	cf 90       	pop	r12
    161c:	08 95       	ret

0000161e <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    161e:	df 93       	push	r29
    1620:	cf 93       	push	r28
    1622:	cd b7       	in	r28, 0x3d	; 61
    1624:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1626:	83 e0       	ldi	r24, 0x03	; 3
    1628:	60 e0       	ldi	r22, 0x00	; 0
    162a:	41 e0       	ldi	r20, 0x01	; 1
    162c:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    1630:	83 e0       	ldi	r24, 0x03	; 3
    1632:	61 e0       	ldi	r22, 0x01	; 1
    1634:	41 e0       	ldi	r20, 0x01	; 1
    1636:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    163a:	83 e0       	ldi	r24, 0x03	; 3
    163c:	62 e0       	ldi	r22, 0x02	; 2
    163e:	41 e0       	ldi	r20, 0x01	; 1
    1640:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <GPIO_setupPinDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1644:	82 e0       	ldi	r24, 0x02	; 2
    1646:	6f ef       	ldi	r22, 0xFF	; 255
    1648:	0e 94 ed 08 	call	0x11da	; 0x11da <GPIO_setupPortDirection>

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    164c:	88 e3       	ldi	r24, 0x38	; 56
    164e:	0e 94 32 0b 	call	0x1664	; 0x1664 <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1652:	8c e0       	ldi	r24, 0x0C	; 12
    1654:	0e 94 32 0b 	call	0x1664	; 0x1664 <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1658:	81 e0       	ldi	r24, 0x01	; 1
    165a:	0e 94 32 0b 	call	0x1664	; 0x1664 <LCD_sendCommand>
}
    165e:	cf 91       	pop	r28
    1660:	df 91       	pop	r29
    1662:	08 95       	ret

00001664 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1664:	df 93       	push	r29
    1666:	cf 93       	push	r28
    1668:	cd b7       	in	r28, 0x3d	; 61
    166a:	de b7       	in	r29, 0x3e	; 62
    166c:	e9 97       	sbiw	r28, 0x39	; 57
    166e:	0f b6       	in	r0, 0x3f	; 63
    1670:	f8 94       	cli
    1672:	de bf       	out	0x3e, r29	; 62
    1674:	0f be       	out	0x3f, r0	; 63
    1676:	cd bf       	out	0x3d, r28	; 61
    1678:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    167a:	83 e0       	ldi	r24, 0x03	; 3
    167c:	60 e0       	ldi	r22, 0x00	; 0
    167e:	40 e0       	ldi	r20, 0x00	; 0
    1680:	0e 94 67 07 	call	0xece	; 0xece <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1684:	83 e0       	ldi	r24, 0x03	; 3
    1686:	61 e0       	ldi	r22, 0x01	; 1
    1688:	40 e0       	ldi	r20, 0x00	; 0
    168a:	0e 94 67 07 	call	0xece	; 0xece <GPIO_writePin>
    168e:	80 e0       	ldi	r24, 0x00	; 0
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	a0 e8       	ldi	r26, 0x80	; 128
    1694:	bf e3       	ldi	r27, 0x3F	; 63
    1696:	8d ab       	std	Y+53, r24	; 0x35
    1698:	9e ab       	std	Y+54, r25	; 0x36
    169a:	af ab       	std	Y+55, r26	; 0x37
    169c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    169e:	6d a9       	ldd	r22, Y+53	; 0x35
    16a0:	7e a9       	ldd	r23, Y+54	; 0x36
    16a2:	8f a9       	ldd	r24, Y+55	; 0x37
    16a4:	98 ad       	ldd	r25, Y+56	; 0x38
    16a6:	20 e0       	ldi	r18, 0x00	; 0
    16a8:	30 e0       	ldi	r19, 0x00	; 0
    16aa:	4a e7       	ldi	r20, 0x7A	; 122
    16ac:	53 e4       	ldi	r21, 0x43	; 67
    16ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16b2:	dc 01       	movw	r26, r24
    16b4:	cb 01       	movw	r24, r22
    16b6:	89 ab       	std	Y+49, r24	; 0x31
    16b8:	9a ab       	std	Y+50, r25	; 0x32
    16ba:	ab ab       	std	Y+51, r26	; 0x33
    16bc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    16be:	69 a9       	ldd	r22, Y+49	; 0x31
    16c0:	7a a9       	ldd	r23, Y+50	; 0x32
    16c2:	8b a9       	ldd	r24, Y+51	; 0x33
    16c4:	9c a9       	ldd	r25, Y+52	; 0x34
    16c6:	20 e0       	ldi	r18, 0x00	; 0
    16c8:	30 e0       	ldi	r19, 0x00	; 0
    16ca:	40 e8       	ldi	r20, 0x80	; 128
    16cc:	5f e3       	ldi	r21, 0x3F	; 63
    16ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16d2:	88 23       	and	r24, r24
    16d4:	2c f4       	brge	.+10     	; 0x16e0 <LCD_sendCommand+0x7c>
		__ticks = 1;
    16d6:	81 e0       	ldi	r24, 0x01	; 1
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	98 ab       	std	Y+48, r25	; 0x30
    16dc:	8f a7       	std	Y+47, r24	; 0x2f
    16de:	3f c0       	rjmp	.+126    	; 0x175e <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    16e0:	69 a9       	ldd	r22, Y+49	; 0x31
    16e2:	7a a9       	ldd	r23, Y+50	; 0x32
    16e4:	8b a9       	ldd	r24, Y+51	; 0x33
    16e6:	9c a9       	ldd	r25, Y+52	; 0x34
    16e8:	20 e0       	ldi	r18, 0x00	; 0
    16ea:	3f ef       	ldi	r19, 0xFF	; 255
    16ec:	4f e7       	ldi	r20, 0x7F	; 127
    16ee:	57 e4       	ldi	r21, 0x47	; 71
    16f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16f4:	18 16       	cp	r1, r24
    16f6:	4c f5       	brge	.+82     	; 0x174a <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16f8:	6d a9       	ldd	r22, Y+53	; 0x35
    16fa:	7e a9       	ldd	r23, Y+54	; 0x36
    16fc:	8f a9       	ldd	r24, Y+55	; 0x37
    16fe:	98 ad       	ldd	r25, Y+56	; 0x38
    1700:	20 e0       	ldi	r18, 0x00	; 0
    1702:	30 e0       	ldi	r19, 0x00	; 0
    1704:	40 e2       	ldi	r20, 0x20	; 32
    1706:	51 e4       	ldi	r21, 0x41	; 65
    1708:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    170c:	dc 01       	movw	r26, r24
    170e:	cb 01       	movw	r24, r22
    1710:	bc 01       	movw	r22, r24
    1712:	cd 01       	movw	r24, r26
    1714:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1718:	dc 01       	movw	r26, r24
    171a:	cb 01       	movw	r24, r22
    171c:	98 ab       	std	Y+48, r25	; 0x30
    171e:	8f a7       	std	Y+47, r24	; 0x2f
    1720:	0f c0       	rjmp	.+30     	; 0x1740 <LCD_sendCommand+0xdc>
    1722:	89 e1       	ldi	r24, 0x19	; 25
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	9e a7       	std	Y+46, r25	; 0x2e
    1728:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    172a:	8d a5       	ldd	r24, Y+45	; 0x2d
    172c:	9e a5       	ldd	r25, Y+46	; 0x2e
    172e:	01 97       	sbiw	r24, 0x01	; 1
    1730:	f1 f7       	brne	.-4      	; 0x172e <LCD_sendCommand+0xca>
    1732:	9e a7       	std	Y+46, r25	; 0x2e
    1734:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1736:	8f a5       	ldd	r24, Y+47	; 0x2f
    1738:	98 a9       	ldd	r25, Y+48	; 0x30
    173a:	01 97       	sbiw	r24, 0x01	; 1
    173c:	98 ab       	std	Y+48, r25	; 0x30
    173e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1740:	8f a5       	ldd	r24, Y+47	; 0x2f
    1742:	98 a9       	ldd	r25, Y+48	; 0x30
    1744:	00 97       	sbiw	r24, 0x00	; 0
    1746:	69 f7       	brne	.-38     	; 0x1722 <LCD_sendCommand+0xbe>
    1748:	14 c0       	rjmp	.+40     	; 0x1772 <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    174a:	69 a9       	ldd	r22, Y+49	; 0x31
    174c:	7a a9       	ldd	r23, Y+50	; 0x32
    174e:	8b a9       	ldd	r24, Y+51	; 0x33
    1750:	9c a9       	ldd	r25, Y+52	; 0x34
    1752:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1756:	dc 01       	movw	r26, r24
    1758:	cb 01       	movw	r24, r22
    175a:	98 ab       	std	Y+48, r25	; 0x30
    175c:	8f a7       	std	Y+47, r24	; 0x2f
    175e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1760:	98 a9       	ldd	r25, Y+48	; 0x30
    1762:	9c a7       	std	Y+44, r25	; 0x2c
    1764:	8b a7       	std	Y+43, r24	; 0x2b
    1766:	8b a5       	ldd	r24, Y+43	; 0x2b
    1768:	9c a5       	ldd	r25, Y+44	; 0x2c
    176a:	01 97       	sbiw	r24, 0x01	; 1
    176c:	f1 f7       	brne	.-4      	; 0x176a <LCD_sendCommand+0x106>
    176e:	9c a7       	std	Y+44, r25	; 0x2c
    1770:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1772:	83 e0       	ldi	r24, 0x03	; 3
    1774:	62 e0       	ldi	r22, 0x02	; 2
    1776:	41 e0       	ldi	r20, 0x01	; 1
    1778:	0e 94 67 07 	call	0xece	; 0xece <GPIO_writePin>
    177c:	80 e0       	ldi	r24, 0x00	; 0
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	a0 e8       	ldi	r26, 0x80	; 128
    1782:	bf e3       	ldi	r27, 0x3F	; 63
    1784:	8f a3       	std	Y+39, r24	; 0x27
    1786:	98 a7       	std	Y+40, r25	; 0x28
    1788:	a9 a7       	std	Y+41, r26	; 0x29
    178a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    178c:	6f a1       	ldd	r22, Y+39	; 0x27
    178e:	78 a5       	ldd	r23, Y+40	; 0x28
    1790:	89 a5       	ldd	r24, Y+41	; 0x29
    1792:	9a a5       	ldd	r25, Y+42	; 0x2a
    1794:	20 e0       	ldi	r18, 0x00	; 0
    1796:	30 e0       	ldi	r19, 0x00	; 0
    1798:	4a e7       	ldi	r20, 0x7A	; 122
    179a:	53 e4       	ldi	r21, 0x43	; 67
    179c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17a0:	dc 01       	movw	r26, r24
    17a2:	cb 01       	movw	r24, r22
    17a4:	8b a3       	std	Y+35, r24	; 0x23
    17a6:	9c a3       	std	Y+36, r25	; 0x24
    17a8:	ad a3       	std	Y+37, r26	; 0x25
    17aa:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    17ac:	6b a1       	ldd	r22, Y+35	; 0x23
    17ae:	7c a1       	ldd	r23, Y+36	; 0x24
    17b0:	8d a1       	ldd	r24, Y+37	; 0x25
    17b2:	9e a1       	ldd	r25, Y+38	; 0x26
    17b4:	20 e0       	ldi	r18, 0x00	; 0
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	40 e8       	ldi	r20, 0x80	; 128
    17ba:	5f e3       	ldi	r21, 0x3F	; 63
    17bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17c0:	88 23       	and	r24, r24
    17c2:	2c f4       	brge	.+10     	; 0x17ce <LCD_sendCommand+0x16a>
		__ticks = 1;
    17c4:	81 e0       	ldi	r24, 0x01	; 1
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	9a a3       	std	Y+34, r25	; 0x22
    17ca:	89 a3       	std	Y+33, r24	; 0x21
    17cc:	3f c0       	rjmp	.+126    	; 0x184c <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    17ce:	6b a1       	ldd	r22, Y+35	; 0x23
    17d0:	7c a1       	ldd	r23, Y+36	; 0x24
    17d2:	8d a1       	ldd	r24, Y+37	; 0x25
    17d4:	9e a1       	ldd	r25, Y+38	; 0x26
    17d6:	20 e0       	ldi	r18, 0x00	; 0
    17d8:	3f ef       	ldi	r19, 0xFF	; 255
    17da:	4f e7       	ldi	r20, 0x7F	; 127
    17dc:	57 e4       	ldi	r21, 0x47	; 71
    17de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17e2:	18 16       	cp	r1, r24
    17e4:	4c f5       	brge	.+82     	; 0x1838 <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17e6:	6f a1       	ldd	r22, Y+39	; 0x27
    17e8:	78 a5       	ldd	r23, Y+40	; 0x28
    17ea:	89 a5       	ldd	r24, Y+41	; 0x29
    17ec:	9a a5       	ldd	r25, Y+42	; 0x2a
    17ee:	20 e0       	ldi	r18, 0x00	; 0
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	40 e2       	ldi	r20, 0x20	; 32
    17f4:	51 e4       	ldi	r21, 0x41	; 65
    17f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17fa:	dc 01       	movw	r26, r24
    17fc:	cb 01       	movw	r24, r22
    17fe:	bc 01       	movw	r22, r24
    1800:	cd 01       	movw	r24, r26
    1802:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1806:	dc 01       	movw	r26, r24
    1808:	cb 01       	movw	r24, r22
    180a:	9a a3       	std	Y+34, r25	; 0x22
    180c:	89 a3       	std	Y+33, r24	; 0x21
    180e:	0f c0       	rjmp	.+30     	; 0x182e <LCD_sendCommand+0x1ca>
    1810:	89 e1       	ldi	r24, 0x19	; 25
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	98 a3       	std	Y+32, r25	; 0x20
    1816:	8f 8f       	std	Y+31, r24	; 0x1f
    1818:	8f 8d       	ldd	r24, Y+31	; 0x1f
    181a:	98 a1       	ldd	r25, Y+32	; 0x20
    181c:	01 97       	sbiw	r24, 0x01	; 1
    181e:	f1 f7       	brne	.-4      	; 0x181c <LCD_sendCommand+0x1b8>
    1820:	98 a3       	std	Y+32, r25	; 0x20
    1822:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1824:	89 a1       	ldd	r24, Y+33	; 0x21
    1826:	9a a1       	ldd	r25, Y+34	; 0x22
    1828:	01 97       	sbiw	r24, 0x01	; 1
    182a:	9a a3       	std	Y+34, r25	; 0x22
    182c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    182e:	89 a1       	ldd	r24, Y+33	; 0x21
    1830:	9a a1       	ldd	r25, Y+34	; 0x22
    1832:	00 97       	sbiw	r24, 0x00	; 0
    1834:	69 f7       	brne	.-38     	; 0x1810 <LCD_sendCommand+0x1ac>
    1836:	14 c0       	rjmp	.+40     	; 0x1860 <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1838:	6b a1       	ldd	r22, Y+35	; 0x23
    183a:	7c a1       	ldd	r23, Y+36	; 0x24
    183c:	8d a1       	ldd	r24, Y+37	; 0x25
    183e:	9e a1       	ldd	r25, Y+38	; 0x26
    1840:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1844:	dc 01       	movw	r26, r24
    1846:	cb 01       	movw	r24, r22
    1848:	9a a3       	std	Y+34, r25	; 0x22
    184a:	89 a3       	std	Y+33, r24	; 0x21
    184c:	89 a1       	ldd	r24, Y+33	; 0x21
    184e:	9a a1       	ldd	r25, Y+34	; 0x22
    1850:	9e 8f       	std	Y+30, r25	; 0x1e
    1852:	8d 8f       	std	Y+29, r24	; 0x1d
    1854:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1856:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1858:	01 97       	sbiw	r24, 0x01	; 1
    185a:	f1 f7       	brne	.-4      	; 0x1858 <LCD_sendCommand+0x1f4>
    185c:	9e 8f       	std	Y+30, r25	; 0x1e
    185e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1860:	82 e0       	ldi	r24, 0x02	; 2
    1862:	69 ad       	ldd	r22, Y+57	; 0x39
    1864:	0e 94 31 09 	call	0x1262	; 0x1262 <GPIO_writePort>
    1868:	80 e0       	ldi	r24, 0x00	; 0
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	a0 e8       	ldi	r26, 0x80	; 128
    186e:	bf e3       	ldi	r27, 0x3F	; 63
    1870:	89 8f       	std	Y+25, r24	; 0x19
    1872:	9a 8f       	std	Y+26, r25	; 0x1a
    1874:	ab 8f       	std	Y+27, r26	; 0x1b
    1876:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1878:	69 8d       	ldd	r22, Y+25	; 0x19
    187a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    187c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    187e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1880:	20 e0       	ldi	r18, 0x00	; 0
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	4a e7       	ldi	r20, 0x7A	; 122
    1886:	53 e4       	ldi	r21, 0x43	; 67
    1888:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    188c:	dc 01       	movw	r26, r24
    188e:	cb 01       	movw	r24, r22
    1890:	8d 8b       	std	Y+21, r24	; 0x15
    1892:	9e 8b       	std	Y+22, r25	; 0x16
    1894:	af 8b       	std	Y+23, r26	; 0x17
    1896:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1898:	6d 89       	ldd	r22, Y+21	; 0x15
    189a:	7e 89       	ldd	r23, Y+22	; 0x16
    189c:	8f 89       	ldd	r24, Y+23	; 0x17
    189e:	98 8d       	ldd	r25, Y+24	; 0x18
    18a0:	20 e0       	ldi	r18, 0x00	; 0
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	40 e8       	ldi	r20, 0x80	; 128
    18a6:	5f e3       	ldi	r21, 0x3F	; 63
    18a8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18ac:	88 23       	and	r24, r24
    18ae:	2c f4       	brge	.+10     	; 0x18ba <LCD_sendCommand+0x256>
		__ticks = 1;
    18b0:	81 e0       	ldi	r24, 0x01	; 1
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	9c 8b       	std	Y+20, r25	; 0x14
    18b6:	8b 8b       	std	Y+19, r24	; 0x13
    18b8:	3f c0       	rjmp	.+126    	; 0x1938 <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    18ba:	6d 89       	ldd	r22, Y+21	; 0x15
    18bc:	7e 89       	ldd	r23, Y+22	; 0x16
    18be:	8f 89       	ldd	r24, Y+23	; 0x17
    18c0:	98 8d       	ldd	r25, Y+24	; 0x18
    18c2:	20 e0       	ldi	r18, 0x00	; 0
    18c4:	3f ef       	ldi	r19, 0xFF	; 255
    18c6:	4f e7       	ldi	r20, 0x7F	; 127
    18c8:	57 e4       	ldi	r21, 0x47	; 71
    18ca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18ce:	18 16       	cp	r1, r24
    18d0:	4c f5       	brge	.+82     	; 0x1924 <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18d2:	69 8d       	ldd	r22, Y+25	; 0x19
    18d4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18d6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18d8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18da:	20 e0       	ldi	r18, 0x00	; 0
    18dc:	30 e0       	ldi	r19, 0x00	; 0
    18de:	40 e2       	ldi	r20, 0x20	; 32
    18e0:	51 e4       	ldi	r21, 0x41	; 65
    18e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18e6:	dc 01       	movw	r26, r24
    18e8:	cb 01       	movw	r24, r22
    18ea:	bc 01       	movw	r22, r24
    18ec:	cd 01       	movw	r24, r26
    18ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18f2:	dc 01       	movw	r26, r24
    18f4:	cb 01       	movw	r24, r22
    18f6:	9c 8b       	std	Y+20, r25	; 0x14
    18f8:	8b 8b       	std	Y+19, r24	; 0x13
    18fa:	0f c0       	rjmp	.+30     	; 0x191a <LCD_sendCommand+0x2b6>
    18fc:	89 e1       	ldi	r24, 0x19	; 25
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	9a 8b       	std	Y+18, r25	; 0x12
    1902:	89 8b       	std	Y+17, r24	; 0x11
    1904:	89 89       	ldd	r24, Y+17	; 0x11
    1906:	9a 89       	ldd	r25, Y+18	; 0x12
    1908:	01 97       	sbiw	r24, 0x01	; 1
    190a:	f1 f7       	brne	.-4      	; 0x1908 <LCD_sendCommand+0x2a4>
    190c:	9a 8b       	std	Y+18, r25	; 0x12
    190e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1910:	8b 89       	ldd	r24, Y+19	; 0x13
    1912:	9c 89       	ldd	r25, Y+20	; 0x14
    1914:	01 97       	sbiw	r24, 0x01	; 1
    1916:	9c 8b       	std	Y+20, r25	; 0x14
    1918:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    191a:	8b 89       	ldd	r24, Y+19	; 0x13
    191c:	9c 89       	ldd	r25, Y+20	; 0x14
    191e:	00 97       	sbiw	r24, 0x00	; 0
    1920:	69 f7       	brne	.-38     	; 0x18fc <LCD_sendCommand+0x298>
    1922:	14 c0       	rjmp	.+40     	; 0x194c <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1924:	6d 89       	ldd	r22, Y+21	; 0x15
    1926:	7e 89       	ldd	r23, Y+22	; 0x16
    1928:	8f 89       	ldd	r24, Y+23	; 0x17
    192a:	98 8d       	ldd	r25, Y+24	; 0x18
    192c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1930:	dc 01       	movw	r26, r24
    1932:	cb 01       	movw	r24, r22
    1934:	9c 8b       	std	Y+20, r25	; 0x14
    1936:	8b 8b       	std	Y+19, r24	; 0x13
    1938:	8b 89       	ldd	r24, Y+19	; 0x13
    193a:	9c 89       	ldd	r25, Y+20	; 0x14
    193c:	98 8b       	std	Y+16, r25	; 0x10
    193e:	8f 87       	std	Y+15, r24	; 0x0f
    1940:	8f 85       	ldd	r24, Y+15	; 0x0f
    1942:	98 89       	ldd	r25, Y+16	; 0x10
    1944:	01 97       	sbiw	r24, 0x01	; 1
    1946:	f1 f7       	brne	.-4      	; 0x1944 <LCD_sendCommand+0x2e0>
    1948:	98 8b       	std	Y+16, r25	; 0x10
    194a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    194c:	83 e0       	ldi	r24, 0x03	; 3
    194e:	62 e0       	ldi	r22, 0x02	; 2
    1950:	40 e0       	ldi	r20, 0x00	; 0
    1952:	0e 94 67 07 	call	0xece	; 0xece <GPIO_writePin>
    1956:	80 e0       	ldi	r24, 0x00	; 0
    1958:	90 e0       	ldi	r25, 0x00	; 0
    195a:	a0 e8       	ldi	r26, 0x80	; 128
    195c:	bf e3       	ldi	r27, 0x3F	; 63
    195e:	8b 87       	std	Y+11, r24	; 0x0b
    1960:	9c 87       	std	Y+12, r25	; 0x0c
    1962:	ad 87       	std	Y+13, r26	; 0x0d
    1964:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1966:	6b 85       	ldd	r22, Y+11	; 0x0b
    1968:	7c 85       	ldd	r23, Y+12	; 0x0c
    196a:	8d 85       	ldd	r24, Y+13	; 0x0d
    196c:	9e 85       	ldd	r25, Y+14	; 0x0e
    196e:	20 e0       	ldi	r18, 0x00	; 0
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	4a e7       	ldi	r20, 0x7A	; 122
    1974:	53 e4       	ldi	r21, 0x43	; 67
    1976:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    197a:	dc 01       	movw	r26, r24
    197c:	cb 01       	movw	r24, r22
    197e:	8f 83       	std	Y+7, r24	; 0x07
    1980:	98 87       	std	Y+8, r25	; 0x08
    1982:	a9 87       	std	Y+9, r26	; 0x09
    1984:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1986:	6f 81       	ldd	r22, Y+7	; 0x07
    1988:	78 85       	ldd	r23, Y+8	; 0x08
    198a:	89 85       	ldd	r24, Y+9	; 0x09
    198c:	9a 85       	ldd	r25, Y+10	; 0x0a
    198e:	20 e0       	ldi	r18, 0x00	; 0
    1990:	30 e0       	ldi	r19, 0x00	; 0
    1992:	40 e8       	ldi	r20, 0x80	; 128
    1994:	5f e3       	ldi	r21, 0x3F	; 63
    1996:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    199a:	88 23       	and	r24, r24
    199c:	2c f4       	brge	.+10     	; 0x19a8 <LCD_sendCommand+0x344>
		__ticks = 1;
    199e:	81 e0       	ldi	r24, 0x01	; 1
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	9e 83       	std	Y+6, r25	; 0x06
    19a4:	8d 83       	std	Y+5, r24	; 0x05
    19a6:	3f c0       	rjmp	.+126    	; 0x1a26 <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    19a8:	6f 81       	ldd	r22, Y+7	; 0x07
    19aa:	78 85       	ldd	r23, Y+8	; 0x08
    19ac:	89 85       	ldd	r24, Y+9	; 0x09
    19ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    19b0:	20 e0       	ldi	r18, 0x00	; 0
    19b2:	3f ef       	ldi	r19, 0xFF	; 255
    19b4:	4f e7       	ldi	r20, 0x7F	; 127
    19b6:	57 e4       	ldi	r21, 0x47	; 71
    19b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19bc:	18 16       	cp	r1, r24
    19be:	4c f5       	brge	.+82     	; 0x1a12 <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    19c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    19c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    19c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    19c8:	20 e0       	ldi	r18, 0x00	; 0
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	40 e2       	ldi	r20, 0x20	; 32
    19ce:	51 e4       	ldi	r21, 0x41	; 65
    19d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19d4:	dc 01       	movw	r26, r24
    19d6:	cb 01       	movw	r24, r22
    19d8:	bc 01       	movw	r22, r24
    19da:	cd 01       	movw	r24, r26
    19dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19e0:	dc 01       	movw	r26, r24
    19e2:	cb 01       	movw	r24, r22
    19e4:	9e 83       	std	Y+6, r25	; 0x06
    19e6:	8d 83       	std	Y+5, r24	; 0x05
    19e8:	0f c0       	rjmp	.+30     	; 0x1a08 <LCD_sendCommand+0x3a4>
    19ea:	89 e1       	ldi	r24, 0x19	; 25
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	9c 83       	std	Y+4, r25	; 0x04
    19f0:	8b 83       	std	Y+3, r24	; 0x03
    19f2:	8b 81       	ldd	r24, Y+3	; 0x03
    19f4:	9c 81       	ldd	r25, Y+4	; 0x04
    19f6:	01 97       	sbiw	r24, 0x01	; 1
    19f8:	f1 f7       	brne	.-4      	; 0x19f6 <LCD_sendCommand+0x392>
    19fa:	9c 83       	std	Y+4, r25	; 0x04
    19fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1a00:	9e 81       	ldd	r25, Y+6	; 0x06
    1a02:	01 97       	sbiw	r24, 0x01	; 1
    1a04:	9e 83       	std	Y+6, r25	; 0x06
    1a06:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a08:	8d 81       	ldd	r24, Y+5	; 0x05
    1a0a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a0c:	00 97       	sbiw	r24, 0x00	; 0
    1a0e:	69 f7       	brne	.-38     	; 0x19ea <LCD_sendCommand+0x386>
    1a10:	14 c0       	rjmp	.+40     	; 0x1a3a <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a12:	6f 81       	ldd	r22, Y+7	; 0x07
    1a14:	78 85       	ldd	r23, Y+8	; 0x08
    1a16:	89 85       	ldd	r24, Y+9	; 0x09
    1a18:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a1e:	dc 01       	movw	r26, r24
    1a20:	cb 01       	movw	r24, r22
    1a22:	9e 83       	std	Y+6, r25	; 0x06
    1a24:	8d 83       	std	Y+5, r24	; 0x05
    1a26:	8d 81       	ldd	r24, Y+5	; 0x05
    1a28:	9e 81       	ldd	r25, Y+6	; 0x06
    1a2a:	9a 83       	std	Y+2, r25	; 0x02
    1a2c:	89 83       	std	Y+1, r24	; 0x01
    1a2e:	89 81       	ldd	r24, Y+1	; 0x01
    1a30:	9a 81       	ldd	r25, Y+2	; 0x02
    1a32:	01 97       	sbiw	r24, 0x01	; 1
    1a34:	f1 f7       	brne	.-4      	; 0x1a32 <LCD_sendCommand+0x3ce>
    1a36:	9a 83       	std	Y+2, r25	; 0x02
    1a38:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    1a3a:	e9 96       	adiw	r28, 0x39	; 57
    1a3c:	0f b6       	in	r0, 0x3f	; 63
    1a3e:	f8 94       	cli
    1a40:	de bf       	out	0x3e, r29	; 62
    1a42:	0f be       	out	0x3f, r0	; 63
    1a44:	cd bf       	out	0x3d, r28	; 61
    1a46:	cf 91       	pop	r28
    1a48:	df 91       	pop	r29
    1a4a:	08 95       	ret

00001a4c <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1a4c:	df 93       	push	r29
    1a4e:	cf 93       	push	r28
    1a50:	cd b7       	in	r28, 0x3d	; 61
    1a52:	de b7       	in	r29, 0x3e	; 62
    1a54:	e9 97       	sbiw	r28, 0x39	; 57
    1a56:	0f b6       	in	r0, 0x3f	; 63
    1a58:	f8 94       	cli
    1a5a:	de bf       	out	0x3e, r29	; 62
    1a5c:	0f be       	out	0x3f, r0	; 63
    1a5e:	cd bf       	out	0x3d, r28	; 61
    1a60:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1a62:	83 e0       	ldi	r24, 0x03	; 3
    1a64:	60 e0       	ldi	r22, 0x00	; 0
    1a66:	41 e0       	ldi	r20, 0x01	; 1
    1a68:	0e 94 67 07 	call	0xece	; 0xece <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1a6c:	83 e0       	ldi	r24, 0x03	; 3
    1a6e:	61 e0       	ldi	r22, 0x01	; 1
    1a70:	40 e0       	ldi	r20, 0x00	; 0
    1a72:	0e 94 67 07 	call	0xece	; 0xece <GPIO_writePin>
    1a76:	80 e0       	ldi	r24, 0x00	; 0
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	a0 e8       	ldi	r26, 0x80	; 128
    1a7c:	bf e3       	ldi	r27, 0x3F	; 63
    1a7e:	8d ab       	std	Y+53, r24	; 0x35
    1a80:	9e ab       	std	Y+54, r25	; 0x36
    1a82:	af ab       	std	Y+55, r26	; 0x37
    1a84:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a86:	6d a9       	ldd	r22, Y+53	; 0x35
    1a88:	7e a9       	ldd	r23, Y+54	; 0x36
    1a8a:	8f a9       	ldd	r24, Y+55	; 0x37
    1a8c:	98 ad       	ldd	r25, Y+56	; 0x38
    1a8e:	20 e0       	ldi	r18, 0x00	; 0
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	4a e7       	ldi	r20, 0x7A	; 122
    1a94:	53 e4       	ldi	r21, 0x43	; 67
    1a96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a9a:	dc 01       	movw	r26, r24
    1a9c:	cb 01       	movw	r24, r22
    1a9e:	89 ab       	std	Y+49, r24	; 0x31
    1aa0:	9a ab       	std	Y+50, r25	; 0x32
    1aa2:	ab ab       	std	Y+51, r26	; 0x33
    1aa4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1aa6:	69 a9       	ldd	r22, Y+49	; 0x31
    1aa8:	7a a9       	ldd	r23, Y+50	; 0x32
    1aaa:	8b a9       	ldd	r24, Y+51	; 0x33
    1aac:	9c a9       	ldd	r25, Y+52	; 0x34
    1aae:	20 e0       	ldi	r18, 0x00	; 0
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	40 e8       	ldi	r20, 0x80	; 128
    1ab4:	5f e3       	ldi	r21, 0x3F	; 63
    1ab6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1aba:	88 23       	and	r24, r24
    1abc:	2c f4       	brge	.+10     	; 0x1ac8 <LCD_displayCharacter+0x7c>
		__ticks = 1;
    1abe:	81 e0       	ldi	r24, 0x01	; 1
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	98 ab       	std	Y+48, r25	; 0x30
    1ac4:	8f a7       	std	Y+47, r24	; 0x2f
    1ac6:	3f c0       	rjmp	.+126    	; 0x1b46 <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    1ac8:	69 a9       	ldd	r22, Y+49	; 0x31
    1aca:	7a a9       	ldd	r23, Y+50	; 0x32
    1acc:	8b a9       	ldd	r24, Y+51	; 0x33
    1ace:	9c a9       	ldd	r25, Y+52	; 0x34
    1ad0:	20 e0       	ldi	r18, 0x00	; 0
    1ad2:	3f ef       	ldi	r19, 0xFF	; 255
    1ad4:	4f e7       	ldi	r20, 0x7F	; 127
    1ad6:	57 e4       	ldi	r21, 0x47	; 71
    1ad8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1adc:	18 16       	cp	r1, r24
    1ade:	4c f5       	brge	.+82     	; 0x1b32 <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ae0:	6d a9       	ldd	r22, Y+53	; 0x35
    1ae2:	7e a9       	ldd	r23, Y+54	; 0x36
    1ae4:	8f a9       	ldd	r24, Y+55	; 0x37
    1ae6:	98 ad       	ldd	r25, Y+56	; 0x38
    1ae8:	20 e0       	ldi	r18, 0x00	; 0
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	40 e2       	ldi	r20, 0x20	; 32
    1aee:	51 e4       	ldi	r21, 0x41	; 65
    1af0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1af4:	dc 01       	movw	r26, r24
    1af6:	cb 01       	movw	r24, r22
    1af8:	bc 01       	movw	r22, r24
    1afa:	cd 01       	movw	r24, r26
    1afc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b00:	dc 01       	movw	r26, r24
    1b02:	cb 01       	movw	r24, r22
    1b04:	98 ab       	std	Y+48, r25	; 0x30
    1b06:	8f a7       	std	Y+47, r24	; 0x2f
    1b08:	0f c0       	rjmp	.+30     	; 0x1b28 <LCD_displayCharacter+0xdc>
    1b0a:	89 e1       	ldi	r24, 0x19	; 25
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	9e a7       	std	Y+46, r25	; 0x2e
    1b10:	8d a7       	std	Y+45, r24	; 0x2d
    1b12:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b14:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b16:	01 97       	sbiw	r24, 0x01	; 1
    1b18:	f1 f7       	brne	.-4      	; 0x1b16 <LCD_displayCharacter+0xca>
    1b1a:	9e a7       	std	Y+46, r25	; 0x2e
    1b1c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b1e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b20:	98 a9       	ldd	r25, Y+48	; 0x30
    1b22:	01 97       	sbiw	r24, 0x01	; 1
    1b24:	98 ab       	std	Y+48, r25	; 0x30
    1b26:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b28:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b2a:	98 a9       	ldd	r25, Y+48	; 0x30
    1b2c:	00 97       	sbiw	r24, 0x00	; 0
    1b2e:	69 f7       	brne	.-38     	; 0x1b0a <LCD_displayCharacter+0xbe>
    1b30:	14 c0       	rjmp	.+40     	; 0x1b5a <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b32:	69 a9       	ldd	r22, Y+49	; 0x31
    1b34:	7a a9       	ldd	r23, Y+50	; 0x32
    1b36:	8b a9       	ldd	r24, Y+51	; 0x33
    1b38:	9c a9       	ldd	r25, Y+52	; 0x34
    1b3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b3e:	dc 01       	movw	r26, r24
    1b40:	cb 01       	movw	r24, r22
    1b42:	98 ab       	std	Y+48, r25	; 0x30
    1b44:	8f a7       	std	Y+47, r24	; 0x2f
    1b46:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b48:	98 a9       	ldd	r25, Y+48	; 0x30
    1b4a:	9c a7       	std	Y+44, r25	; 0x2c
    1b4c:	8b a7       	std	Y+43, r24	; 0x2b
    1b4e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1b50:	9c a5       	ldd	r25, Y+44	; 0x2c
    1b52:	01 97       	sbiw	r24, 0x01	; 1
    1b54:	f1 f7       	brne	.-4      	; 0x1b52 <LCD_displayCharacter+0x106>
    1b56:	9c a7       	std	Y+44, r25	; 0x2c
    1b58:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1b5a:	83 e0       	ldi	r24, 0x03	; 3
    1b5c:	62 e0       	ldi	r22, 0x02	; 2
    1b5e:	41 e0       	ldi	r20, 0x01	; 1
    1b60:	0e 94 67 07 	call	0xece	; 0xece <GPIO_writePin>
    1b64:	80 e0       	ldi	r24, 0x00	; 0
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	a0 e8       	ldi	r26, 0x80	; 128
    1b6a:	bf e3       	ldi	r27, 0x3F	; 63
    1b6c:	8f a3       	std	Y+39, r24	; 0x27
    1b6e:	98 a7       	std	Y+40, r25	; 0x28
    1b70:	a9 a7       	std	Y+41, r26	; 0x29
    1b72:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b74:	6f a1       	ldd	r22, Y+39	; 0x27
    1b76:	78 a5       	ldd	r23, Y+40	; 0x28
    1b78:	89 a5       	ldd	r24, Y+41	; 0x29
    1b7a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b7c:	20 e0       	ldi	r18, 0x00	; 0
    1b7e:	30 e0       	ldi	r19, 0x00	; 0
    1b80:	4a e7       	ldi	r20, 0x7A	; 122
    1b82:	53 e4       	ldi	r21, 0x43	; 67
    1b84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b88:	dc 01       	movw	r26, r24
    1b8a:	cb 01       	movw	r24, r22
    1b8c:	8b a3       	std	Y+35, r24	; 0x23
    1b8e:	9c a3       	std	Y+36, r25	; 0x24
    1b90:	ad a3       	std	Y+37, r26	; 0x25
    1b92:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1b94:	6b a1       	ldd	r22, Y+35	; 0x23
    1b96:	7c a1       	ldd	r23, Y+36	; 0x24
    1b98:	8d a1       	ldd	r24, Y+37	; 0x25
    1b9a:	9e a1       	ldd	r25, Y+38	; 0x26
    1b9c:	20 e0       	ldi	r18, 0x00	; 0
    1b9e:	30 e0       	ldi	r19, 0x00	; 0
    1ba0:	40 e8       	ldi	r20, 0x80	; 128
    1ba2:	5f e3       	ldi	r21, 0x3F	; 63
    1ba4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ba8:	88 23       	and	r24, r24
    1baa:	2c f4       	brge	.+10     	; 0x1bb6 <LCD_displayCharacter+0x16a>
		__ticks = 1;
    1bac:	81 e0       	ldi	r24, 0x01	; 1
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	9a a3       	std	Y+34, r25	; 0x22
    1bb2:	89 a3       	std	Y+33, r24	; 0x21
    1bb4:	3f c0       	rjmp	.+126    	; 0x1c34 <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    1bb6:	6b a1       	ldd	r22, Y+35	; 0x23
    1bb8:	7c a1       	ldd	r23, Y+36	; 0x24
    1bba:	8d a1       	ldd	r24, Y+37	; 0x25
    1bbc:	9e a1       	ldd	r25, Y+38	; 0x26
    1bbe:	20 e0       	ldi	r18, 0x00	; 0
    1bc0:	3f ef       	ldi	r19, 0xFF	; 255
    1bc2:	4f e7       	ldi	r20, 0x7F	; 127
    1bc4:	57 e4       	ldi	r21, 0x47	; 71
    1bc6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bca:	18 16       	cp	r1, r24
    1bcc:	4c f5       	brge	.+82     	; 0x1c20 <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bce:	6f a1       	ldd	r22, Y+39	; 0x27
    1bd0:	78 a5       	ldd	r23, Y+40	; 0x28
    1bd2:	89 a5       	ldd	r24, Y+41	; 0x29
    1bd4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bd6:	20 e0       	ldi	r18, 0x00	; 0
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	40 e2       	ldi	r20, 0x20	; 32
    1bdc:	51 e4       	ldi	r21, 0x41	; 65
    1bde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1be2:	dc 01       	movw	r26, r24
    1be4:	cb 01       	movw	r24, r22
    1be6:	bc 01       	movw	r22, r24
    1be8:	cd 01       	movw	r24, r26
    1bea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bee:	dc 01       	movw	r26, r24
    1bf0:	cb 01       	movw	r24, r22
    1bf2:	9a a3       	std	Y+34, r25	; 0x22
    1bf4:	89 a3       	std	Y+33, r24	; 0x21
    1bf6:	0f c0       	rjmp	.+30     	; 0x1c16 <LCD_displayCharacter+0x1ca>
    1bf8:	89 e1       	ldi	r24, 0x19	; 25
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	98 a3       	std	Y+32, r25	; 0x20
    1bfe:	8f 8f       	std	Y+31, r24	; 0x1f
    1c00:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c02:	98 a1       	ldd	r25, Y+32	; 0x20
    1c04:	01 97       	sbiw	r24, 0x01	; 1
    1c06:	f1 f7       	brne	.-4      	; 0x1c04 <LCD_displayCharacter+0x1b8>
    1c08:	98 a3       	std	Y+32, r25	; 0x20
    1c0a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c0c:	89 a1       	ldd	r24, Y+33	; 0x21
    1c0e:	9a a1       	ldd	r25, Y+34	; 0x22
    1c10:	01 97       	sbiw	r24, 0x01	; 1
    1c12:	9a a3       	std	Y+34, r25	; 0x22
    1c14:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c16:	89 a1       	ldd	r24, Y+33	; 0x21
    1c18:	9a a1       	ldd	r25, Y+34	; 0x22
    1c1a:	00 97       	sbiw	r24, 0x00	; 0
    1c1c:	69 f7       	brne	.-38     	; 0x1bf8 <LCD_displayCharacter+0x1ac>
    1c1e:	14 c0       	rjmp	.+40     	; 0x1c48 <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c20:	6b a1       	ldd	r22, Y+35	; 0x23
    1c22:	7c a1       	ldd	r23, Y+36	; 0x24
    1c24:	8d a1       	ldd	r24, Y+37	; 0x25
    1c26:	9e a1       	ldd	r25, Y+38	; 0x26
    1c28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c2c:	dc 01       	movw	r26, r24
    1c2e:	cb 01       	movw	r24, r22
    1c30:	9a a3       	std	Y+34, r25	; 0x22
    1c32:	89 a3       	std	Y+33, r24	; 0x21
    1c34:	89 a1       	ldd	r24, Y+33	; 0x21
    1c36:	9a a1       	ldd	r25, Y+34	; 0x22
    1c38:	9e 8f       	std	Y+30, r25	; 0x1e
    1c3a:	8d 8f       	std	Y+29, r24	; 0x1d
    1c3c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c3e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c40:	01 97       	sbiw	r24, 0x01	; 1
    1c42:	f1 f7       	brne	.-4      	; 0x1c40 <LCD_displayCharacter+0x1f4>
    1c44:	9e 8f       	std	Y+30, r25	; 0x1e
    1c46:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    1c48:	82 e0       	ldi	r24, 0x02	; 2
    1c4a:	69 ad       	ldd	r22, Y+57	; 0x39
    1c4c:	0e 94 31 09 	call	0x1262	; 0x1262 <GPIO_writePort>
    1c50:	80 e0       	ldi	r24, 0x00	; 0
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	a0 e8       	ldi	r26, 0x80	; 128
    1c56:	bf e3       	ldi	r27, 0x3F	; 63
    1c58:	89 8f       	std	Y+25, r24	; 0x19
    1c5a:	9a 8f       	std	Y+26, r25	; 0x1a
    1c5c:	ab 8f       	std	Y+27, r26	; 0x1b
    1c5e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c60:	69 8d       	ldd	r22, Y+25	; 0x19
    1c62:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c64:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c66:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c68:	20 e0       	ldi	r18, 0x00	; 0
    1c6a:	30 e0       	ldi	r19, 0x00	; 0
    1c6c:	4a e7       	ldi	r20, 0x7A	; 122
    1c6e:	53 e4       	ldi	r21, 0x43	; 67
    1c70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c74:	dc 01       	movw	r26, r24
    1c76:	cb 01       	movw	r24, r22
    1c78:	8d 8b       	std	Y+21, r24	; 0x15
    1c7a:	9e 8b       	std	Y+22, r25	; 0x16
    1c7c:	af 8b       	std	Y+23, r26	; 0x17
    1c7e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c80:	6d 89       	ldd	r22, Y+21	; 0x15
    1c82:	7e 89       	ldd	r23, Y+22	; 0x16
    1c84:	8f 89       	ldd	r24, Y+23	; 0x17
    1c86:	98 8d       	ldd	r25, Y+24	; 0x18
    1c88:	20 e0       	ldi	r18, 0x00	; 0
    1c8a:	30 e0       	ldi	r19, 0x00	; 0
    1c8c:	40 e8       	ldi	r20, 0x80	; 128
    1c8e:	5f e3       	ldi	r21, 0x3F	; 63
    1c90:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c94:	88 23       	and	r24, r24
    1c96:	2c f4       	brge	.+10     	; 0x1ca2 <LCD_displayCharacter+0x256>
		__ticks = 1;
    1c98:	81 e0       	ldi	r24, 0x01	; 1
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	9c 8b       	std	Y+20, r25	; 0x14
    1c9e:	8b 8b       	std	Y+19, r24	; 0x13
    1ca0:	3f c0       	rjmp	.+126    	; 0x1d20 <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    1ca2:	6d 89       	ldd	r22, Y+21	; 0x15
    1ca4:	7e 89       	ldd	r23, Y+22	; 0x16
    1ca6:	8f 89       	ldd	r24, Y+23	; 0x17
    1ca8:	98 8d       	ldd	r25, Y+24	; 0x18
    1caa:	20 e0       	ldi	r18, 0x00	; 0
    1cac:	3f ef       	ldi	r19, 0xFF	; 255
    1cae:	4f e7       	ldi	r20, 0x7F	; 127
    1cb0:	57 e4       	ldi	r21, 0x47	; 71
    1cb2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cb6:	18 16       	cp	r1, r24
    1cb8:	4c f5       	brge	.+82     	; 0x1d0c <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cba:	69 8d       	ldd	r22, Y+25	; 0x19
    1cbc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cbe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cc0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cc2:	20 e0       	ldi	r18, 0x00	; 0
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	40 e2       	ldi	r20, 0x20	; 32
    1cc8:	51 e4       	ldi	r21, 0x41	; 65
    1cca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cce:	dc 01       	movw	r26, r24
    1cd0:	cb 01       	movw	r24, r22
    1cd2:	bc 01       	movw	r22, r24
    1cd4:	cd 01       	movw	r24, r26
    1cd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cda:	dc 01       	movw	r26, r24
    1cdc:	cb 01       	movw	r24, r22
    1cde:	9c 8b       	std	Y+20, r25	; 0x14
    1ce0:	8b 8b       	std	Y+19, r24	; 0x13
    1ce2:	0f c0       	rjmp	.+30     	; 0x1d02 <LCD_displayCharacter+0x2b6>
    1ce4:	89 e1       	ldi	r24, 0x19	; 25
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	9a 8b       	std	Y+18, r25	; 0x12
    1cea:	89 8b       	std	Y+17, r24	; 0x11
    1cec:	89 89       	ldd	r24, Y+17	; 0x11
    1cee:	9a 89       	ldd	r25, Y+18	; 0x12
    1cf0:	01 97       	sbiw	r24, 0x01	; 1
    1cf2:	f1 f7       	brne	.-4      	; 0x1cf0 <LCD_displayCharacter+0x2a4>
    1cf4:	9a 8b       	std	Y+18, r25	; 0x12
    1cf6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cf8:	8b 89       	ldd	r24, Y+19	; 0x13
    1cfa:	9c 89       	ldd	r25, Y+20	; 0x14
    1cfc:	01 97       	sbiw	r24, 0x01	; 1
    1cfe:	9c 8b       	std	Y+20, r25	; 0x14
    1d00:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d02:	8b 89       	ldd	r24, Y+19	; 0x13
    1d04:	9c 89       	ldd	r25, Y+20	; 0x14
    1d06:	00 97       	sbiw	r24, 0x00	; 0
    1d08:	69 f7       	brne	.-38     	; 0x1ce4 <LCD_displayCharacter+0x298>
    1d0a:	14 c0       	rjmp	.+40     	; 0x1d34 <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d0c:	6d 89       	ldd	r22, Y+21	; 0x15
    1d0e:	7e 89       	ldd	r23, Y+22	; 0x16
    1d10:	8f 89       	ldd	r24, Y+23	; 0x17
    1d12:	98 8d       	ldd	r25, Y+24	; 0x18
    1d14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d18:	dc 01       	movw	r26, r24
    1d1a:	cb 01       	movw	r24, r22
    1d1c:	9c 8b       	std	Y+20, r25	; 0x14
    1d1e:	8b 8b       	std	Y+19, r24	; 0x13
    1d20:	8b 89       	ldd	r24, Y+19	; 0x13
    1d22:	9c 89       	ldd	r25, Y+20	; 0x14
    1d24:	98 8b       	std	Y+16, r25	; 0x10
    1d26:	8f 87       	std	Y+15, r24	; 0x0f
    1d28:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d2a:	98 89       	ldd	r25, Y+16	; 0x10
    1d2c:	01 97       	sbiw	r24, 0x01	; 1
    1d2e:	f1 f7       	brne	.-4      	; 0x1d2c <LCD_displayCharacter+0x2e0>
    1d30:	98 8b       	std	Y+16, r25	; 0x10
    1d32:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1d34:	83 e0       	ldi	r24, 0x03	; 3
    1d36:	62 e0       	ldi	r22, 0x02	; 2
    1d38:	40 e0       	ldi	r20, 0x00	; 0
    1d3a:	0e 94 67 07 	call	0xece	; 0xece <GPIO_writePin>
    1d3e:	80 e0       	ldi	r24, 0x00	; 0
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	a0 e8       	ldi	r26, 0x80	; 128
    1d44:	bf e3       	ldi	r27, 0x3F	; 63
    1d46:	8b 87       	std	Y+11, r24	; 0x0b
    1d48:	9c 87       	std	Y+12, r25	; 0x0c
    1d4a:	ad 87       	std	Y+13, r26	; 0x0d
    1d4c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d4e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d50:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d52:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d54:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d56:	20 e0       	ldi	r18, 0x00	; 0
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	4a e7       	ldi	r20, 0x7A	; 122
    1d5c:	53 e4       	ldi	r21, 0x43	; 67
    1d5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d62:	dc 01       	movw	r26, r24
    1d64:	cb 01       	movw	r24, r22
    1d66:	8f 83       	std	Y+7, r24	; 0x07
    1d68:	98 87       	std	Y+8, r25	; 0x08
    1d6a:	a9 87       	std	Y+9, r26	; 0x09
    1d6c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d6e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d70:	78 85       	ldd	r23, Y+8	; 0x08
    1d72:	89 85       	ldd	r24, Y+9	; 0x09
    1d74:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d76:	20 e0       	ldi	r18, 0x00	; 0
    1d78:	30 e0       	ldi	r19, 0x00	; 0
    1d7a:	40 e8       	ldi	r20, 0x80	; 128
    1d7c:	5f e3       	ldi	r21, 0x3F	; 63
    1d7e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d82:	88 23       	and	r24, r24
    1d84:	2c f4       	brge	.+10     	; 0x1d90 <LCD_displayCharacter+0x344>
		__ticks = 1;
    1d86:	81 e0       	ldi	r24, 0x01	; 1
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	9e 83       	std	Y+6, r25	; 0x06
    1d8c:	8d 83       	std	Y+5, r24	; 0x05
    1d8e:	3f c0       	rjmp	.+126    	; 0x1e0e <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    1d90:	6f 81       	ldd	r22, Y+7	; 0x07
    1d92:	78 85       	ldd	r23, Y+8	; 0x08
    1d94:	89 85       	ldd	r24, Y+9	; 0x09
    1d96:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d98:	20 e0       	ldi	r18, 0x00	; 0
    1d9a:	3f ef       	ldi	r19, 0xFF	; 255
    1d9c:	4f e7       	ldi	r20, 0x7F	; 127
    1d9e:	57 e4       	ldi	r21, 0x47	; 71
    1da0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1da4:	18 16       	cp	r1, r24
    1da6:	4c f5       	brge	.+82     	; 0x1dfa <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1da8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1daa:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dac:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dae:	9e 85       	ldd	r25, Y+14	; 0x0e
    1db0:	20 e0       	ldi	r18, 0x00	; 0
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	40 e2       	ldi	r20, 0x20	; 32
    1db6:	51 e4       	ldi	r21, 0x41	; 65
    1db8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dbc:	dc 01       	movw	r26, r24
    1dbe:	cb 01       	movw	r24, r22
    1dc0:	bc 01       	movw	r22, r24
    1dc2:	cd 01       	movw	r24, r26
    1dc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dc8:	dc 01       	movw	r26, r24
    1dca:	cb 01       	movw	r24, r22
    1dcc:	9e 83       	std	Y+6, r25	; 0x06
    1dce:	8d 83       	std	Y+5, r24	; 0x05
    1dd0:	0f c0       	rjmp	.+30     	; 0x1df0 <LCD_displayCharacter+0x3a4>
    1dd2:	89 e1       	ldi	r24, 0x19	; 25
    1dd4:	90 e0       	ldi	r25, 0x00	; 0
    1dd6:	9c 83       	std	Y+4, r25	; 0x04
    1dd8:	8b 83       	std	Y+3, r24	; 0x03
    1dda:	8b 81       	ldd	r24, Y+3	; 0x03
    1ddc:	9c 81       	ldd	r25, Y+4	; 0x04
    1dde:	01 97       	sbiw	r24, 0x01	; 1
    1de0:	f1 f7       	brne	.-4      	; 0x1dde <LCD_displayCharacter+0x392>
    1de2:	9c 83       	std	Y+4, r25	; 0x04
    1de4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1de6:	8d 81       	ldd	r24, Y+5	; 0x05
    1de8:	9e 81       	ldd	r25, Y+6	; 0x06
    1dea:	01 97       	sbiw	r24, 0x01	; 1
    1dec:	9e 83       	std	Y+6, r25	; 0x06
    1dee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1df0:	8d 81       	ldd	r24, Y+5	; 0x05
    1df2:	9e 81       	ldd	r25, Y+6	; 0x06
    1df4:	00 97       	sbiw	r24, 0x00	; 0
    1df6:	69 f7       	brne	.-38     	; 0x1dd2 <LCD_displayCharacter+0x386>
    1df8:	14 c0       	rjmp	.+40     	; 0x1e22 <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dfa:	6f 81       	ldd	r22, Y+7	; 0x07
    1dfc:	78 85       	ldd	r23, Y+8	; 0x08
    1dfe:	89 85       	ldd	r24, Y+9	; 0x09
    1e00:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e06:	dc 01       	movw	r26, r24
    1e08:	cb 01       	movw	r24, r22
    1e0a:	9e 83       	std	Y+6, r25	; 0x06
    1e0c:	8d 83       	std	Y+5, r24	; 0x05
    1e0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e10:	9e 81       	ldd	r25, Y+6	; 0x06
    1e12:	9a 83       	std	Y+2, r25	; 0x02
    1e14:	89 83       	std	Y+1, r24	; 0x01
    1e16:	89 81       	ldd	r24, Y+1	; 0x01
    1e18:	9a 81       	ldd	r25, Y+2	; 0x02
    1e1a:	01 97       	sbiw	r24, 0x01	; 1
    1e1c:	f1 f7       	brne	.-4      	; 0x1e1a <LCD_displayCharacter+0x3ce>
    1e1e:	9a 83       	std	Y+2, r25	; 0x02
    1e20:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    1e22:	e9 96       	adiw	r28, 0x39	; 57
    1e24:	0f b6       	in	r0, 0x3f	; 63
    1e26:	f8 94       	cli
    1e28:	de bf       	out	0x3e, r29	; 62
    1e2a:	0f be       	out	0x3f, r0	; 63
    1e2c:	cd bf       	out	0x3d, r28	; 61
    1e2e:	cf 91       	pop	r28
    1e30:	df 91       	pop	r29
    1e32:	08 95       	ret

00001e34 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    1e34:	df 93       	push	r29
    1e36:	cf 93       	push	r28
    1e38:	00 d0       	rcall	.+0      	; 0x1e3a <LCD_displayString+0x6>
    1e3a:	0f 92       	push	r0
    1e3c:	cd b7       	in	r28, 0x3d	; 61
    1e3e:	de b7       	in	r29, 0x3e	; 62
    1e40:	9b 83       	std	Y+3, r25	; 0x03
    1e42:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1e44:	19 82       	std	Y+1, r1	; 0x01
    1e46:	0e c0       	rjmp	.+28     	; 0x1e64 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1e48:	89 81       	ldd	r24, Y+1	; 0x01
    1e4a:	28 2f       	mov	r18, r24
    1e4c:	30 e0       	ldi	r19, 0x00	; 0
    1e4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e50:	9b 81       	ldd	r25, Y+3	; 0x03
    1e52:	fc 01       	movw	r30, r24
    1e54:	e2 0f       	add	r30, r18
    1e56:	f3 1f       	adc	r31, r19
    1e58:	80 81       	ld	r24, Z
    1e5a:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <LCD_displayCharacter>
		i++;
    1e5e:	89 81       	ldd	r24, Y+1	; 0x01
    1e60:	8f 5f       	subi	r24, 0xFF	; 255
    1e62:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1e64:	89 81       	ldd	r24, Y+1	; 0x01
    1e66:	28 2f       	mov	r18, r24
    1e68:	30 e0       	ldi	r19, 0x00	; 0
    1e6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e6c:	9b 81       	ldd	r25, Y+3	; 0x03
    1e6e:	fc 01       	movw	r30, r24
    1e70:	e2 0f       	add	r30, r18
    1e72:	f3 1f       	adc	r31, r19
    1e74:	80 81       	ld	r24, Z
    1e76:	88 23       	and	r24, r24
    1e78:	39 f7       	brne	.-50     	; 0x1e48 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    1e7a:	0f 90       	pop	r0
    1e7c:	0f 90       	pop	r0
    1e7e:	0f 90       	pop	r0
    1e80:	cf 91       	pop	r28
    1e82:	df 91       	pop	r29
    1e84:	08 95       	ret

00001e86 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    1e86:	df 93       	push	r29
    1e88:	cf 93       	push	r28
    1e8a:	00 d0       	rcall	.+0      	; 0x1e8c <LCD_moveCursor+0x6>
    1e8c:	00 d0       	rcall	.+0      	; 0x1e8e <LCD_moveCursor+0x8>
    1e8e:	0f 92       	push	r0
    1e90:	cd b7       	in	r28, 0x3d	; 61
    1e92:	de b7       	in	r29, 0x3e	; 62
    1e94:	8a 83       	std	Y+2, r24	; 0x02
    1e96:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    1e98:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9a:	28 2f       	mov	r18, r24
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	3d 83       	std	Y+5, r19	; 0x05
    1ea0:	2c 83       	std	Y+4, r18	; 0x04
    1ea2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ea4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ea6:	81 30       	cpi	r24, 0x01	; 1
    1ea8:	91 05       	cpc	r25, r1
    1eaa:	c1 f0       	breq	.+48     	; 0x1edc <LCD_moveCursor+0x56>
    1eac:	2c 81       	ldd	r18, Y+4	; 0x04
    1eae:	3d 81       	ldd	r19, Y+5	; 0x05
    1eb0:	22 30       	cpi	r18, 0x02	; 2
    1eb2:	31 05       	cpc	r19, r1
    1eb4:	2c f4       	brge	.+10     	; 0x1ec0 <LCD_moveCursor+0x3a>
    1eb6:	8c 81       	ldd	r24, Y+4	; 0x04
    1eb8:	9d 81       	ldd	r25, Y+5	; 0x05
    1eba:	00 97       	sbiw	r24, 0x00	; 0
    1ebc:	61 f0       	breq	.+24     	; 0x1ed6 <LCD_moveCursor+0x50>
    1ebe:	19 c0       	rjmp	.+50     	; 0x1ef2 <LCD_moveCursor+0x6c>
    1ec0:	2c 81       	ldd	r18, Y+4	; 0x04
    1ec2:	3d 81       	ldd	r19, Y+5	; 0x05
    1ec4:	22 30       	cpi	r18, 0x02	; 2
    1ec6:	31 05       	cpc	r19, r1
    1ec8:	69 f0       	breq	.+26     	; 0x1ee4 <LCD_moveCursor+0x5e>
    1eca:	8c 81       	ldd	r24, Y+4	; 0x04
    1ecc:	9d 81       	ldd	r25, Y+5	; 0x05
    1ece:	83 30       	cpi	r24, 0x03	; 3
    1ed0:	91 05       	cpc	r25, r1
    1ed2:	61 f0       	breq	.+24     	; 0x1eec <LCD_moveCursor+0x66>
    1ed4:	0e c0       	rjmp	.+28     	; 0x1ef2 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    1ed6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed8:	89 83       	std	Y+1, r24	; 0x01
    1eda:	0b c0       	rjmp	.+22     	; 0x1ef2 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    1edc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ede:	80 5c       	subi	r24, 0xC0	; 192
    1ee0:	89 83       	std	Y+1, r24	; 0x01
    1ee2:	07 c0       	rjmp	.+14     	; 0x1ef2 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    1ee4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee6:	80 5f       	subi	r24, 0xF0	; 240
    1ee8:	89 83       	std	Y+1, r24	; 0x01
    1eea:	03 c0       	rjmp	.+6      	; 0x1ef2 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    1eec:	8b 81       	ldd	r24, Y+3	; 0x03
    1eee:	80 5b       	subi	r24, 0xB0	; 176
    1ef0:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    1ef2:	89 81       	ldd	r24, Y+1	; 0x01
    1ef4:	80 68       	ori	r24, 0x80	; 128
    1ef6:	0e 94 32 0b 	call	0x1664	; 0x1664 <LCD_sendCommand>
}
    1efa:	0f 90       	pop	r0
    1efc:	0f 90       	pop	r0
    1efe:	0f 90       	pop	r0
    1f00:	0f 90       	pop	r0
    1f02:	0f 90       	pop	r0
    1f04:	cf 91       	pop	r28
    1f06:	df 91       	pop	r29
    1f08:	08 95       	ret

00001f0a <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    1f0a:	df 93       	push	r29
    1f0c:	cf 93       	push	r28
    1f0e:	00 d0       	rcall	.+0      	; 0x1f10 <LCD_displayStringRowColumn+0x6>
    1f10:	00 d0       	rcall	.+0      	; 0x1f12 <LCD_displayStringRowColumn+0x8>
    1f12:	cd b7       	in	r28, 0x3d	; 61
    1f14:	de b7       	in	r29, 0x3e	; 62
    1f16:	89 83       	std	Y+1, r24	; 0x01
    1f18:	6a 83       	std	Y+2, r22	; 0x02
    1f1a:	5c 83       	std	Y+4, r21	; 0x04
    1f1c:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    1f1e:	89 81       	ldd	r24, Y+1	; 0x01
    1f20:	6a 81       	ldd	r22, Y+2	; 0x02
    1f22:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    1f26:	8b 81       	ldd	r24, Y+3	; 0x03
    1f28:	9c 81       	ldd	r25, Y+4	; 0x04
    1f2a:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <LCD_displayString>
}
    1f2e:	0f 90       	pop	r0
    1f30:	0f 90       	pop	r0
    1f32:	0f 90       	pop	r0
    1f34:	0f 90       	pop	r0
    1f36:	cf 91       	pop	r28
    1f38:	df 91       	pop	r29
    1f3a:	08 95       	ret

00001f3c <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    1f3c:	df 93       	push	r29
    1f3e:	cf 93       	push	r28
    1f40:	cd b7       	in	r28, 0x3d	; 61
    1f42:	de b7       	in	r29, 0x3e	; 62
    1f44:	62 97       	sbiw	r28, 0x12	; 18
    1f46:	0f b6       	in	r0, 0x3f	; 63
    1f48:	f8 94       	cli
    1f4a:	de bf       	out	0x3e, r29	; 62
    1f4c:	0f be       	out	0x3f, r0	; 63
    1f4e:	cd bf       	out	0x3d, r28	; 61
    1f50:	9a 8b       	std	Y+18, r25	; 0x12
    1f52:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    1f54:	89 89       	ldd	r24, Y+17	; 0x11
    1f56:	9a 89       	ldd	r25, Y+18	; 0x12
    1f58:	9e 01       	movw	r18, r28
    1f5a:	2f 5f       	subi	r18, 0xFF	; 255
    1f5c:	3f 4f       	sbci	r19, 0xFF	; 255
    1f5e:	b9 01       	movw	r22, r18
    1f60:	4a e0       	ldi	r20, 0x0A	; 10
    1f62:	50 e0       	ldi	r21, 0x00	; 0
    1f64:	0e 94 38 12 	call	0x2470	; 0x2470 <itoa>
   LCD_displayString(buff); /* Display the string */
    1f68:	ce 01       	movw	r24, r28
    1f6a:	01 96       	adiw	r24, 0x01	; 1
    1f6c:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <LCD_displayString>
}
    1f70:	62 96       	adiw	r28, 0x12	; 18
    1f72:	0f b6       	in	r0, 0x3f	; 63
    1f74:	f8 94       	cli
    1f76:	de bf       	out	0x3e, r29	; 62
    1f78:	0f be       	out	0x3f, r0	; 63
    1f7a:	cd bf       	out	0x3d, r28	; 61
    1f7c:	cf 91       	pop	r28
    1f7e:	df 91       	pop	r29
    1f80:	08 95       	ret

00001f82 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    1f82:	df 93       	push	r29
    1f84:	cf 93       	push	r28
    1f86:	cd b7       	in	r28, 0x3d	; 61
    1f88:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    1f8a:	81 e0       	ldi	r24, 0x01	; 1
    1f8c:	0e 94 32 0b 	call	0x1664	; 0x1664 <LCD_sendCommand>
}
    1f90:	cf 91       	pop	r28
    1f92:	df 91       	pop	r29
    1f94:	08 95       	ret

00001f96 <main>:
#include "spi.h"
#include "util/delay.h"


int main(void)
{
    1f96:	df 93       	push	r29
    1f98:	cf 93       	push	r28
    1f9a:	cd b7       	in	r28, 0x3d	; 61
    1f9c:	de b7       	in	r29, 0x3e	; 62
    1f9e:	2f 97       	sbiw	r28, 0x0f	; 15
    1fa0:	0f b6       	in	r0, 0x3f	; 63
    1fa2:	f8 94       	cli
    1fa4:	de bf       	out	0x3e, r29	; 62
    1fa6:	0f be       	out	0x3f, r0	; 63
    1fa8:	cd bf       	out	0x3d, r28	; 61
	unsigned char temperature = 0;
    1faa:	1f 86       	std	Y+15, r1	; 0x0f
	SPI_initMaster();
    1fac:	0e 94 07 11 	call	0x220e	; 0x220e <SPI_initMaster>

	GPIO_writePin(PORTB_ID, PIN4_ID, LOGIC_HIGH);
    1fb0:	81 e0       	ldi	r24, 0x01	; 1
    1fb2:	64 e0       	ldi	r22, 0x04	; 4
    1fb4:	41 e0       	ldi	r20, 0x01	; 1
    1fb6:	0e 94 67 07 	call	0xece	; 0xece <GPIO_writePin>
	SPI_sendReceiveByte(0x80);
    1fba:	80 e8       	ldi	r24, 0x80	; 128
    1fbc:	0e 94 53 11 	call	0x22a6	; 0x22a6 <SPI_sendReceiveByte>
	SPI_sendReceiveByte(0x04);
    1fc0:	84 e0       	ldi	r24, 0x04	; 4
    1fc2:	0e 94 53 11 	call	0x22a6	; 0x22a6 <SPI_sendReceiveByte>
	GPIO_writePin(PORTB_ID, PIN4_ID, LOGIC_LOW);
    1fc6:	81 e0       	ldi	r24, 0x01	; 1
    1fc8:	64 e0       	ldi	r22, 0x04	; 4
    1fca:	40 e0       	ldi	r20, 0x00	; 0
    1fcc:	0e 94 67 07 	call	0xece	; 0xece <GPIO_writePin>

//	_delay_ms(200);

	LCD_init();
    1fd0:	0e 94 0f 0b 	call	0x161e	; 0x161e <LCD_init>
	SetPollingTime(500);
    1fd4:	84 ef       	ldi	r24, 0xF4	; 244
    1fd6:	91 e0       	ldi	r25, 0x01	; 1
    1fd8:	0e 94 bd 10 	call	0x217a	; 0x217a <SetPollingTime>
	while(1)
	{
		LCD_clearScreen();
    1fdc:	0e 94 c1 0f 	call	0x1f82	; 0x1f82 <LCD_clearScreen>



		GPIO_writePin(PORTB_ID, PIN4_ID, LOGIC_HIGH);
    1fe0:	81 e0       	ldi	r24, 0x01	; 1
    1fe2:	64 e0       	ldi	r22, 0x04	; 4
    1fe4:	41 e0       	ldi	r20, 0x01	; 1
    1fe6:	0e 94 67 07 	call	0xece	; 0xece <GPIO_writePin>
		SPI_sendReceiveByte(0x02);
    1fea:	82 e0       	ldi	r24, 0x02	; 2
    1fec:	0e 94 53 11 	call	0x22a6	; 0x22a6 <SPI_sendReceiveByte>
		temperature = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
    1ff0:	8f ef       	ldi	r24, 0xFF	; 255
    1ff2:	0e 94 53 11 	call	0x22a6	; 0x22a6 <SPI_sendReceiveByte>
    1ff6:	8f 87       	std	Y+15, r24	; 0x0f
		GPIO_writePin(PORTB_ID, PIN4_ID, LOGIC_LOW);
    1ff8:	81 e0       	ldi	r24, 0x01	; 1
    1ffa:	64 e0       	ldi	r22, 0x04	; 4
    1ffc:	40 e0       	ldi	r20, 0x00	; 0
    1ffe:	0e 94 67 07 	call	0xece	; 0xece <GPIO_writePin>
		LCD_intgerToString(temperature);
    2002:	8f 85       	ldd	r24, Y+15	; 0x0f
    2004:	88 2f       	mov	r24, r24
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	0e 94 9e 0f 	call	0x1f3c	; 0x1f3c <LCD_intgerToString>
    200c:	80 e0       	ldi	r24, 0x00	; 0
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	aa ef       	ldi	r26, 0xFA	; 250
    2012:	b3 e4       	ldi	r27, 0x43	; 67
    2014:	8b 87       	std	Y+11, r24	; 0x0b
    2016:	9c 87       	std	Y+12, r25	; 0x0c
    2018:	ad 87       	std	Y+13, r26	; 0x0d
    201a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    201c:	6b 85       	ldd	r22, Y+11	; 0x0b
    201e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2020:	8d 85       	ldd	r24, Y+13	; 0x0d
    2022:	9e 85       	ldd	r25, Y+14	; 0x0e
    2024:	20 e0       	ldi	r18, 0x00	; 0
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	4a e7       	ldi	r20, 0x7A	; 122
    202a:	53 e4       	ldi	r21, 0x43	; 67
    202c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2030:	dc 01       	movw	r26, r24
    2032:	cb 01       	movw	r24, r22
    2034:	8f 83       	std	Y+7, r24	; 0x07
    2036:	98 87       	std	Y+8, r25	; 0x08
    2038:	a9 87       	std	Y+9, r26	; 0x09
    203a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    203c:	6f 81       	ldd	r22, Y+7	; 0x07
    203e:	78 85       	ldd	r23, Y+8	; 0x08
    2040:	89 85       	ldd	r24, Y+9	; 0x09
    2042:	9a 85       	ldd	r25, Y+10	; 0x0a
    2044:	20 e0       	ldi	r18, 0x00	; 0
    2046:	30 e0       	ldi	r19, 0x00	; 0
    2048:	40 e8       	ldi	r20, 0x80	; 128
    204a:	5f e3       	ldi	r21, 0x3F	; 63
    204c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2050:	88 23       	and	r24, r24
    2052:	2c f4       	brge	.+10     	; 0x205e <main+0xc8>
		__ticks = 1;
    2054:	81 e0       	ldi	r24, 0x01	; 1
    2056:	90 e0       	ldi	r25, 0x00	; 0
    2058:	9e 83       	std	Y+6, r25	; 0x06
    205a:	8d 83       	std	Y+5, r24	; 0x05
    205c:	3f c0       	rjmp	.+126    	; 0x20dc <main+0x146>
	else if (__tmp > 65535)
    205e:	6f 81       	ldd	r22, Y+7	; 0x07
    2060:	78 85       	ldd	r23, Y+8	; 0x08
    2062:	89 85       	ldd	r24, Y+9	; 0x09
    2064:	9a 85       	ldd	r25, Y+10	; 0x0a
    2066:	20 e0       	ldi	r18, 0x00	; 0
    2068:	3f ef       	ldi	r19, 0xFF	; 255
    206a:	4f e7       	ldi	r20, 0x7F	; 127
    206c:	57 e4       	ldi	r21, 0x47	; 71
    206e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2072:	18 16       	cp	r1, r24
    2074:	4c f5       	brge	.+82     	; 0x20c8 <main+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2076:	6b 85       	ldd	r22, Y+11	; 0x0b
    2078:	7c 85       	ldd	r23, Y+12	; 0x0c
    207a:	8d 85       	ldd	r24, Y+13	; 0x0d
    207c:	9e 85       	ldd	r25, Y+14	; 0x0e
    207e:	20 e0       	ldi	r18, 0x00	; 0
    2080:	30 e0       	ldi	r19, 0x00	; 0
    2082:	40 e2       	ldi	r20, 0x20	; 32
    2084:	51 e4       	ldi	r21, 0x41	; 65
    2086:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    208a:	dc 01       	movw	r26, r24
    208c:	cb 01       	movw	r24, r22
    208e:	bc 01       	movw	r22, r24
    2090:	cd 01       	movw	r24, r26
    2092:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2096:	dc 01       	movw	r26, r24
    2098:	cb 01       	movw	r24, r22
    209a:	9e 83       	std	Y+6, r25	; 0x06
    209c:	8d 83       	std	Y+5, r24	; 0x05
    209e:	0f c0       	rjmp	.+30     	; 0x20be <main+0x128>
    20a0:	89 e1       	ldi	r24, 0x19	; 25
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	9c 83       	std	Y+4, r25	; 0x04
    20a6:	8b 83       	std	Y+3, r24	; 0x03
    20a8:	8b 81       	ldd	r24, Y+3	; 0x03
    20aa:	9c 81       	ldd	r25, Y+4	; 0x04
    20ac:	01 97       	sbiw	r24, 0x01	; 1
    20ae:	f1 f7       	brne	.-4      	; 0x20ac <main+0x116>
    20b0:	9c 83       	std	Y+4, r25	; 0x04
    20b2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20b4:	8d 81       	ldd	r24, Y+5	; 0x05
    20b6:	9e 81       	ldd	r25, Y+6	; 0x06
    20b8:	01 97       	sbiw	r24, 0x01	; 1
    20ba:	9e 83       	std	Y+6, r25	; 0x06
    20bc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20be:	8d 81       	ldd	r24, Y+5	; 0x05
    20c0:	9e 81       	ldd	r25, Y+6	; 0x06
    20c2:	00 97       	sbiw	r24, 0x00	; 0
    20c4:	69 f7       	brne	.-38     	; 0x20a0 <main+0x10a>
    20c6:	8a cf       	rjmp	.-236    	; 0x1fdc <main+0x46>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20c8:	6f 81       	ldd	r22, Y+7	; 0x07
    20ca:	78 85       	ldd	r23, Y+8	; 0x08
    20cc:	89 85       	ldd	r24, Y+9	; 0x09
    20ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    20d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20d4:	dc 01       	movw	r26, r24
    20d6:	cb 01       	movw	r24, r22
    20d8:	9e 83       	std	Y+6, r25	; 0x06
    20da:	8d 83       	std	Y+5, r24	; 0x05
    20dc:	8d 81       	ldd	r24, Y+5	; 0x05
    20de:	9e 81       	ldd	r25, Y+6	; 0x06
    20e0:	9a 83       	std	Y+2, r25	; 0x02
    20e2:	89 83       	std	Y+1, r24	; 0x01
    20e4:	89 81       	ldd	r24, Y+1	; 0x01
    20e6:	9a 81       	ldd	r25, Y+2	; 0x02
    20e8:	01 97       	sbiw	r24, 0x01	; 1
    20ea:	f1 f7       	brne	.-4      	; 0x20e8 <main+0x152>
    20ec:	9a 83       	std	Y+2, r25	; 0x02
    20ee:	89 83       	std	Y+1, r24	; 0x01
    20f0:	75 cf       	rjmp	.-278    	; 0x1fdc <main+0x46>

000020f2 <Poll>:
int polling_enabled= 1;
int polling_counter= 1;
int counter = 0 ;

void Poll(void)
{
    20f2:	df 93       	push	r29
    20f4:	cf 93       	push	r28
    20f6:	00 d0       	rcall	.+0      	; 0x20f8 <Poll+0x6>
    20f8:	cd b7       	in	r28, 0x3d	; 61
    20fa:	de b7       	in	r29, 0x3e	; 62
	if(polling_enabled && (!counter))
    20fc:	80 91 68 01 	lds	r24, 0x0168
    2100:	90 91 69 01 	lds	r25, 0x0169
    2104:	00 97       	sbiw	r24, 0x00	; 0
    2106:	e1 f0       	breq	.+56     	; 0x2140 <Poll+0x4e>
    2108:	80 91 94 01 	lds	r24, 0x0194
    210c:	90 91 95 01 	lds	r25, 0x0195
    2110:	00 97       	sbiw	r24, 0x00	; 0
    2112:	b1 f4       	brne	.+44     	; 0x2140 <Poll+0x4e>
	{
		int data;
		data = Get_Data();
    2114:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <Get_Data>
    2118:	88 2f       	mov	r24, r24
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	9a 83       	std	Y+2, r25	; 0x02
    211e:	89 83       	std	Y+1, r24	; 0x01
		Handle_data(data);
    2120:	89 81       	ldd	r24, Y+1	; 0x01
    2122:	9a 81       	ldd	r25, Y+2	; 0x02
    2124:	aa 27       	eor	r26, r26
    2126:	97 fd       	sbrc	r25, 7
    2128:	a0 95       	com	r26
    212a:	ba 2f       	mov	r27, r26
    212c:	bc 01       	movw	r22, r24
    212e:	cd 01       	movw	r24, r26
    2130:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
    2134:	dc 01       	movw	r26, r24
    2136:	cb 01       	movw	r24, r22
    2138:	bc 01       	movw	r22, r24
    213a:	cd 01       	movw	r24, r26
    213c:	0e 94 50 06 	call	0xca0	; 0xca0 <Handle_data>

	}
//	counter++;
//	counter = counter%polling_counter;
}
    2140:	0f 90       	pop	r0
    2142:	0f 90       	pop	r0
    2144:	cf 91       	pop	r28
    2146:	df 91       	pop	r29
    2148:	08 95       	ret

0000214a <StartPolling>:

void StartPolling(void)
{
    214a:	df 93       	push	r29
    214c:	cf 93       	push	r28
    214e:	cd b7       	in	r28, 0x3d	; 61
    2150:	de b7       	in	r29, 0x3e	; 62
	polling_enabled=1;
    2152:	81 e0       	ldi	r24, 0x01	; 1
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	90 93 69 01 	sts	0x0169, r25
    215a:	80 93 68 01 	sts	0x0168, r24
}
    215e:	cf 91       	pop	r28
    2160:	df 91       	pop	r29
    2162:	08 95       	ret

00002164 <StopPolling>:

void StopPolling(void)
{
    2164:	df 93       	push	r29
    2166:	cf 93       	push	r28
    2168:	cd b7       	in	r28, 0x3d	; 61
    216a:	de b7       	in	r29, 0x3e	; 62
	polling_enabled=0;
    216c:	10 92 69 01 	sts	0x0169, r1
    2170:	10 92 68 01 	sts	0x0168, r1
}
    2174:	cf 91       	pop	r28
    2176:	df 91       	pop	r29
    2178:	08 95       	ret

0000217a <SetPollingTime>:

void SetPollingTime(int polling_time)
{
    217a:	df 93       	push	r29
    217c:	cf 93       	push	r28
    217e:	00 d0       	rcall	.+0      	; 0x2180 <SetPollingTime+0x6>
    2180:	cd b7       	in	r28, 0x3d	; 61
    2182:	de b7       	in	r29, 0x3e	; 62
    2184:	9a 83       	std	Y+2, r25	; 0x02
    2186:	89 83       	std	Y+1, r24	; 0x01
	polling_counter = polling_time/100;
    2188:	89 81       	ldd	r24, Y+1	; 0x01
    218a:	9a 81       	ldd	r25, Y+2	; 0x02
    218c:	24 e6       	ldi	r18, 0x64	; 100
    218e:	30 e0       	ldi	r19, 0x00	; 0
    2190:	b9 01       	movw	r22, r18
    2192:	0e 94 da 11 	call	0x23b4	; 0x23b4 <__divmodhi4>
    2196:	cb 01       	movw	r24, r22
    2198:	90 93 6b 01 	sts	0x016B, r25
    219c:	80 93 6a 01 	sts	0x016A, r24
}
    21a0:	0f 90       	pop	r0
    21a2:	0f 90       	pop	r0
    21a4:	cf 91       	pop	r28
    21a6:	df 91       	pop	r29
    21a8:	08 95       	ret

000021aa <PWM_Timer0_Start>:
#include "gpio.h"
#include "common_macros.h"
#include <avr/io.h>

void PWM_Timer0_Start(uint8_t duty_cycle)
{
    21aa:	df 93       	push	r29
    21ac:	cf 93       	push	r28
    21ae:	0f 92       	push	r0
    21b0:	cd b7       	in	r28, 0x3d	; 61
    21b2:	de b7       	in	r29, 0x3e	; 62
    21b4:	89 83       	std	Y+1, r24	; 0x01
	/*	The function responsible for trigger the Timer0 with the PWM Mode. */

	TCNT0 = 0; //Set Timer Initial value
    21b6:	e2 e5       	ldi	r30, 0x52	; 82
    21b8:	f0 e0       	ldi	r31, 0x00	; 0
    21ba:	10 82       	st	Z, r1
	OCR0 = duty_cycle; // Set Compare Value
    21bc:	ec e5       	ldi	r30, 0x5C	; 92
    21be:	f0 e0       	ldi	r31, 0x00	; 0
    21c0:	89 81       	ldd	r24, Y+1	; 0x01
    21c2:	80 83       	st	Z, r24
	GPIO_setupPinDirection(PWM_PORT_ID, PWM_PIN_ID, PIN_OUTPUT); //Setup the PWM pin as Output pin
    21c4:	81 e0       	ldi	r24, 0x01	; 1
    21c6:	63 e0       	ldi	r22, 0x03	; 3
    21c8:	41 e0       	ldi	r20, 0x01	; 1
    21ca:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <GPIO_setupPinDirection>
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 = (500Hz) .. CS00=0 CS01=1 CS02=0
	 */
	SET_BIT(TCCR0,WGM00);
    21ce:	a3 e5       	ldi	r26, 0x53	; 83
    21d0:	b0 e0       	ldi	r27, 0x00	; 0
    21d2:	e3 e5       	ldi	r30, 0x53	; 83
    21d4:	f0 e0       	ldi	r31, 0x00	; 0
    21d6:	80 81       	ld	r24, Z
    21d8:	80 64       	ori	r24, 0x40	; 64
    21da:	8c 93       	st	X, r24
	SET_BIT(TCCR0,WGM01);
    21dc:	a3 e5       	ldi	r26, 0x53	; 83
    21de:	b0 e0       	ldi	r27, 0x00	; 0
    21e0:	e3 e5       	ldi	r30, 0x53	; 83
    21e2:	f0 e0       	ldi	r31, 0x00	; 0
    21e4:	80 81       	ld	r24, Z
    21e6:	88 60       	ori	r24, 0x08	; 8
    21e8:	8c 93       	st	X, r24
	SET_BIT(TCCR0,COM01);
    21ea:	a3 e5       	ldi	r26, 0x53	; 83
    21ec:	b0 e0       	ldi	r27, 0x00	; 0
    21ee:	e3 e5       	ldi	r30, 0x53	; 83
    21f0:	f0 e0       	ldi	r31, 0x00	; 0
    21f2:	80 81       	ld	r24, Z
    21f4:	80 62       	ori	r24, 0x20	; 32
    21f6:	8c 93       	st	X, r24
	SET_BIT(TCCR0,CS01);
    21f8:	a3 e5       	ldi	r26, 0x53	; 83
    21fa:	b0 e0       	ldi	r27, 0x00	; 0
    21fc:	e3 e5       	ldi	r30, 0x53	; 83
    21fe:	f0 e0       	ldi	r31, 0x00	; 0
    2200:	80 81       	ld	r24, Z
    2202:	82 60       	ori	r24, 0x02	; 2
    2204:	8c 93       	st	X, r24
}
    2206:	0f 90       	pop	r0
    2208:	cf 91       	pop	r28
    220a:	df 91       	pop	r29
    220c:	08 95       	ret

0000220e <SPI_initMaster>:
/*
 * Description :
 * Initialize the SPI device as Master.
 */
void SPI_initMaster(void) 
{
    220e:	df 93       	push	r29
    2210:	cf 93       	push	r28
    2212:	cd b7       	in	r28, 0x3d	; 61
    2214:	de b7       	in	r29, 0x3e	; 62
	 * SS(PB4)   --> Output
	 * MOSI(PB5) --> Output 
	 * MISO(PB6) --> Input
	 * SCK(PB7) --> Output
	 ********************************************/
	GPIO_setupPinDirection(PORTB_ID,PIN4_ID,PIN_OUTPUT);
    2216:	81 e0       	ldi	r24, 0x01	; 1
    2218:	64 e0       	ldi	r22, 0x04	; 4
    221a:	41 e0       	ldi	r20, 0x01	; 1
    221c:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN5_ID,PIN_OUTPUT);
    2220:	81 e0       	ldi	r24, 0x01	; 1
    2222:	65 e0       	ldi	r22, 0x05	; 5
    2224:	41 e0       	ldi	r20, 0x01	; 1
    2226:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN6_ID,PIN_INPUT);
    222a:	81 e0       	ldi	r24, 0x01	; 1
    222c:	66 e0       	ldi	r22, 0x06	; 6
    222e:	40 e0       	ldi	r20, 0x00	; 0
    2230:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN7_ID,PIN_OUTPUT);
    2234:	81 e0       	ldi	r24, 0x01	; 1
    2236:	67 e0       	ldi	r22, 0x07	; 7
    2238:	41 e0       	ldi	r20, 0x01	; 1
    223a:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <GPIO_setupPinDirection>
     * MSTR    = 1 Enable Master
     * CPOL    = 0 SCK is low when idle
     * CPHA    = 1 Sample Data with the falling edge
     * SPR1:0  = 00 Choose SPI clock = Fosc/4
     ***********************************************************************/
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<CPHA);
    223e:	ed e2       	ldi	r30, 0x2D	; 45
    2240:	f0 e0       	ldi	r31, 0x00	; 0
    2242:	84 e5       	ldi	r24, 0x54	; 84
    2244:	80 83       	st	Z, r24

	/* Clear the SPI2X bit in SPSR to Choose SPI clock = Fosc/4 */
	SPSR &= ~(1<<SPI2X);
    2246:	ae e2       	ldi	r26, 0x2E	; 46
    2248:	b0 e0       	ldi	r27, 0x00	; 0
    224a:	ee e2       	ldi	r30, 0x2E	; 46
    224c:	f0 e0       	ldi	r31, 0x00	; 0
    224e:	80 81       	ld	r24, Z
    2250:	8e 7f       	andi	r24, 0xFE	; 254
    2252:	8c 93       	st	X, r24
//	SPSR |= (1<<SPR0);		//FOSC/16


}
    2254:	cf 91       	pop	r28
    2256:	df 91       	pop	r29
    2258:	08 95       	ret

0000225a <SPI_initSlave>:
/*
 * Description :
 * Initialize the SPI device as Slave.
 */
void SPI_initSlave(void)
{ 
    225a:	df 93       	push	r29
    225c:	cf 93       	push	r28
    225e:	cd b7       	in	r28, 0x3d	; 61
    2260:	de b7       	in	r29, 0x3e	; 62
	 * SS(PB4)   --> Input
	 * MOSI(PB5) --> Input
	 * MISO(PB6) --> Output
	 * SCK(PB7) --> Input
	 ********************************************/
	GPIO_setupPinDirection(PORTB_ID,PIN4_ID,PIN_INPUT);
    2262:	81 e0       	ldi	r24, 0x01	; 1
    2264:	64 e0       	ldi	r22, 0x04	; 4
    2266:	40 e0       	ldi	r20, 0x00	; 0
    2268:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN5_ID,PIN_INPUT);
    226c:	81 e0       	ldi	r24, 0x01	; 1
    226e:	65 e0       	ldi	r22, 0x05	; 5
    2270:	40 e0       	ldi	r20, 0x00	; 0
    2272:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN6_ID,PIN_OUTPUT);
    2276:	81 e0       	ldi	r24, 0x01	; 1
    2278:	66 e0       	ldi	r22, 0x06	; 6
    227a:	41 e0       	ldi	r20, 0x01	; 1
    227c:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN7_ID,PIN_INPUT);
    2280:	81 e0       	ldi	r24, 0x01	; 1
    2282:	67 e0       	ldi	r22, 0x07	; 7
    2284:	40 e0       	ldi	r20, 0x00	; 0
    2286:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <GPIO_setupPinDirection>
	 * MSTR    = 0 Disable Master
	 * CPOL    = 0 SCK is low when idle
	 * CPHA    = 0 Sample Data with the raising edge
	 * SPR1:0  = 00 Choose SPI clock = Fosc/4
	 ***********************************************************************/
	SPCR = (1<<SPE);
    228a:	ed e2       	ldi	r30, 0x2D	; 45
    228c:	f0 e0       	ldi	r31, 0x00	; 0
    228e:	80 e4       	ldi	r24, 0x40	; 64
    2290:	80 83       	st	Z, r24

	/* Clear the SPI2X bit in SPSR to Choose SPI clock = Fosc/4 */
	SPSR &= ~(1<<SPI2X);
    2292:	ae e2       	ldi	r26, 0x2E	; 46
    2294:	b0 e0       	ldi	r27, 0x00	; 0
    2296:	ee e2       	ldi	r30, 0x2E	; 46
    2298:	f0 e0       	ldi	r31, 0x00	; 0
    229a:	80 81       	ld	r24, Z
    229c:	8e 7f       	andi	r24, 0xFE	; 254
    229e:	8c 93       	st	X, r24
}
    22a0:	cf 91       	pop	r28
    22a2:	df 91       	pop	r29
    22a4:	08 95       	ret

000022a6 <SPI_sendReceiveByte>:
 * Description :
 * Send the required data through SPI to the other SPI device.
 * In the same time data will be received from the other device.
 */
uint8 SPI_sendReceiveByte(uint8 data)
{
    22a6:	df 93       	push	r29
    22a8:	cf 93       	push	r28
    22aa:	0f 92       	push	r0
    22ac:	cd b7       	in	r28, 0x3d	; 61
    22ae:	de b7       	in	r29, 0x3e	; 62
    22b0:	89 83       	std	Y+1, r24	; 0x01
	/* Initiate the communication and send data by SPI */
	SPDR = data;
    22b2:	ef e2       	ldi	r30, 0x2F	; 47
    22b4:	f0 e0       	ldi	r31, 0x00	; 0
    22b6:	89 81       	ldd	r24, Y+1	; 0x01
    22b8:	80 83       	st	Z, r24

	/* Wait until SPI interrupt flag SPIF = 1 (data has been sent/received correctly) */
	while(BIT_IS_CLEAR(SPSR,SPIF)){}
    22ba:	ee e2       	ldi	r30, 0x2E	; 46
    22bc:	f0 e0       	ldi	r31, 0x00	; 0
    22be:	80 81       	ld	r24, Z
    22c0:	88 23       	and	r24, r24
    22c2:	dc f7       	brge	.-10     	; 0x22ba <SPI_sendReceiveByte+0x14>

	/*
	 * Note: SPIF flag is cleared by first reading SPSR (with SPIF set) which is done in the previous step.
	 * and then accessing SPDR like the below line.
	 */
	return SPDR;
    22c4:	ef e2       	ldi	r30, 0x2F	; 47
    22c6:	f0 e0       	ldi	r31, 0x00	; 0
    22c8:	80 81       	ld	r24, Z
}
    22ca:	0f 90       	pop	r0
    22cc:	cf 91       	pop	r28
    22ce:	df 91       	pop	r29
    22d0:	08 95       	ret

000022d2 <SPI_sendString>:
/*
 * Description :
 * Send the required string through SPI to the other SPI device.
 */
void SPI_sendString(const uint8 *str)
{
    22d2:	df 93       	push	r29
    22d4:	cf 93       	push	r28
    22d6:	00 d0       	rcall	.+0      	; 0x22d8 <SPI_sendString+0x6>
    22d8:	00 d0       	rcall	.+0      	; 0x22da <SPI_sendString+0x8>
    22da:	cd b7       	in	r28, 0x3d	; 61
    22dc:	de b7       	in	r29, 0x3e	; 62
    22de:	9c 83       	std	Y+4, r25	; 0x04
    22e0:	8b 83       	std	Y+3, r24	; 0x03
	uint8 i = 0;
    22e2:	1a 82       	std	Y+2, r1	; 0x02
	uint8 received_data = 0;
    22e4:	19 82       	std	Y+1, r1	; 0x01
    22e6:	0f c0       	rjmp	.+30     	; 0x2306 <SPI_sendString+0x34>
	{
		/*
		 * received_data contains the received data from the other device.
		 * It is a dummy data variable as we just need to send the string to other device.
		 */
		received_data = SPI_sendReceiveByte(str[i]);
    22e8:	8a 81       	ldd	r24, Y+2	; 0x02
    22ea:	28 2f       	mov	r18, r24
    22ec:	30 e0       	ldi	r19, 0x00	; 0
    22ee:	8b 81       	ldd	r24, Y+3	; 0x03
    22f0:	9c 81       	ldd	r25, Y+4	; 0x04
    22f2:	fc 01       	movw	r30, r24
    22f4:	e2 0f       	add	r30, r18
    22f6:	f3 1f       	adc	r31, r19
    22f8:	80 81       	ld	r24, Z
    22fa:	0e 94 53 11 	call	0x22a6	; 0x22a6 <SPI_sendReceiveByte>
    22fe:	89 83       	std	Y+1, r24	; 0x01
		i++;
    2300:	8a 81       	ldd	r24, Y+2	; 0x02
    2302:	8f 5f       	subi	r24, 0xFF	; 255
    2304:	8a 83       	std	Y+2, r24	; 0x02
{
	uint8 i = 0;
	uint8 received_data = 0;

	/* Send the whole string */
	while(str[i] != '\0')
    2306:	8a 81       	ldd	r24, Y+2	; 0x02
    2308:	28 2f       	mov	r18, r24
    230a:	30 e0       	ldi	r19, 0x00	; 0
    230c:	8b 81       	ldd	r24, Y+3	; 0x03
    230e:	9c 81       	ldd	r25, Y+4	; 0x04
    2310:	fc 01       	movw	r30, r24
    2312:	e2 0f       	add	r30, r18
    2314:	f3 1f       	adc	r31, r19
    2316:	80 81       	ld	r24, Z
    2318:	88 23       	and	r24, r24
    231a:	31 f7       	brne	.-52     	; 0x22e8 <SPI_sendString+0x16>
		 * It is a dummy data variable as we just need to send the string to other device.
		 */
		received_data = SPI_sendReceiveByte(str[i]);
		i++;
	}
}
    231c:	0f 90       	pop	r0
    231e:	0f 90       	pop	r0
    2320:	0f 90       	pop	r0
    2322:	0f 90       	pop	r0
    2324:	cf 91       	pop	r28
    2326:	df 91       	pop	r29
    2328:	08 95       	ret

0000232a <SPI_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through SPI from the other SPI device.
 */
void SPI_receiveString(uint8 *str)
{
    232a:	0f 93       	push	r16
    232c:	1f 93       	push	r17
    232e:	df 93       	push	r29
    2330:	cf 93       	push	r28
    2332:	00 d0       	rcall	.+0      	; 0x2334 <SPI_receiveString+0xa>
    2334:	0f 92       	push	r0
    2336:	cd b7       	in	r28, 0x3d	; 61
    2338:	de b7       	in	r29, 0x3e	; 62
    233a:	9b 83       	std	Y+3, r25	; 0x03
    233c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    233e:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	str[i] = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
    2340:	89 81       	ldd	r24, Y+1	; 0x01
    2342:	28 2f       	mov	r18, r24
    2344:	30 e0       	ldi	r19, 0x00	; 0
    2346:	8a 81       	ldd	r24, Y+2	; 0x02
    2348:	9b 81       	ldd	r25, Y+3	; 0x03
    234a:	8c 01       	movw	r16, r24
    234c:	02 0f       	add	r16, r18
    234e:	13 1f       	adc	r17, r19
    2350:	8f ef       	ldi	r24, 0xFF	; 255
    2352:	0e 94 53 11 	call	0x22a6	; 0x22a6 <SPI_sendReceiveByte>
    2356:	f8 01       	movw	r30, r16
    2358:	80 83       	st	Z, r24
    235a:	10 c0       	rjmp	.+32     	; 0x237c <SPI_receiveString+0x52>

	/* Receive the whole string until the '#' */
	while(str[i] != '#')
	{
		i++;
    235c:	89 81       	ldd	r24, Y+1	; 0x01
    235e:	8f 5f       	subi	r24, 0xFF	; 255
    2360:	89 83       	std	Y+1, r24	; 0x01
		str[i] = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
    2362:	89 81       	ldd	r24, Y+1	; 0x01
    2364:	28 2f       	mov	r18, r24
    2366:	30 e0       	ldi	r19, 0x00	; 0
    2368:	8a 81       	ldd	r24, Y+2	; 0x02
    236a:	9b 81       	ldd	r25, Y+3	; 0x03
    236c:	8c 01       	movw	r16, r24
    236e:	02 0f       	add	r16, r18
    2370:	13 1f       	adc	r17, r19
    2372:	8f ef       	ldi	r24, 0xFF	; 255
    2374:	0e 94 53 11 	call	0x22a6	; 0x22a6 <SPI_sendReceiveByte>
    2378:	f8 01       	movw	r30, r16
    237a:	80 83       	st	Z, r24

	/* Receive the first byte */
	str[i] = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);

	/* Receive the whole string until the '#' */
	while(str[i] != '#')
    237c:	89 81       	ldd	r24, Y+1	; 0x01
    237e:	28 2f       	mov	r18, r24
    2380:	30 e0       	ldi	r19, 0x00	; 0
    2382:	8a 81       	ldd	r24, Y+2	; 0x02
    2384:	9b 81       	ldd	r25, Y+3	; 0x03
    2386:	fc 01       	movw	r30, r24
    2388:	e2 0f       	add	r30, r18
    238a:	f3 1f       	adc	r31, r19
    238c:	80 81       	ld	r24, Z
    238e:	83 32       	cpi	r24, 0x23	; 35
    2390:	29 f7       	brne	.-54     	; 0x235c <SPI_receiveString+0x32>
		i++;
		str[i] = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	str[i] = '\0';
    2392:	89 81       	ldd	r24, Y+1	; 0x01
    2394:	28 2f       	mov	r18, r24
    2396:	30 e0       	ldi	r19, 0x00	; 0
    2398:	8a 81       	ldd	r24, Y+2	; 0x02
    239a:	9b 81       	ldd	r25, Y+3	; 0x03
    239c:	fc 01       	movw	r30, r24
    239e:	e2 0f       	add	r30, r18
    23a0:	f3 1f       	adc	r31, r19
    23a2:	10 82       	st	Z, r1
}
    23a4:	0f 90       	pop	r0
    23a6:	0f 90       	pop	r0
    23a8:	0f 90       	pop	r0
    23aa:	cf 91       	pop	r28
    23ac:	df 91       	pop	r29
    23ae:	1f 91       	pop	r17
    23b0:	0f 91       	pop	r16
    23b2:	08 95       	ret

000023b4 <__divmodhi4>:
    23b4:	97 fb       	bst	r25, 7
    23b6:	09 2e       	mov	r0, r25
    23b8:	07 26       	eor	r0, r23
    23ba:	0a d0       	rcall	.+20     	; 0x23d0 <__divmodhi4_neg1>
    23bc:	77 fd       	sbrc	r23, 7
    23be:	04 d0       	rcall	.+8      	; 0x23c8 <__divmodhi4_neg2>
    23c0:	0c d0       	rcall	.+24     	; 0x23da <__udivmodhi4>
    23c2:	06 d0       	rcall	.+12     	; 0x23d0 <__divmodhi4_neg1>
    23c4:	00 20       	and	r0, r0
    23c6:	1a f4       	brpl	.+6      	; 0x23ce <__divmodhi4_exit>

000023c8 <__divmodhi4_neg2>:
    23c8:	70 95       	com	r23
    23ca:	61 95       	neg	r22
    23cc:	7f 4f       	sbci	r23, 0xFF	; 255

000023ce <__divmodhi4_exit>:
    23ce:	08 95       	ret

000023d0 <__divmodhi4_neg1>:
    23d0:	f6 f7       	brtc	.-4      	; 0x23ce <__divmodhi4_exit>
    23d2:	90 95       	com	r25
    23d4:	81 95       	neg	r24
    23d6:	9f 4f       	sbci	r25, 0xFF	; 255
    23d8:	08 95       	ret

000023da <__udivmodhi4>:
    23da:	aa 1b       	sub	r26, r26
    23dc:	bb 1b       	sub	r27, r27
    23de:	51 e1       	ldi	r21, 0x11	; 17
    23e0:	07 c0       	rjmp	.+14     	; 0x23f0 <__udivmodhi4_ep>

000023e2 <__udivmodhi4_loop>:
    23e2:	aa 1f       	adc	r26, r26
    23e4:	bb 1f       	adc	r27, r27
    23e6:	a6 17       	cp	r26, r22
    23e8:	b7 07       	cpc	r27, r23
    23ea:	10 f0       	brcs	.+4      	; 0x23f0 <__udivmodhi4_ep>
    23ec:	a6 1b       	sub	r26, r22
    23ee:	b7 0b       	sbc	r27, r23

000023f0 <__udivmodhi4_ep>:
    23f0:	88 1f       	adc	r24, r24
    23f2:	99 1f       	adc	r25, r25
    23f4:	5a 95       	dec	r21
    23f6:	a9 f7       	brne	.-22     	; 0x23e2 <__udivmodhi4_loop>
    23f8:	80 95       	com	r24
    23fa:	90 95       	com	r25
    23fc:	bc 01       	movw	r22, r24
    23fe:	cd 01       	movw	r24, r26
    2400:	08 95       	ret

00002402 <__prologue_saves__>:
    2402:	2f 92       	push	r2
    2404:	3f 92       	push	r3
    2406:	4f 92       	push	r4
    2408:	5f 92       	push	r5
    240a:	6f 92       	push	r6
    240c:	7f 92       	push	r7
    240e:	8f 92       	push	r8
    2410:	9f 92       	push	r9
    2412:	af 92       	push	r10
    2414:	bf 92       	push	r11
    2416:	cf 92       	push	r12
    2418:	df 92       	push	r13
    241a:	ef 92       	push	r14
    241c:	ff 92       	push	r15
    241e:	0f 93       	push	r16
    2420:	1f 93       	push	r17
    2422:	cf 93       	push	r28
    2424:	df 93       	push	r29
    2426:	cd b7       	in	r28, 0x3d	; 61
    2428:	de b7       	in	r29, 0x3e	; 62
    242a:	ca 1b       	sub	r28, r26
    242c:	db 0b       	sbc	r29, r27
    242e:	0f b6       	in	r0, 0x3f	; 63
    2430:	f8 94       	cli
    2432:	de bf       	out	0x3e, r29	; 62
    2434:	0f be       	out	0x3f, r0	; 63
    2436:	cd bf       	out	0x3d, r28	; 61
    2438:	09 94       	ijmp

0000243a <__epilogue_restores__>:
    243a:	2a 88       	ldd	r2, Y+18	; 0x12
    243c:	39 88       	ldd	r3, Y+17	; 0x11
    243e:	48 88       	ldd	r4, Y+16	; 0x10
    2440:	5f 84       	ldd	r5, Y+15	; 0x0f
    2442:	6e 84       	ldd	r6, Y+14	; 0x0e
    2444:	7d 84       	ldd	r7, Y+13	; 0x0d
    2446:	8c 84       	ldd	r8, Y+12	; 0x0c
    2448:	9b 84       	ldd	r9, Y+11	; 0x0b
    244a:	aa 84       	ldd	r10, Y+10	; 0x0a
    244c:	b9 84       	ldd	r11, Y+9	; 0x09
    244e:	c8 84       	ldd	r12, Y+8	; 0x08
    2450:	df 80       	ldd	r13, Y+7	; 0x07
    2452:	ee 80       	ldd	r14, Y+6	; 0x06
    2454:	fd 80       	ldd	r15, Y+5	; 0x05
    2456:	0c 81       	ldd	r16, Y+4	; 0x04
    2458:	1b 81       	ldd	r17, Y+3	; 0x03
    245a:	aa 81       	ldd	r26, Y+2	; 0x02
    245c:	b9 81       	ldd	r27, Y+1	; 0x01
    245e:	ce 0f       	add	r28, r30
    2460:	d1 1d       	adc	r29, r1
    2462:	0f b6       	in	r0, 0x3f	; 63
    2464:	f8 94       	cli
    2466:	de bf       	out	0x3e, r29	; 62
    2468:	0f be       	out	0x3f, r0	; 63
    246a:	cd bf       	out	0x3d, r28	; 61
    246c:	ed 01       	movw	r28, r26
    246e:	08 95       	ret

00002470 <itoa>:
    2470:	fb 01       	movw	r30, r22
    2472:	9f 01       	movw	r18, r30
    2474:	e8 94       	clt
    2476:	42 30       	cpi	r20, 0x02	; 2
    2478:	c4 f0       	brlt	.+48     	; 0x24aa <itoa+0x3a>
    247a:	45 32       	cpi	r20, 0x25	; 37
    247c:	b4 f4       	brge	.+44     	; 0x24aa <itoa+0x3a>
    247e:	4a 30       	cpi	r20, 0x0A	; 10
    2480:	29 f4       	brne	.+10     	; 0x248c <itoa+0x1c>
    2482:	97 fb       	bst	r25, 7
    2484:	1e f4       	brtc	.+6      	; 0x248c <itoa+0x1c>
    2486:	90 95       	com	r25
    2488:	81 95       	neg	r24
    248a:	9f 4f       	sbci	r25, 0xFF	; 255
    248c:	64 2f       	mov	r22, r20
    248e:	77 27       	eor	r23, r23
    2490:	0e 94 ed 11 	call	0x23da	; 0x23da <__udivmodhi4>
    2494:	80 5d       	subi	r24, 0xD0	; 208
    2496:	8a 33       	cpi	r24, 0x3A	; 58
    2498:	0c f0       	brlt	.+2      	; 0x249c <itoa+0x2c>
    249a:	89 5d       	subi	r24, 0xD9	; 217
    249c:	81 93       	st	Z+, r24
    249e:	cb 01       	movw	r24, r22
    24a0:	00 97       	sbiw	r24, 0x00	; 0
    24a2:	a1 f7       	brne	.-24     	; 0x248c <itoa+0x1c>
    24a4:	16 f4       	brtc	.+4      	; 0x24aa <itoa+0x3a>
    24a6:	5d e2       	ldi	r21, 0x2D	; 45
    24a8:	51 93       	st	Z+, r21
    24aa:	10 82       	st	Z, r1
    24ac:	c9 01       	movw	r24, r18
    24ae:	0c 94 59 12 	jmp	0x24b2	; 0x24b2 <strrev>

000024b2 <strrev>:
    24b2:	dc 01       	movw	r26, r24
    24b4:	fc 01       	movw	r30, r24
    24b6:	67 2f       	mov	r22, r23
    24b8:	71 91       	ld	r23, Z+
    24ba:	77 23       	and	r23, r23
    24bc:	e1 f7       	brne	.-8      	; 0x24b6 <strrev+0x4>
    24be:	32 97       	sbiw	r30, 0x02	; 2
    24c0:	04 c0       	rjmp	.+8      	; 0x24ca <strrev+0x18>
    24c2:	7c 91       	ld	r23, X
    24c4:	6d 93       	st	X+, r22
    24c6:	70 83       	st	Z, r23
    24c8:	62 91       	ld	r22, -Z
    24ca:	ae 17       	cp	r26, r30
    24cc:	bf 07       	cpc	r27, r31
    24ce:	c8 f3       	brcs	.-14     	; 0x24c2 <strrev+0x10>
    24d0:	08 95       	ret

000024d2 <_exit>:
    24d2:	f8 94       	cli

000024d4 <__stop_program>:
    24d4:	ff cf       	rjmp	.-2      	; 0x24d4 <__stop_program>
