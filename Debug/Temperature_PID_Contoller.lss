
Temperature_PID_Contoller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000028fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000150  00800060  000028fc  00002990  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  008001b0  008001b0  00002ae0  2**0
                  ALLOC
  3 .stab         00002958  00000000  00000000  00002ae0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011d8  00000000  00000000  00005438  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00006610  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f0  00000000  00000000  000067b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240c  00000000  00000000  000069a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001377  00000000  00000000  00008dac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d8  00000000  00000000  0000a123  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000b2fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f3  00000000  00000000  0000b4bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000009ce  00000000  00000000  0000b7af  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c17d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 5a 12 	jmp	0x24b4	; 0x24b4 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ef       	ldi	r30, 0xFC	; 252
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3b       	cpi	r26, 0xB0	; 176
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 eb       	ldi	r26, 0xB0	; 176
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 3b       	cpi	r26, 0xB3	; 179
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 3c 12 	call	0x2478	; 0x2478 <main>
      8a:	0c 94 7c 14 	jmp	0x28f8	; 0x28f8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 b3 04 	call	0x966	; 0x966 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 14 14 	jmp	0x2828	; 0x2828 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 30 14 	jmp	0x2860	; 0x2860 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 20 14 	jmp	0x2840	; 0x2840 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 3c 14 	jmp	0x2878	; 0x2878 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 20 14 	jmp	0x2840	; 0x2840 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 3c 14 	jmp	0x2878	; 0x2878 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 14 14 	jmp	0x2828	; 0x2828 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 30 14 	jmp	0x2860	; 0x2860 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 1c 14 	jmp	0x2838	; 0x2838 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 38 14 	jmp	0x2870	; 0x2870 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 20 14 	jmp	0x2840	; 0x2840 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 3c 14 	jmp	0x2878	; 0x2878 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 20 14 	jmp	0x2840	; 0x2840 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 3c 14 	jmp	0x2878	; 0x2878 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 20 14 	jmp	0x2840	; 0x2840 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__ltsf2+0x56>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__ltsf2+0x56>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__ltsf2+0x58>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 3c 14 	jmp	0x2878	; 0x2878 <__epilogue_restores__+0x18>

000008aa <__floatsisf>:
     8aa:	a8 e0       	ldi	r26, 0x08	; 8
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 1d 14 	jmp	0x283a	; 0x283a <__prologue_saves__+0x12>
     8b6:	9b 01       	movw	r18, r22
     8b8:	ac 01       	movw	r20, r24
     8ba:	83 e0       	ldi	r24, 0x03	; 3
     8bc:	89 83       	std	Y+1, r24	; 0x01
     8be:	da 01       	movw	r26, r20
     8c0:	c9 01       	movw	r24, r18
     8c2:	88 27       	eor	r24, r24
     8c4:	b7 fd       	sbrc	r27, 7
     8c6:	83 95       	inc	r24
     8c8:	99 27       	eor	r25, r25
     8ca:	aa 27       	eor	r26, r26
     8cc:	bb 27       	eor	r27, r27
     8ce:	b8 2e       	mov	r11, r24
     8d0:	21 15       	cp	r18, r1
     8d2:	31 05       	cpc	r19, r1
     8d4:	41 05       	cpc	r20, r1
     8d6:	51 05       	cpc	r21, r1
     8d8:	19 f4       	brne	.+6      	; 0x8e0 <__floatsisf+0x36>
     8da:	82 e0       	ldi	r24, 0x02	; 2
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	3a c0       	rjmp	.+116    	; 0x954 <__floatsisf+0xaa>
     8e0:	88 23       	and	r24, r24
     8e2:	a9 f0       	breq	.+42     	; 0x90e <__floatsisf+0x64>
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	80 e0       	ldi	r24, 0x00	; 0
     8e8:	38 07       	cpc	r19, r24
     8ea:	80 e0       	ldi	r24, 0x00	; 0
     8ec:	48 07       	cpc	r20, r24
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	58 07       	cpc	r21, r24
     8f2:	29 f4       	brne	.+10     	; 0x8fe <__floatsisf+0x54>
     8f4:	60 e0       	ldi	r22, 0x00	; 0
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	80 e0       	ldi	r24, 0x00	; 0
     8fa:	9f ec       	ldi	r25, 0xCF	; 207
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__floatsisf+0xb4>
     8fe:	ee 24       	eor	r14, r14
     900:	ff 24       	eor	r15, r15
     902:	87 01       	movw	r16, r14
     904:	e2 1a       	sub	r14, r18
     906:	f3 0a       	sbc	r15, r19
     908:	04 0b       	sbc	r16, r20
     90a:	15 0b       	sbc	r17, r21
     90c:	02 c0       	rjmp	.+4      	; 0x912 <__floatsisf+0x68>
     90e:	79 01       	movw	r14, r18
     910:	8a 01       	movw	r16, r20
     912:	8e e1       	ldi	r24, 0x1E	; 30
     914:	c8 2e       	mov	r12, r24
     916:	d1 2c       	mov	r13, r1
     918:	dc 82       	std	Y+4, r13	; 0x04
     91a:	cb 82       	std	Y+3, r12	; 0x03
     91c:	ed 82       	std	Y+5, r14	; 0x05
     91e:	fe 82       	std	Y+6, r15	; 0x06
     920:	0f 83       	std	Y+7, r16	; 0x07
     922:	18 87       	std	Y+8, r17	; 0x08
     924:	c8 01       	movw	r24, r16
     926:	b7 01       	movw	r22, r14
     928:	0e 94 07 05 	call	0xa0e	; 0xa0e <__clzsi2>
     92c:	01 97       	sbiw	r24, 0x01	; 1
     92e:	18 16       	cp	r1, r24
     930:	19 06       	cpc	r1, r25
     932:	84 f4       	brge	.+32     	; 0x954 <__floatsisf+0xaa>
     934:	08 2e       	mov	r0, r24
     936:	04 c0       	rjmp	.+8      	; 0x940 <__floatsisf+0x96>
     938:	ee 0c       	add	r14, r14
     93a:	ff 1c       	adc	r15, r15
     93c:	00 1f       	adc	r16, r16
     93e:	11 1f       	adc	r17, r17
     940:	0a 94       	dec	r0
     942:	d2 f7       	brpl	.-12     	; 0x938 <__floatsisf+0x8e>
     944:	ed 82       	std	Y+5, r14	; 0x05
     946:	fe 82       	std	Y+6, r15	; 0x06
     948:	0f 83       	std	Y+7, r16	; 0x07
     94a:	18 87       	std	Y+8, r17	; 0x08
     94c:	c8 1a       	sub	r12, r24
     94e:	d9 0a       	sbc	r13, r25
     950:	dc 82       	std	Y+4, r13	; 0x04
     952:	cb 82       	std	Y+3, r12	; 0x03
     954:	ba 82       	std	Y+2, r11	; 0x02
     956:	ce 01       	movw	r24, r28
     958:	01 96       	adiw	r24, 0x01	; 1
     95a:	0e 94 56 05 	call	0xaac	; 0xaac <__pack_f>
     95e:	28 96       	adiw	r28, 0x08	; 8
     960:	e9 e0       	ldi	r30, 0x09	; 9
     962:	0c 94 39 14 	jmp	0x2872	; 0x2872 <__epilogue_restores__+0x12>

00000966 <__fixsfsi>:
     966:	ac e0       	ldi	r26, 0x0C	; 12
     968:	b0 e0       	ldi	r27, 0x00	; 0
     96a:	e9 eb       	ldi	r30, 0xB9	; 185
     96c:	f4 e0       	ldi	r31, 0x04	; 4
     96e:	0c 94 24 14 	jmp	0x2848	; 0x2848 <__prologue_saves__+0x20>
     972:	69 83       	std	Y+1, r22	; 0x01
     974:	7a 83       	std	Y+2, r23	; 0x02
     976:	8b 83       	std	Y+3, r24	; 0x03
     978:	9c 83       	std	Y+4, r25	; 0x04
     97a:	ce 01       	movw	r24, r28
     97c:	01 96       	adiw	r24, 0x01	; 1
     97e:	be 01       	movw	r22, r28
     980:	6b 5f       	subi	r22, 0xFB	; 251
     982:	7f 4f       	sbci	r23, 0xFF	; 255
     984:	0e 94 2b 06 	call	0xc56	; 0xc56 <__unpack_f>
     988:	8d 81       	ldd	r24, Y+5	; 0x05
     98a:	82 30       	cpi	r24, 0x02	; 2
     98c:	61 f1       	breq	.+88     	; 0x9e6 <__fixsfsi+0x80>
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	50 f1       	brcs	.+84     	; 0x9e6 <__fixsfsi+0x80>
     992:	84 30       	cpi	r24, 0x04	; 4
     994:	21 f4       	brne	.+8      	; 0x99e <__fixsfsi+0x38>
     996:	8e 81       	ldd	r24, Y+6	; 0x06
     998:	88 23       	and	r24, r24
     99a:	51 f1       	breq	.+84     	; 0x9f0 <__fixsfsi+0x8a>
     99c:	2e c0       	rjmp	.+92     	; 0x9fa <__fixsfsi+0x94>
     99e:	2f 81       	ldd	r18, Y+7	; 0x07
     9a0:	38 85       	ldd	r19, Y+8	; 0x08
     9a2:	37 fd       	sbrc	r19, 7
     9a4:	20 c0       	rjmp	.+64     	; 0x9e6 <__fixsfsi+0x80>
     9a6:	6e 81       	ldd	r22, Y+6	; 0x06
     9a8:	2f 31       	cpi	r18, 0x1F	; 31
     9aa:	31 05       	cpc	r19, r1
     9ac:	1c f0       	brlt	.+6      	; 0x9b4 <__fixsfsi+0x4e>
     9ae:	66 23       	and	r22, r22
     9b0:	f9 f0       	breq	.+62     	; 0x9f0 <__fixsfsi+0x8a>
     9b2:	23 c0       	rjmp	.+70     	; 0x9fa <__fixsfsi+0x94>
     9b4:	8e e1       	ldi	r24, 0x1E	; 30
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	82 1b       	sub	r24, r18
     9ba:	93 0b       	sbc	r25, r19
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	4b 85       	ldd	r20, Y+11	; 0x0b
     9c2:	5c 85       	ldd	r21, Y+12	; 0x0c
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__fixsfsi+0x68>
     9c6:	56 95       	lsr	r21
     9c8:	47 95       	ror	r20
     9ca:	37 95       	ror	r19
     9cc:	27 95       	ror	r18
     9ce:	8a 95       	dec	r24
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__fixsfsi+0x60>
     9d2:	66 23       	and	r22, r22
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <__fixsfsi+0x9c>
     9d6:	50 95       	com	r21
     9d8:	40 95       	com	r20
     9da:	30 95       	com	r19
     9dc:	21 95       	neg	r18
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	4f 4f       	sbci	r20, 0xFF	; 255
     9e2:	5f 4f       	sbci	r21, 0xFF	; 255
     9e4:	0e c0       	rjmp	.+28     	; 0xa02 <__fixsfsi+0x9c>
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	40 e0       	ldi	r20, 0x00	; 0
     9ec:	50 e0       	ldi	r21, 0x00	; 0
     9ee:	09 c0       	rjmp	.+18     	; 0xa02 <__fixsfsi+0x9c>
     9f0:	2f ef       	ldi	r18, 0xFF	; 255
     9f2:	3f ef       	ldi	r19, 0xFF	; 255
     9f4:	4f ef       	ldi	r20, 0xFF	; 255
     9f6:	5f e7       	ldi	r21, 0x7F	; 127
     9f8:	04 c0       	rjmp	.+8      	; 0xa02 <__fixsfsi+0x9c>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 e0       	ldi	r20, 0x00	; 0
     a00:	50 e8       	ldi	r21, 0x80	; 128
     a02:	b9 01       	movw	r22, r18
     a04:	ca 01       	movw	r24, r20
     a06:	2c 96       	adiw	r28, 0x0c	; 12
     a08:	e2 e0       	ldi	r30, 0x02	; 2
     a0a:	0c 94 40 14 	jmp	0x2880	; 0x2880 <__epilogue_restores__+0x20>

00000a0e <__clzsi2>:
     a0e:	ef 92       	push	r14
     a10:	ff 92       	push	r15
     a12:	0f 93       	push	r16
     a14:	1f 93       	push	r17
     a16:	7b 01       	movw	r14, r22
     a18:	8c 01       	movw	r16, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	e8 16       	cp	r14, r24
     a1e:	80 e0       	ldi	r24, 0x00	; 0
     a20:	f8 06       	cpc	r15, r24
     a22:	81 e0       	ldi	r24, 0x01	; 1
     a24:	08 07       	cpc	r16, r24
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	18 07       	cpc	r17, r24
     a2a:	88 f4       	brcc	.+34     	; 0xa4e <__clzsi2+0x40>
     a2c:	8f ef       	ldi	r24, 0xFF	; 255
     a2e:	e8 16       	cp	r14, r24
     a30:	f1 04       	cpc	r15, r1
     a32:	01 05       	cpc	r16, r1
     a34:	11 05       	cpc	r17, r1
     a36:	31 f0       	breq	.+12     	; 0xa44 <__clzsi2+0x36>
     a38:	28 f0       	brcs	.+10     	; 0xa44 <__clzsi2+0x36>
     a3a:	88 e0       	ldi	r24, 0x08	; 8
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	a0 e0       	ldi	r26, 0x00	; 0
     a40:	b0 e0       	ldi	r27, 0x00	; 0
     a42:	17 c0       	rjmp	.+46     	; 0xa72 <__clzsi2+0x64>
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	a0 e0       	ldi	r26, 0x00	; 0
     a4a:	b0 e0       	ldi	r27, 0x00	; 0
     a4c:	12 c0       	rjmp	.+36     	; 0xa72 <__clzsi2+0x64>
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	e8 16       	cp	r14, r24
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	f8 06       	cpc	r15, r24
     a56:	80 e0       	ldi	r24, 0x00	; 0
     a58:	08 07       	cpc	r16, r24
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	18 07       	cpc	r17, r24
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x5c>
     a60:	88 e1       	ldi	r24, 0x18	; 24
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	04 c0       	rjmp	.+8      	; 0xa72 <__clzsi2+0x64>
     a6a:	80 e1       	ldi	r24, 0x10	; 16
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	20 e2       	ldi	r18, 0x20	; 32
     a74:	30 e0       	ldi	r19, 0x00	; 0
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	50 e0       	ldi	r21, 0x00	; 0
     a7a:	28 1b       	sub	r18, r24
     a7c:	39 0b       	sbc	r19, r25
     a7e:	4a 0b       	sbc	r20, r26
     a80:	5b 0b       	sbc	r21, r27
     a82:	04 c0       	rjmp	.+8      	; 0xa8c <__clzsi2+0x7e>
     a84:	16 95       	lsr	r17
     a86:	07 95       	ror	r16
     a88:	f7 94       	ror	r15
     a8a:	e7 94       	ror	r14
     a8c:	8a 95       	dec	r24
     a8e:	d2 f7       	brpl	.-12     	; 0xa84 <__clzsi2+0x76>
     a90:	f7 01       	movw	r30, r14
     a92:	e8 59       	subi	r30, 0x98	; 152
     a94:	ff 4f       	sbci	r31, 0xFF	; 255
     a96:	80 81       	ld	r24, Z
     a98:	28 1b       	sub	r18, r24
     a9a:	31 09       	sbc	r19, r1
     a9c:	41 09       	sbc	r20, r1
     a9e:	51 09       	sbc	r21, r1
     aa0:	c9 01       	movw	r24, r18
     aa2:	1f 91       	pop	r17
     aa4:	0f 91       	pop	r16
     aa6:	ff 90       	pop	r15
     aa8:	ef 90       	pop	r14
     aaa:	08 95       	ret

00000aac <__pack_f>:
     aac:	df 92       	push	r13
     aae:	ef 92       	push	r14
     ab0:	ff 92       	push	r15
     ab2:	0f 93       	push	r16
     ab4:	1f 93       	push	r17
     ab6:	fc 01       	movw	r30, r24
     ab8:	e4 80       	ldd	r14, Z+4	; 0x04
     aba:	f5 80       	ldd	r15, Z+5	; 0x05
     abc:	06 81       	ldd	r16, Z+6	; 0x06
     abe:	17 81       	ldd	r17, Z+7	; 0x07
     ac0:	d1 80       	ldd	r13, Z+1	; 0x01
     ac2:	80 81       	ld	r24, Z
     ac4:	82 30       	cpi	r24, 0x02	; 2
     ac6:	48 f4       	brcc	.+18     	; 0xada <__pack_f+0x2e>
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	a0 e1       	ldi	r26, 0x10	; 16
     ace:	b0 e0       	ldi	r27, 0x00	; 0
     ad0:	e8 2a       	or	r14, r24
     ad2:	f9 2a       	or	r15, r25
     ad4:	0a 2b       	or	r16, r26
     ad6:	1b 2b       	or	r17, r27
     ad8:	a5 c0       	rjmp	.+330    	; 0xc24 <__pack_f+0x178>
     ada:	84 30       	cpi	r24, 0x04	; 4
     adc:	09 f4       	brne	.+2      	; 0xae0 <__pack_f+0x34>
     ade:	9f c0       	rjmp	.+318    	; 0xc1e <__pack_f+0x172>
     ae0:	82 30       	cpi	r24, 0x02	; 2
     ae2:	21 f4       	brne	.+8      	; 0xaec <__pack_f+0x40>
     ae4:	ee 24       	eor	r14, r14
     ae6:	ff 24       	eor	r15, r15
     ae8:	87 01       	movw	r16, r14
     aea:	05 c0       	rjmp	.+10     	; 0xaf6 <__pack_f+0x4a>
     aec:	e1 14       	cp	r14, r1
     aee:	f1 04       	cpc	r15, r1
     af0:	01 05       	cpc	r16, r1
     af2:	11 05       	cpc	r17, r1
     af4:	19 f4       	brne	.+6      	; 0xafc <__pack_f+0x50>
     af6:	e0 e0       	ldi	r30, 0x00	; 0
     af8:	f0 e0       	ldi	r31, 0x00	; 0
     afa:	96 c0       	rjmp	.+300    	; 0xc28 <__pack_f+0x17c>
     afc:	62 81       	ldd	r22, Z+2	; 0x02
     afe:	73 81       	ldd	r23, Z+3	; 0x03
     b00:	9f ef       	ldi	r25, 0xFF	; 255
     b02:	62 38       	cpi	r22, 0x82	; 130
     b04:	79 07       	cpc	r23, r25
     b06:	0c f0       	brlt	.+2      	; 0xb0a <__pack_f+0x5e>
     b08:	5b c0       	rjmp	.+182    	; 0xbc0 <__pack_f+0x114>
     b0a:	22 e8       	ldi	r18, 0x82	; 130
     b0c:	3f ef       	ldi	r19, 0xFF	; 255
     b0e:	26 1b       	sub	r18, r22
     b10:	37 0b       	sbc	r19, r23
     b12:	2a 31       	cpi	r18, 0x1A	; 26
     b14:	31 05       	cpc	r19, r1
     b16:	2c f0       	brlt	.+10     	; 0xb22 <__pack_f+0x76>
     b18:	20 e0       	ldi	r18, 0x00	; 0
     b1a:	30 e0       	ldi	r19, 0x00	; 0
     b1c:	40 e0       	ldi	r20, 0x00	; 0
     b1e:	50 e0       	ldi	r21, 0x00	; 0
     b20:	2a c0       	rjmp	.+84     	; 0xb76 <__pack_f+0xca>
     b22:	b8 01       	movw	r22, r16
     b24:	a7 01       	movw	r20, r14
     b26:	02 2e       	mov	r0, r18
     b28:	04 c0       	rjmp	.+8      	; 0xb32 <__pack_f+0x86>
     b2a:	76 95       	lsr	r23
     b2c:	67 95       	ror	r22
     b2e:	57 95       	ror	r21
     b30:	47 95       	ror	r20
     b32:	0a 94       	dec	r0
     b34:	d2 f7       	brpl	.-12     	; 0xb2a <__pack_f+0x7e>
     b36:	81 e0       	ldi	r24, 0x01	; 1
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	a0 e0       	ldi	r26, 0x00	; 0
     b3c:	b0 e0       	ldi	r27, 0x00	; 0
     b3e:	04 c0       	rjmp	.+8      	; 0xb48 <__pack_f+0x9c>
     b40:	88 0f       	add	r24, r24
     b42:	99 1f       	adc	r25, r25
     b44:	aa 1f       	adc	r26, r26
     b46:	bb 1f       	adc	r27, r27
     b48:	2a 95       	dec	r18
     b4a:	d2 f7       	brpl	.-12     	; 0xb40 <__pack_f+0x94>
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	a1 09       	sbc	r26, r1
     b50:	b1 09       	sbc	r27, r1
     b52:	8e 21       	and	r24, r14
     b54:	9f 21       	and	r25, r15
     b56:	a0 23       	and	r26, r16
     b58:	b1 23       	and	r27, r17
     b5a:	00 97       	sbiw	r24, 0x00	; 0
     b5c:	a1 05       	cpc	r26, r1
     b5e:	b1 05       	cpc	r27, r1
     b60:	21 f0       	breq	.+8      	; 0xb6a <__pack_f+0xbe>
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	a0 e0       	ldi	r26, 0x00	; 0
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	9a 01       	movw	r18, r20
     b6c:	ab 01       	movw	r20, r22
     b6e:	28 2b       	or	r18, r24
     b70:	39 2b       	or	r19, r25
     b72:	4a 2b       	or	r20, r26
     b74:	5b 2b       	or	r21, r27
     b76:	da 01       	movw	r26, r20
     b78:	c9 01       	movw	r24, r18
     b7a:	8f 77       	andi	r24, 0x7F	; 127
     b7c:	90 70       	andi	r25, 0x00	; 0
     b7e:	a0 70       	andi	r26, 0x00	; 0
     b80:	b0 70       	andi	r27, 0x00	; 0
     b82:	80 34       	cpi	r24, 0x40	; 64
     b84:	91 05       	cpc	r25, r1
     b86:	a1 05       	cpc	r26, r1
     b88:	b1 05       	cpc	r27, r1
     b8a:	39 f4       	brne	.+14     	; 0xb9a <__pack_f+0xee>
     b8c:	27 ff       	sbrs	r18, 7
     b8e:	09 c0       	rjmp	.+18     	; 0xba2 <__pack_f+0xf6>
     b90:	20 5c       	subi	r18, 0xC0	; 192
     b92:	3f 4f       	sbci	r19, 0xFF	; 255
     b94:	4f 4f       	sbci	r20, 0xFF	; 255
     b96:	5f 4f       	sbci	r21, 0xFF	; 255
     b98:	04 c0       	rjmp	.+8      	; 0xba2 <__pack_f+0xf6>
     b9a:	21 5c       	subi	r18, 0xC1	; 193
     b9c:	3f 4f       	sbci	r19, 0xFF	; 255
     b9e:	4f 4f       	sbci	r20, 0xFF	; 255
     ba0:	5f 4f       	sbci	r21, 0xFF	; 255
     ba2:	e0 e0       	ldi	r30, 0x00	; 0
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	20 30       	cpi	r18, 0x00	; 0
     ba8:	a0 e0       	ldi	r26, 0x00	; 0
     baa:	3a 07       	cpc	r19, r26
     bac:	a0 e0       	ldi	r26, 0x00	; 0
     bae:	4a 07       	cpc	r20, r26
     bb0:	a0 e4       	ldi	r26, 0x40	; 64
     bb2:	5a 07       	cpc	r21, r26
     bb4:	10 f0       	brcs	.+4      	; 0xbba <__pack_f+0x10e>
     bb6:	e1 e0       	ldi	r30, 0x01	; 1
     bb8:	f0 e0       	ldi	r31, 0x00	; 0
     bba:	79 01       	movw	r14, r18
     bbc:	8a 01       	movw	r16, r20
     bbe:	27 c0       	rjmp	.+78     	; 0xc0e <__pack_f+0x162>
     bc0:	60 38       	cpi	r22, 0x80	; 128
     bc2:	71 05       	cpc	r23, r1
     bc4:	64 f5       	brge	.+88     	; 0xc1e <__pack_f+0x172>
     bc6:	fb 01       	movw	r30, r22
     bc8:	e1 58       	subi	r30, 0x81	; 129
     bca:	ff 4f       	sbci	r31, 0xFF	; 255
     bcc:	d8 01       	movw	r26, r16
     bce:	c7 01       	movw	r24, r14
     bd0:	8f 77       	andi	r24, 0x7F	; 127
     bd2:	90 70       	andi	r25, 0x00	; 0
     bd4:	a0 70       	andi	r26, 0x00	; 0
     bd6:	b0 70       	andi	r27, 0x00	; 0
     bd8:	80 34       	cpi	r24, 0x40	; 64
     bda:	91 05       	cpc	r25, r1
     bdc:	a1 05       	cpc	r26, r1
     bde:	b1 05       	cpc	r27, r1
     be0:	39 f4       	brne	.+14     	; 0xbf0 <__pack_f+0x144>
     be2:	e7 fe       	sbrs	r14, 7
     be4:	0d c0       	rjmp	.+26     	; 0xc00 <__pack_f+0x154>
     be6:	80 e4       	ldi	r24, 0x40	; 64
     be8:	90 e0       	ldi	r25, 0x00	; 0
     bea:	a0 e0       	ldi	r26, 0x00	; 0
     bec:	b0 e0       	ldi	r27, 0x00	; 0
     bee:	04 c0       	rjmp	.+8      	; 0xbf8 <__pack_f+0x14c>
     bf0:	8f e3       	ldi	r24, 0x3F	; 63
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	a0 e0       	ldi	r26, 0x00	; 0
     bf6:	b0 e0       	ldi	r27, 0x00	; 0
     bf8:	e8 0e       	add	r14, r24
     bfa:	f9 1e       	adc	r15, r25
     bfc:	0a 1f       	adc	r16, r26
     bfe:	1b 1f       	adc	r17, r27
     c00:	17 ff       	sbrs	r17, 7
     c02:	05 c0       	rjmp	.+10     	; 0xc0e <__pack_f+0x162>
     c04:	16 95       	lsr	r17
     c06:	07 95       	ror	r16
     c08:	f7 94       	ror	r15
     c0a:	e7 94       	ror	r14
     c0c:	31 96       	adiw	r30, 0x01	; 1
     c0e:	87 e0       	ldi	r24, 0x07	; 7
     c10:	16 95       	lsr	r17
     c12:	07 95       	ror	r16
     c14:	f7 94       	ror	r15
     c16:	e7 94       	ror	r14
     c18:	8a 95       	dec	r24
     c1a:	d1 f7       	brne	.-12     	; 0xc10 <__pack_f+0x164>
     c1c:	05 c0       	rjmp	.+10     	; 0xc28 <__pack_f+0x17c>
     c1e:	ee 24       	eor	r14, r14
     c20:	ff 24       	eor	r15, r15
     c22:	87 01       	movw	r16, r14
     c24:	ef ef       	ldi	r30, 0xFF	; 255
     c26:	f0 e0       	ldi	r31, 0x00	; 0
     c28:	6e 2f       	mov	r22, r30
     c2a:	67 95       	ror	r22
     c2c:	66 27       	eor	r22, r22
     c2e:	67 95       	ror	r22
     c30:	90 2f       	mov	r25, r16
     c32:	9f 77       	andi	r25, 0x7F	; 127
     c34:	d7 94       	ror	r13
     c36:	dd 24       	eor	r13, r13
     c38:	d7 94       	ror	r13
     c3a:	8e 2f       	mov	r24, r30
     c3c:	86 95       	lsr	r24
     c3e:	49 2f       	mov	r20, r25
     c40:	46 2b       	or	r20, r22
     c42:	58 2f       	mov	r21, r24
     c44:	5d 29       	or	r21, r13
     c46:	b7 01       	movw	r22, r14
     c48:	ca 01       	movw	r24, r20
     c4a:	1f 91       	pop	r17
     c4c:	0f 91       	pop	r16
     c4e:	ff 90       	pop	r15
     c50:	ef 90       	pop	r14
     c52:	df 90       	pop	r13
     c54:	08 95       	ret

00000c56 <__unpack_f>:
     c56:	fc 01       	movw	r30, r24
     c58:	db 01       	movw	r26, r22
     c5a:	40 81       	ld	r20, Z
     c5c:	51 81       	ldd	r21, Z+1	; 0x01
     c5e:	22 81       	ldd	r18, Z+2	; 0x02
     c60:	62 2f       	mov	r22, r18
     c62:	6f 77       	andi	r22, 0x7F	; 127
     c64:	70 e0       	ldi	r23, 0x00	; 0
     c66:	22 1f       	adc	r18, r18
     c68:	22 27       	eor	r18, r18
     c6a:	22 1f       	adc	r18, r18
     c6c:	93 81       	ldd	r25, Z+3	; 0x03
     c6e:	89 2f       	mov	r24, r25
     c70:	88 0f       	add	r24, r24
     c72:	82 2b       	or	r24, r18
     c74:	28 2f       	mov	r18, r24
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	99 1f       	adc	r25, r25
     c7a:	99 27       	eor	r25, r25
     c7c:	99 1f       	adc	r25, r25
     c7e:	11 96       	adiw	r26, 0x01	; 1
     c80:	9c 93       	st	X, r25
     c82:	11 97       	sbiw	r26, 0x01	; 1
     c84:	21 15       	cp	r18, r1
     c86:	31 05       	cpc	r19, r1
     c88:	a9 f5       	brne	.+106    	; 0xcf4 <__unpack_f+0x9e>
     c8a:	41 15       	cp	r20, r1
     c8c:	51 05       	cpc	r21, r1
     c8e:	61 05       	cpc	r22, r1
     c90:	71 05       	cpc	r23, r1
     c92:	11 f4       	brne	.+4      	; 0xc98 <__unpack_f+0x42>
     c94:	82 e0       	ldi	r24, 0x02	; 2
     c96:	37 c0       	rjmp	.+110    	; 0xd06 <__unpack_f+0xb0>
     c98:	82 e8       	ldi	r24, 0x82	; 130
     c9a:	9f ef       	ldi	r25, 0xFF	; 255
     c9c:	13 96       	adiw	r26, 0x03	; 3
     c9e:	9c 93       	st	X, r25
     ca0:	8e 93       	st	-X, r24
     ca2:	12 97       	sbiw	r26, 0x02	; 2
     ca4:	9a 01       	movw	r18, r20
     ca6:	ab 01       	movw	r20, r22
     ca8:	67 e0       	ldi	r22, 0x07	; 7
     caa:	22 0f       	add	r18, r18
     cac:	33 1f       	adc	r19, r19
     cae:	44 1f       	adc	r20, r20
     cb0:	55 1f       	adc	r21, r21
     cb2:	6a 95       	dec	r22
     cb4:	d1 f7       	brne	.-12     	; 0xcaa <__unpack_f+0x54>
     cb6:	83 e0       	ldi	r24, 0x03	; 3
     cb8:	8c 93       	st	X, r24
     cba:	0d c0       	rjmp	.+26     	; 0xcd6 <__unpack_f+0x80>
     cbc:	22 0f       	add	r18, r18
     cbe:	33 1f       	adc	r19, r19
     cc0:	44 1f       	adc	r20, r20
     cc2:	55 1f       	adc	r21, r21
     cc4:	12 96       	adiw	r26, 0x02	; 2
     cc6:	8d 91       	ld	r24, X+
     cc8:	9c 91       	ld	r25, X
     cca:	13 97       	sbiw	r26, 0x03	; 3
     ccc:	01 97       	sbiw	r24, 0x01	; 1
     cce:	13 96       	adiw	r26, 0x03	; 3
     cd0:	9c 93       	st	X, r25
     cd2:	8e 93       	st	-X, r24
     cd4:	12 97       	sbiw	r26, 0x02	; 2
     cd6:	20 30       	cpi	r18, 0x00	; 0
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	38 07       	cpc	r19, r24
     cdc:	80 e0       	ldi	r24, 0x00	; 0
     cde:	48 07       	cpc	r20, r24
     ce0:	80 e4       	ldi	r24, 0x40	; 64
     ce2:	58 07       	cpc	r21, r24
     ce4:	58 f3       	brcs	.-42     	; 0xcbc <__unpack_f+0x66>
     ce6:	14 96       	adiw	r26, 0x04	; 4
     ce8:	2d 93       	st	X+, r18
     cea:	3d 93       	st	X+, r19
     cec:	4d 93       	st	X+, r20
     cee:	5c 93       	st	X, r21
     cf0:	17 97       	sbiw	r26, 0x07	; 7
     cf2:	08 95       	ret
     cf4:	2f 3f       	cpi	r18, 0xFF	; 255
     cf6:	31 05       	cpc	r19, r1
     cf8:	79 f4       	brne	.+30     	; 0xd18 <__unpack_f+0xc2>
     cfa:	41 15       	cp	r20, r1
     cfc:	51 05       	cpc	r21, r1
     cfe:	61 05       	cpc	r22, r1
     d00:	71 05       	cpc	r23, r1
     d02:	19 f4       	brne	.+6      	; 0xd0a <__unpack_f+0xb4>
     d04:	84 e0       	ldi	r24, 0x04	; 4
     d06:	8c 93       	st	X, r24
     d08:	08 95       	ret
     d0a:	64 ff       	sbrs	r22, 4
     d0c:	03 c0       	rjmp	.+6      	; 0xd14 <__unpack_f+0xbe>
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	8c 93       	st	X, r24
     d12:	12 c0       	rjmp	.+36     	; 0xd38 <__unpack_f+0xe2>
     d14:	1c 92       	st	X, r1
     d16:	10 c0       	rjmp	.+32     	; 0xd38 <__unpack_f+0xe2>
     d18:	2f 57       	subi	r18, 0x7F	; 127
     d1a:	30 40       	sbci	r19, 0x00	; 0
     d1c:	13 96       	adiw	r26, 0x03	; 3
     d1e:	3c 93       	st	X, r19
     d20:	2e 93       	st	-X, r18
     d22:	12 97       	sbiw	r26, 0x02	; 2
     d24:	83 e0       	ldi	r24, 0x03	; 3
     d26:	8c 93       	st	X, r24
     d28:	87 e0       	ldi	r24, 0x07	; 7
     d2a:	44 0f       	add	r20, r20
     d2c:	55 1f       	adc	r21, r21
     d2e:	66 1f       	adc	r22, r22
     d30:	77 1f       	adc	r23, r23
     d32:	8a 95       	dec	r24
     d34:	d1 f7       	brne	.-12     	; 0xd2a <__unpack_f+0xd4>
     d36:	70 64       	ori	r23, 0x40	; 64
     d38:	14 96       	adiw	r26, 0x04	; 4
     d3a:	4d 93       	st	X+, r20
     d3c:	5d 93       	st	X+, r21
     d3e:	6d 93       	st	X+, r22
     d40:	7c 93       	st	X, r23
     d42:	17 97       	sbiw	r26, 0x07	; 7
     d44:	08 95       	ret

00000d46 <__fpcmp_parts_f>:
     d46:	1f 93       	push	r17
     d48:	dc 01       	movw	r26, r24
     d4a:	fb 01       	movw	r30, r22
     d4c:	9c 91       	ld	r25, X
     d4e:	92 30       	cpi	r25, 0x02	; 2
     d50:	08 f4       	brcc	.+2      	; 0xd54 <__fpcmp_parts_f+0xe>
     d52:	47 c0       	rjmp	.+142    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d54:	80 81       	ld	r24, Z
     d56:	82 30       	cpi	r24, 0x02	; 2
     d58:	08 f4       	brcc	.+2      	; 0xd5c <__fpcmp_parts_f+0x16>
     d5a:	43 c0       	rjmp	.+134    	; 0xde2 <__fpcmp_parts_f+0x9c>
     d5c:	94 30       	cpi	r25, 0x04	; 4
     d5e:	51 f4       	brne	.+20     	; 0xd74 <__fpcmp_parts_f+0x2e>
     d60:	11 96       	adiw	r26, 0x01	; 1
     d62:	1c 91       	ld	r17, X
     d64:	84 30       	cpi	r24, 0x04	; 4
     d66:	99 f5       	brne	.+102    	; 0xdce <__fpcmp_parts_f+0x88>
     d68:	81 81       	ldd	r24, Z+1	; 0x01
     d6a:	68 2f       	mov	r22, r24
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	61 1b       	sub	r22, r17
     d70:	71 09       	sbc	r23, r1
     d72:	3f c0       	rjmp	.+126    	; 0xdf2 <__fpcmp_parts_f+0xac>
     d74:	84 30       	cpi	r24, 0x04	; 4
     d76:	21 f0       	breq	.+8      	; 0xd80 <__fpcmp_parts_f+0x3a>
     d78:	92 30       	cpi	r25, 0x02	; 2
     d7a:	31 f4       	brne	.+12     	; 0xd88 <__fpcmp_parts_f+0x42>
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	b9 f1       	breq	.+110    	; 0xdee <__fpcmp_parts_f+0xa8>
     d80:	81 81       	ldd	r24, Z+1	; 0x01
     d82:	88 23       	and	r24, r24
     d84:	89 f1       	breq	.+98     	; 0xde8 <__fpcmp_parts_f+0xa2>
     d86:	2d c0       	rjmp	.+90     	; 0xde2 <__fpcmp_parts_f+0x9c>
     d88:	11 96       	adiw	r26, 0x01	; 1
     d8a:	1c 91       	ld	r17, X
     d8c:	11 97       	sbiw	r26, 0x01	; 1
     d8e:	82 30       	cpi	r24, 0x02	; 2
     d90:	f1 f0       	breq	.+60     	; 0xdce <__fpcmp_parts_f+0x88>
     d92:	81 81       	ldd	r24, Z+1	; 0x01
     d94:	18 17       	cp	r17, r24
     d96:	d9 f4       	brne	.+54     	; 0xdce <__fpcmp_parts_f+0x88>
     d98:	12 96       	adiw	r26, 0x02	; 2
     d9a:	2d 91       	ld	r18, X+
     d9c:	3c 91       	ld	r19, X
     d9e:	13 97       	sbiw	r26, 0x03	; 3
     da0:	82 81       	ldd	r24, Z+2	; 0x02
     da2:	93 81       	ldd	r25, Z+3	; 0x03
     da4:	82 17       	cp	r24, r18
     da6:	93 07       	cpc	r25, r19
     da8:	94 f0       	brlt	.+36     	; 0xdce <__fpcmp_parts_f+0x88>
     daa:	28 17       	cp	r18, r24
     dac:	39 07       	cpc	r19, r25
     dae:	bc f0       	brlt	.+46     	; 0xdde <__fpcmp_parts_f+0x98>
     db0:	14 96       	adiw	r26, 0x04	; 4
     db2:	8d 91       	ld	r24, X+
     db4:	9d 91       	ld	r25, X+
     db6:	0d 90       	ld	r0, X+
     db8:	bc 91       	ld	r27, X
     dba:	a0 2d       	mov	r26, r0
     dbc:	24 81       	ldd	r18, Z+4	; 0x04
     dbe:	35 81       	ldd	r19, Z+5	; 0x05
     dc0:	46 81       	ldd	r20, Z+6	; 0x06
     dc2:	57 81       	ldd	r21, Z+7	; 0x07
     dc4:	28 17       	cp	r18, r24
     dc6:	39 07       	cpc	r19, r25
     dc8:	4a 07       	cpc	r20, r26
     dca:	5b 07       	cpc	r21, r27
     dcc:	18 f4       	brcc	.+6      	; 0xdd4 <__fpcmp_parts_f+0x8e>
     dce:	11 23       	and	r17, r17
     dd0:	41 f0       	breq	.+16     	; 0xde2 <__fpcmp_parts_f+0x9c>
     dd2:	0a c0       	rjmp	.+20     	; 0xde8 <__fpcmp_parts_f+0xa2>
     dd4:	82 17       	cp	r24, r18
     dd6:	93 07       	cpc	r25, r19
     dd8:	a4 07       	cpc	r26, r20
     dda:	b5 07       	cpc	r27, r21
     ddc:	40 f4       	brcc	.+16     	; 0xdee <__fpcmp_parts_f+0xa8>
     dde:	11 23       	and	r17, r17
     de0:	19 f0       	breq	.+6      	; 0xde8 <__fpcmp_parts_f+0xa2>
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	70 e0       	ldi	r23, 0x00	; 0
     de6:	05 c0       	rjmp	.+10     	; 0xdf2 <__fpcmp_parts_f+0xac>
     de8:	6f ef       	ldi	r22, 0xFF	; 255
     dea:	7f ef       	ldi	r23, 0xFF	; 255
     dec:	02 c0       	rjmp	.+4      	; 0xdf2 <__fpcmp_parts_f+0xac>
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	70 e0       	ldi	r23, 0x00	; 0
     df2:	cb 01       	movw	r24, r22
     df4:	1f 91       	pop	r17
     df6:	08 95       	ret

00000df8 <PIDController_Init>:
#include "PID.h"

PIDController pid = { PID_KP, PID_KI, PID_KD};

void PIDController_Init(PIDController *pid) {
     df8:	df 93       	push	r29
     dfa:	cf 93       	push	r28
     dfc:	00 d0       	rcall	.+0      	; 0xdfe <PIDController_Init+0x6>
     dfe:	cd b7       	in	r28, 0x3d	; 61
     e00:	de b7       	in	r29, 0x3e	; 62
     e02:	9a 83       	std	Y+2, r25	; 0x02
     e04:	89 83       	std	Y+1, r24	; 0x01

	/* Clear controller variables */
	pid->integrator = 0.0f;
     e06:	e9 81       	ldd	r30, Y+1	; 0x01
     e08:	fa 81       	ldd	r31, Y+2	; 0x02
     e0a:	80 e0       	ldi	r24, 0x00	; 0
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	a0 e0       	ldi	r26, 0x00	; 0
     e10:	b0 e0       	ldi	r27, 0x00	; 0
     e12:	84 87       	std	Z+12, r24	; 0x0c
     e14:	95 87       	std	Z+13, r25	; 0x0d
     e16:	a6 87       	std	Z+14, r26	; 0x0e
     e18:	b7 87       	std	Z+15, r27	; 0x0f

	pid->prevError  = 0.0f;
     e1a:	e9 81       	ldd	r30, Y+1	; 0x01
     e1c:	fa 81       	ldd	r31, Y+2	; 0x02
     e1e:	80 e0       	ldi	r24, 0x00	; 0
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	a0 e0       	ldi	r26, 0x00	; 0
     e24:	b0 e0       	ldi	r27, 0x00	; 0
     e26:	80 8b       	std	Z+16, r24	; 0x10
     e28:	91 8b       	std	Z+17, r25	; 0x11
     e2a:	a2 8b       	std	Z+18, r26	; 0x12
     e2c:	b3 8b       	std	Z+19, r27	; 0x13

	pid->differentiator  = 0.0f;
     e2e:	e9 81       	ldd	r30, Y+1	; 0x01
     e30:	fa 81       	ldd	r31, Y+2	; 0x02
     e32:	80 e0       	ldi	r24, 0x00	; 0
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	a0 e0       	ldi	r26, 0x00	; 0
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	84 8b       	std	Z+20, r24	; 0x14
     e3c:	95 8b       	std	Z+21, r25	; 0x15
     e3e:	a6 8b       	std	Z+22, r26	; 0x16
     e40:	b7 8b       	std	Z+23, r27	; 0x17

	pid->out = 0.0f;
     e42:	e9 81       	ldd	r30, Y+1	; 0x01
     e44:	fa 81       	ldd	r31, Y+2	; 0x02
     e46:	80 e0       	ldi	r24, 0x00	; 0
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	a0 e0       	ldi	r26, 0x00	; 0
     e4c:	b0 e0       	ldi	r27, 0x00	; 0
     e4e:	80 8f       	std	Z+24, r24	; 0x18
     e50:	91 8f       	std	Z+25, r25	; 0x19
     e52:	a2 8f       	std	Z+26, r26	; 0x1a
     e54:	b3 8f       	std	Z+27, r27	; 0x1b

}
     e56:	0f 90       	pop	r0
     e58:	0f 90       	pop	r0
     e5a:	cf 91       	pop	r28
     e5c:	df 91       	pop	r29
     e5e:	08 95       	ret

00000e60 <PIDController_Update>:

float PIDController_Update(PIDController *pid, float setpoint, float measurement) {
     e60:	0f 93       	push	r16
     e62:	1f 93       	push	r17
     e64:	df 93       	push	r29
     e66:	cf 93       	push	r28
     e68:	cd b7       	in	r28, 0x3d	; 61
     e6a:	de b7       	in	r29, 0x3e	; 62
     e6c:	62 97       	sbiw	r28, 0x12	; 18
     e6e:	0f b6       	in	r0, 0x3f	; 63
     e70:	f8 94       	cli
     e72:	de bf       	out	0x3e, r29	; 62
     e74:	0f be       	out	0x3f, r0	; 63
     e76:	cd bf       	out	0x3d, r28	; 61
     e78:	9a 87       	std	Y+10, r25	; 0x0a
     e7a:	89 87       	std	Y+9, r24	; 0x09
     e7c:	4b 87       	std	Y+11, r20	; 0x0b
     e7e:	5c 87       	std	Y+12, r21	; 0x0c
     e80:	6d 87       	std	Y+13, r22	; 0x0d
     e82:	7e 87       	std	Y+14, r23	; 0x0e
     e84:	0f 87       	std	Y+15, r16	; 0x0f
     e86:	18 8b       	std	Y+16, r17	; 0x10
     e88:	29 8b       	std	Y+17, r18	; 0x11
     e8a:	3a 8b       	std	Y+18, r19	; 0x12

	/*
	* Error signal
	*/
    float error = setpoint - measurement;
     e8c:	6b 85       	ldd	r22, Y+11	; 0x0b
     e8e:	7c 85       	ldd	r23, Y+12	; 0x0c
     e90:	8d 85       	ldd	r24, Y+13	; 0x0d
     e92:	9e 85       	ldd	r25, Y+14	; 0x0e
     e94:	2f 85       	ldd	r18, Y+15	; 0x0f
     e96:	38 89       	ldd	r19, Y+16	; 0x10
     e98:	49 89       	ldd	r20, Y+17	; 0x11
     e9a:	5a 89       	ldd	r21, Y+18	; 0x12
     e9c:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
     ea0:	dc 01       	movw	r26, r24
     ea2:	cb 01       	movw	r24, r22
     ea4:	8d 83       	std	Y+5, r24	; 0x05
     ea6:	9e 83       	std	Y+6, r25	; 0x06
     ea8:	af 83       	std	Y+7, r26	; 0x07
     eaa:	b8 87       	std	Y+8, r27	; 0x08


	/*
	* Proportional
	*/
    float proportional = pid->Kp * error;
     eac:	e9 85       	ldd	r30, Y+9	; 0x09
     eae:	fa 85       	ldd	r31, Y+10	; 0x0a
     eb0:	80 81       	ld	r24, Z
     eb2:	91 81       	ldd	r25, Z+1	; 0x01
     eb4:	a2 81       	ldd	r26, Z+2	; 0x02
     eb6:	b3 81       	ldd	r27, Z+3	; 0x03
     eb8:	bc 01       	movw	r22, r24
     eba:	cd 01       	movw	r24, r26
     ebc:	2d 81       	ldd	r18, Y+5	; 0x05
     ebe:	3e 81       	ldd	r19, Y+6	; 0x06
     ec0:	4f 81       	ldd	r20, Y+7	; 0x07
     ec2:	58 85       	ldd	r21, Y+8	; 0x08
     ec4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ec8:	dc 01       	movw	r26, r24
     eca:	cb 01       	movw	r24, r22
     ecc:	89 83       	std	Y+1, r24	; 0x01
     ece:	9a 83       	std	Y+2, r25	; 0x02
     ed0:	ab 83       	std	Y+3, r26	; 0x03
     ed2:	bc 83       	std	Y+4, r27	; 0x04


	/*
	* Integral
	*/
    pid->integrator = pid->integrator + error ;
     ed4:	e9 85       	ldd	r30, Y+9	; 0x09
     ed6:	fa 85       	ldd	r31, Y+10	; 0x0a
     ed8:	84 85       	ldd	r24, Z+12	; 0x0c
     eda:	95 85       	ldd	r25, Z+13	; 0x0d
     edc:	a6 85       	ldd	r26, Z+14	; 0x0e
     ede:	b7 85       	ldd	r27, Z+15	; 0x0f
     ee0:	bc 01       	movw	r22, r24
     ee2:	cd 01       	movw	r24, r26
     ee4:	2d 81       	ldd	r18, Y+5	; 0x05
     ee6:	3e 81       	ldd	r19, Y+6	; 0x06
     ee8:	4f 81       	ldd	r20, Y+7	; 0x07
     eea:	58 85       	ldd	r21, Y+8	; 0x08
     eec:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
     ef0:	dc 01       	movw	r26, r24
     ef2:	cb 01       	movw	r24, r22
     ef4:	e9 85       	ldd	r30, Y+9	; 0x09
     ef6:	fa 85       	ldd	r31, Y+10	; 0x0a
     ef8:	84 87       	std	Z+12, r24	; 0x0c
     efa:	95 87       	std	Z+13, r25	; 0x0d
     efc:	a6 87       	std	Z+14, r26	; 0x0e
     efe:	b7 87       	std	Z+15, r27	; 0x0f

	/*
	* Derivative
	*/
		
    pid->differentiator = error - pid->prevError;
     f00:	e9 85       	ldd	r30, Y+9	; 0x09
     f02:	fa 85       	ldd	r31, Y+10	; 0x0a
     f04:	20 89       	ldd	r18, Z+16	; 0x10
     f06:	31 89       	ldd	r19, Z+17	; 0x11
     f08:	42 89       	ldd	r20, Z+18	; 0x12
     f0a:	53 89       	ldd	r21, Z+19	; 0x13
     f0c:	6d 81       	ldd	r22, Y+5	; 0x05
     f0e:	7e 81       	ldd	r23, Y+6	; 0x06
     f10:	8f 81       	ldd	r24, Y+7	; 0x07
     f12:	98 85       	ldd	r25, Y+8	; 0x08
     f14:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
     f18:	dc 01       	movw	r26, r24
     f1a:	cb 01       	movw	r24, r22
     f1c:	e9 85       	ldd	r30, Y+9	; 0x09
     f1e:	fa 85       	ldd	r31, Y+10	; 0x0a
     f20:	84 8b       	std	Z+20, r24	; 0x14
     f22:	95 8b       	std	Z+21, r25	; 0x15
     f24:	a6 8b       	std	Z+22, r26	; 0x16
     f26:	b7 8b       	std	Z+23, r27	; 0x17


	/*
	* Compute output and apply limits
	*/
    pid->out = proportional + (pid->Ki*pid->integrator) + pid->differentiator;
     f28:	e9 85       	ldd	r30, Y+9	; 0x09
     f2a:	fa 85       	ldd	r31, Y+10	; 0x0a
     f2c:	84 81       	ldd	r24, Z+4	; 0x04
     f2e:	95 81       	ldd	r25, Z+5	; 0x05
     f30:	a6 81       	ldd	r26, Z+6	; 0x06
     f32:	b7 81       	ldd	r27, Z+7	; 0x07
     f34:	e9 85       	ldd	r30, Y+9	; 0x09
     f36:	fa 85       	ldd	r31, Y+10	; 0x0a
     f38:	24 85       	ldd	r18, Z+12	; 0x0c
     f3a:	35 85       	ldd	r19, Z+13	; 0x0d
     f3c:	46 85       	ldd	r20, Z+14	; 0x0e
     f3e:	57 85       	ldd	r21, Z+15	; 0x0f
     f40:	bc 01       	movw	r22, r24
     f42:	cd 01       	movw	r24, r26
     f44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f48:	dc 01       	movw	r26, r24
     f4a:	cb 01       	movw	r24, r22
     f4c:	bc 01       	movw	r22, r24
     f4e:	cd 01       	movw	r24, r26
     f50:	29 81       	ldd	r18, Y+1	; 0x01
     f52:	3a 81       	ldd	r19, Y+2	; 0x02
     f54:	4b 81       	ldd	r20, Y+3	; 0x03
     f56:	5c 81       	ldd	r21, Y+4	; 0x04
     f58:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
     f5c:	dc 01       	movw	r26, r24
     f5e:	cb 01       	movw	r24, r22
     f60:	e9 85       	ldd	r30, Y+9	; 0x09
     f62:	fa 85       	ldd	r31, Y+10	; 0x0a
     f64:	24 89       	ldd	r18, Z+20	; 0x14
     f66:	35 89       	ldd	r19, Z+21	; 0x15
     f68:	46 89       	ldd	r20, Z+22	; 0x16
     f6a:	57 89       	ldd	r21, Z+23	; 0x17
     f6c:	bc 01       	movw	r22, r24
     f6e:	cd 01       	movw	r24, r26
     f70:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
     f74:	dc 01       	movw	r26, r24
     f76:	cb 01       	movw	r24, r22
     f78:	e9 85       	ldd	r30, Y+9	; 0x09
     f7a:	fa 85       	ldd	r31, Y+10	; 0x0a
     f7c:	80 8f       	std	Z+24, r24	; 0x18
     f7e:	91 8f       	std	Z+25, r25	; 0x19
     f80:	a2 8f       	std	Z+26, r26	; 0x1a
     f82:	b3 8f       	std	Z+27, r27	; 0x1b

    
	/* Store error and measurement for later use */
    pid->prevError       = error; // update prevError
     f84:	e9 85       	ldd	r30, Y+9	; 0x09
     f86:	fa 85       	ldd	r31, Y+10	; 0x0a
     f88:	8d 81       	ldd	r24, Y+5	; 0x05
     f8a:	9e 81       	ldd	r25, Y+6	; 0x06
     f8c:	af 81       	ldd	r26, Y+7	; 0x07
     f8e:	b8 85       	ldd	r27, Y+8	; 0x08
     f90:	80 8b       	std	Z+16, r24	; 0x10
     f92:	91 8b       	std	Z+17, r25	; 0x11
     f94:	a2 8b       	std	Z+18, r26	; 0x12
     f96:	b3 8b       	std	Z+19, r27	; 0x13


	if( (pid->out/255) > PWM_MAX)
     f98:	e9 85       	ldd	r30, Y+9	; 0x09
     f9a:	fa 85       	ldd	r31, Y+10	; 0x0a
     f9c:	80 8d       	ldd	r24, Z+24	; 0x18
     f9e:	91 8d       	ldd	r25, Z+25	; 0x19
     fa0:	a2 8d       	ldd	r26, Z+26	; 0x1a
     fa2:	b3 8d       	ldd	r27, Z+27	; 0x1b
     fa4:	bc 01       	movw	r22, r24
     fa6:	cd 01       	movw	r24, r26
     fa8:	20 e0       	ldi	r18, 0x00	; 0
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	4f e7       	ldi	r20, 0x7F	; 127
     fae:	53 e4       	ldi	r21, 0x43	; 67
     fb0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     fb4:	dc 01       	movw	r26, r24
     fb6:	cb 01       	movw	r24, r22
     fb8:	bc 01       	movw	r22, r24
     fba:	cd 01       	movw	r24, r26
     fbc:	28 e4       	ldi	r18, 0x48	; 72
     fbe:	31 ee       	ldi	r19, 0xE1	; 225
     fc0:	4a e3       	ldi	r20, 0x3A	; 58
     fc2:	5f e3       	ldi	r21, 0x3F	; 63
     fc4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     fc8:	18 16       	cp	r1, r24
     fca:	5c f4       	brge	.+22     	; 0xfe2 <PIDController_Update+0x182>
	{
		pid->out = 255 * PWM_MAX;
     fcc:	e9 85       	ldd	r30, Y+9	; 0x09
     fce:	fa 85       	ldd	r31, Y+10	; 0x0a
     fd0:	87 e6       	ldi	r24, 0x67	; 103
     fd2:	96 e2       	ldi	r25, 0x26	; 38
     fd4:	aa e3       	ldi	r26, 0x3A	; 58
     fd6:	b3 e4       	ldi	r27, 0x43	; 67
     fd8:	80 8f       	std	Z+24, r24	; 0x18
     fda:	91 8f       	std	Z+25, r25	; 0x19
     fdc:	a2 8f       	std	Z+26, r26	; 0x1a
     fde:	b3 8f       	std	Z+27, r27	; 0x1b
     fe0:	24 c0       	rjmp	.+72     	; 0x102a <PIDController_Update+0x1ca>
	} 
	else if( (pid->out/255) < PWM_MIN)
     fe2:	e9 85       	ldd	r30, Y+9	; 0x09
     fe4:	fa 85       	ldd	r31, Y+10	; 0x0a
     fe6:	80 8d       	ldd	r24, Z+24	; 0x18
     fe8:	91 8d       	ldd	r25, Z+25	; 0x19
     fea:	a2 8d       	ldd	r26, Z+26	; 0x1a
     fec:	b3 8d       	ldd	r27, Z+27	; 0x1b
     fee:	bc 01       	movw	r22, r24
     ff0:	cd 01       	movw	r24, r26
     ff2:	20 e0       	ldi	r18, 0x00	; 0
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	4f e7       	ldi	r20, 0x7F	; 127
     ff8:	53 e4       	ldi	r21, 0x43	; 67
     ffa:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     ffe:	dc 01       	movw	r26, r24
    1000:	cb 01       	movw	r24, r22
    1002:	bc 01       	movw	r22, r24
    1004:	cd 01       	movw	r24, r26
    1006:	20 e0       	ldi	r18, 0x00	; 0
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	40 e0       	ldi	r20, 0x00	; 0
    100c:	50 e0       	ldi	r21, 0x00	; 0
    100e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1012:	88 23       	and	r24, r24
    1014:	54 f4       	brge	.+20     	; 0x102a <PIDController_Update+0x1ca>
	{
		pid->out = 255 * PWM_MIN;
    1016:	e9 85       	ldd	r30, Y+9	; 0x09
    1018:	fa 85       	ldd	r31, Y+10	; 0x0a
    101a:	80 e0       	ldi	r24, 0x00	; 0
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	a0 e0       	ldi	r26, 0x00	; 0
    1020:	b0 e0       	ldi	r27, 0x00	; 0
    1022:	80 8f       	std	Z+24, r24	; 0x18
    1024:	91 8f       	std	Z+25, r25	; 0x19
    1026:	a2 8f       	std	Z+26, r26	; 0x1a
    1028:	b3 8f       	std	Z+27, r27	; 0x1b
	} 

	/* Return controller output */
    return pid->out;
    102a:	e9 85       	ldd	r30, Y+9	; 0x09
    102c:	fa 85       	ldd	r31, Y+10	; 0x0a
    102e:	80 8d       	ldd	r24, Z+24	; 0x18
    1030:	91 8d       	ldd	r25, Z+25	; 0x19
    1032:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1034:	b3 8d       	ldd	r27, Z+27	; 0x1b

}
    1036:	bc 01       	movw	r22, r24
    1038:	cd 01       	movw	r24, r26
    103a:	62 96       	adiw	r28, 0x12	; 18
    103c:	0f b6       	in	r0, 0x3f	; 63
    103e:	f8 94       	cli
    1040:	de bf       	out	0x3e, r29	; 62
    1042:	0f be       	out	0x3f, r0	; 63
    1044:	cd bf       	out	0x3d, r28	; 61
    1046:	cf 91       	pop	r28
    1048:	df 91       	pop	r29
    104a:	1f 91       	pop	r17
    104c:	0f 91       	pop	r16
    104e:	08 95       	ret

00001050 <Handle_data>:
#include "lcd.h"
#include "PID.h"
#include "pwm.h"

void Handle_data(signed char data)
{
    1050:	0f 93       	push	r16
    1052:	1f 93       	push	r17
    1054:	df 93       	push	r29
    1056:	cf 93       	push	r28
    1058:	00 d0       	rcall	.+0      	; 0x105a <Handle_data+0xa>
    105a:	00 d0       	rcall	.+0      	; 0x105c <Handle_data+0xc>
    105c:	0f 92       	push	r0
    105e:	cd b7       	in	r28, 0x3d	; 61
    1060:	de b7       	in	r29, 0x3e	; 62
    1062:	8d 83       	std	Y+5, r24	; 0x05
	LCD_moveCursor(0, 0);
    1064:	80 e0       	ldi	r24, 0x00	; 0
    1066:	60 e0       	ldi	r22, 0x00	; 0
    1068:	0e 94 b4 11 	call	0x2368	; 0x2368 <LCD_moveCursor>
	if(data < 0)
    106c:	8d 81       	ldd	r24, Y+5	; 0x05
    106e:	88 23       	and	r24, r24
    1070:	9c f4       	brge	.+38     	; 0x1098 <Handle_data+0x48>
	{
		LCD_displayCharacter('-');
    1072:	8d e2       	ldi	r24, 0x2D	; 45
    1074:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <LCD_displayCharacter>
		LCD_intgerToString(-data);
    1078:	8d 81       	ldd	r24, Y+5	; 0x05
    107a:	99 27       	eor	r25, r25
    107c:	87 fd       	sbrc	r24, 7
    107e:	90 95       	com	r25
    1080:	90 95       	com	r25
    1082:	81 95       	neg	r24
    1084:	9f 4f       	sbci	r25, 0xFF	; 255
    1086:	0e 94 0f 12 	call	0x241e	; 0x241e <LCD_intgerToString>
		if(data>-10)
    108a:	8d 81       	ldd	r24, Y+5	; 0x05
    108c:	87 3f       	cpi	r24, 0xF7	; 247
    108e:	cc f0       	brlt	.+50     	; 0x10c2 <Handle_data+0x72>
		{
			LCD_displayCharacter(' ');
    1090:	80 e2       	ldi	r24, 0x20	; 32
    1092:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <LCD_displayCharacter>
    1096:	15 c0       	rjmp	.+42     	; 0x10c2 <Handle_data+0x72>
		}
	}
	else if(data >=0)
    1098:	8d 81       	ldd	r24, Y+5	; 0x05
    109a:	88 23       	and	r24, r24
    109c:	94 f0       	brlt	.+36     	; 0x10c2 <Handle_data+0x72>
	{
		LCD_intgerToString(data);
    109e:	8d 81       	ldd	r24, Y+5	; 0x05
    10a0:	99 27       	eor	r25, r25
    10a2:	87 fd       	sbrc	r24, 7
    10a4:	90 95       	com	r25
    10a6:	0e 94 0f 12 	call	0x241e	; 0x241e <LCD_intgerToString>
		if(data<10)
    10aa:	8d 81       	ldd	r24, Y+5	; 0x05
    10ac:	8a 30       	cpi	r24, 0x0A	; 10
    10ae:	1c f4       	brge	.+6      	; 0x10b6 <Handle_data+0x66>
		{
			LCD_displayCharacter(' ');
    10b0:	80 e2       	ldi	r24, 0x20	; 32
    10b2:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <LCD_displayCharacter>
		}
		if(data<100)
    10b6:	8d 81       	ldd	r24, Y+5	; 0x05
    10b8:	84 36       	cpi	r24, 0x64	; 100
    10ba:	1c f4       	brge	.+6      	; 0x10c2 <Handle_data+0x72>
		{
			LCD_displayCharacter(' ');
    10bc:	80 e2       	ldi	r24, 0x20	; 32
    10be:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <LCD_displayCharacter>
		}
	}
	float duty_cycle = PIDController_Update(&pid, SET_POINT, data);
    10c2:	8d 81       	ldd	r24, Y+5	; 0x05
    10c4:	99 27       	eor	r25, r25
    10c6:	87 fd       	sbrc	r24, 7
    10c8:	90 95       	com	r25
    10ca:	a9 2f       	mov	r26, r25
    10cc:	b9 2f       	mov	r27, r25
    10ce:	bc 01       	movw	r22, r24
    10d0:	cd 01       	movw	r24, r26
    10d2:	0e 94 55 04 	call	0x8aa	; 0x8aa <__floatsisf>
    10d6:	8b 01       	movw	r16, r22
    10d8:	9c 01       	movw	r18, r24
    10da:	88 e6       	ldi	r24, 0x68	; 104
    10dc:	91 e0       	ldi	r25, 0x01	; 1
    10de:	40 e0       	ldi	r20, 0x00	; 0
    10e0:	50 e0       	ldi	r21, 0x00	; 0
    10e2:	60 ef       	ldi	r22, 0xF0	; 240
    10e4:	71 e4       	ldi	r23, 0x41	; 65
    10e6:	0e 94 30 07 	call	0xe60	; 0xe60 <PIDController_Update>
    10ea:	dc 01       	movw	r26, r24
    10ec:	cb 01       	movw	r24, r22
    10ee:	89 83       	std	Y+1, r24	; 0x01
    10f0:	9a 83       	std	Y+2, r25	; 0x02
    10f2:	ab 83       	std	Y+3, r26	; 0x03
    10f4:	bc 83       	std	Y+4, r27	; 0x04
	// if(feedbackSignal < 0)
	// {
	// 	feedbackSignal = -feedbackSignal;
	// }
	// uint8 duty_cycle= (uint8)((feedbackSignal/100.0)*255);
	PWM_Timer0_Start(duty_cycle);
    10f6:	69 81       	ldd	r22, Y+1	; 0x01
    10f8:	7a 81       	ldd	r23, Y+2	; 0x02
    10fa:	8b 81       	ldd	r24, Y+3	; 0x03
    10fc:	9c 81       	ldd	r25, Y+4	; 0x04
    10fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1102:	dc 01       	movw	r26, r24
    1104:	cb 01       	movw	r24, r22
    1106:	0e 94 e8 12 	call	0x25d0	; 0x25d0 <PWM_Timer0_Start>

}
    110a:	0f 90       	pop	r0
    110c:	0f 90       	pop	r0
    110e:	0f 90       	pop	r0
    1110:	0f 90       	pop	r0
    1112:	0f 90       	pop	r0
    1114:	cf 91       	pop	r28
    1116:	df 91       	pop	r29
    1118:	1f 91       	pop	r17
    111a:	0f 91       	pop	r16
    111c:	08 95       	ret

0000111e <TC72_Init>:
#include "TC72.h"
#include "gpio.h"
#include "spi.h"

void TC72_Init(unsigned char  mode)
{
    111e:	df 93       	push	r29
    1120:	cf 93       	push	r28
    1122:	0f 92       	push	r0
    1124:	cd b7       	in	r28, 0x3d	; 61
    1126:	de b7       	in	r29, 0x3e	; 62
    1128:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(PORTB_ID, PIN4_ID, LOGIC_HIGH);	//Enable Chip(slave) select
    112a:	81 e0       	ldi	r24, 0x01	; 1
    112c:	64 e0       	ldi	r22, 0x04	; 4
    112e:	41 e0       	ldi	r20, 0x01	; 1
    1130:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <GPIO_writePin>
	SPI_sendReceiveByte(0x80);						// Write Control Address
    1134:	80 e8       	ldi	r24, 0x80	; 128
    1136:	0e 94 66 13 	call	0x26cc	; 0x26cc <SPI_sendReceiveByte>
	SPI_sendReceiveByte(mode);						// Mode: Continuous or One-shot
    113a:	89 81       	ldd	r24, Y+1	; 0x01
    113c:	0e 94 66 13 	call	0x26cc	; 0x26cc <SPI_sendReceiveByte>
	GPIO_writePin(PORTB_ID, PIN4_ID, LOGIC_LOW);	//Disable slave select
    1140:	81 e0       	ldi	r24, 0x01	; 1
    1142:	64 e0       	ldi	r22, 0x04	; 4
    1144:	40 e0       	ldi	r20, 0x00	; 0
    1146:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <GPIO_writePin>
}
    114a:	0f 90       	pop	r0
    114c:	cf 91       	pop	r28
    114e:	df 91       	pop	r29
    1150:	08 95       	ret

00001152 <TC72_ReadTemp>:

signed char TC72_ReadTemp(void)
{
    1152:	df 93       	push	r29
    1154:	cf 93       	push	r28
    1156:	0f 92       	push	r0
    1158:	cd b7       	in	r28, 0x3d	; 61
    115a:	de b7       	in	r29, 0x3e	; 62
	unsigned char data;
	GPIO_writePin(PORTB_ID, PIN4_ID, LOGIC_HIGH);	//Enable Chip Select
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	64 e0       	ldi	r22, 0x04	; 4
    1160:	41 e0       	ldi	r20, 0x01	; 1
    1162:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <GPIO_writePin>
	SPI_sendReceiveByte(0x02);						//Send MSB Address
    1166:	82 e0       	ldi	r24, 0x02	; 2
    1168:	0e 94 66 13 	call	0x26cc	; 0x26cc <SPI_sendReceiveByte>
	data = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);	//Read Temperature
    116c:	8f ef       	ldi	r24, 0xFF	; 255
    116e:	0e 94 66 13 	call	0x26cc	; 0x26cc <SPI_sendReceiveByte>
    1172:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(PORTB_ID, PIN4_ID, LOGIC_LOW);	//Disable Chip Select
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	64 e0       	ldi	r22, 0x04	; 4
    1178:	40 e0       	ldi	r20, 0x00	; 0
    117a:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <GPIO_writePin>
	return data;
    117e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1180:	0f 90       	pop	r0
    1182:	cf 91       	pop	r28
    1184:	df 91       	pop	r29
    1186:	08 95       	ret

00001188 <Timer2_Init_CTC_Mode>:
 */

#include "avr/io.h"

void Timer2_Init_CTC_Mode(unsigned char tick)
{
    1188:	df 93       	push	r29
    118a:	cf 93       	push	r28
    118c:	0f 92       	push	r0
    118e:	cd b7       	in	r28, 0x3d	; 61
    1190:	de b7       	in	r29, 0x3e	; 62
    1192:	89 83       	std	Y+1, r24	; 0x01
	TCNT2 = 0;    // Set Timer initial value to 0
    1194:	e4 e4       	ldi	r30, 0x44	; 68
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	10 82       	st	Z, r1
	OCR2  = tick; // Set Compare Value
    119a:	e3 e4       	ldi	r30, 0x43	; 67
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	89 81       	ldd	r24, Y+1	; 0x01
    11a0:	80 83       	st	Z, r24
	TIMSK |= (1<<OCIE2); // Enable Timer2 Compare Interrupt
    11a2:	a9 e5       	ldi	r26, 0x59	; 89
    11a4:	b0 e0       	ldi	r27, 0x00	; 0
    11a6:	e9 e5       	ldi	r30, 0x59	; 89
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 81       	ld	r24, Z
    11ac:	80 68       	ori	r24, 0x80	; 128
    11ae:	8c 93       	st	X, r24
	 * 1. Non PWM mode FOC0=1
	 * 2. CTC Mode WGM01=1 & WGM00=0
	 * 3. No need for OC0 in this example so COM00=0 & COM01=0
	 * 4. clock = F_CPU/1024 CS00=1 CS01=0 CS02=1
	 */
	TCCR2 = (1<<FOC2) | (1<<WGM21) | (1<<CS22) | (1<<CS20);
    11b0:	e5 e4       	ldi	r30, 0x45	; 69
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	8d e8       	ldi	r24, 0x8D	; 141
    11b6:	80 83       	st	Z, r24
}
    11b8:	0f 90       	pop	r0
    11ba:	cf 91       	pop	r28
    11bc:	df 91       	pop	r29
    11be:	08 95       	ret

000011c0 <Get_Data>:
#include "device.h"
#include "TC72.h"
unsigned char data;

signed char Get_Data(void)
{
    11c0:	df 93       	push	r29
    11c2:	cf 93       	push	r28
    11c4:	cd b7       	in	r28, 0x3d	; 61
    11c6:	de b7       	in	r29, 0x3e	; 62
	data = TC72_ReadTemp();
    11c8:	0e 94 a9 08 	call	0x1152	; 0x1152 <TC72_ReadTemp>
    11cc:	80 93 b2 01 	sts	0x01B2, r24
	return data;
    11d0:	80 91 b2 01 	lds	r24, 0x01B2
}
    11d4:	cf 91       	pop	r28
    11d6:	df 91       	pop	r29
    11d8:	08 95       	ret

000011da <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    11da:	df 93       	push	r29
    11dc:	cf 93       	push	r28
    11de:	00 d0       	rcall	.+0      	; 0x11e0 <GPIO_setupPinDirection+0x6>
    11e0:	00 d0       	rcall	.+0      	; 0x11e2 <GPIO_setupPinDirection+0x8>
    11e2:	0f 92       	push	r0
    11e4:	cd b7       	in	r28, 0x3d	; 61
    11e6:	de b7       	in	r29, 0x3e	; 62
    11e8:	89 83       	std	Y+1, r24	; 0x01
    11ea:	6a 83       	std	Y+2, r22	; 0x02
    11ec:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    11ee:	8a 81       	ldd	r24, Y+2	; 0x02
    11f0:	88 30       	cpi	r24, 0x08	; 8
    11f2:	08 f0       	brcs	.+2      	; 0x11f6 <GPIO_setupPinDirection+0x1c>
    11f4:	d5 c0       	rjmp	.+426    	; 0x13a0 <GPIO_setupPinDirection+0x1c6>
    11f6:	89 81       	ldd	r24, Y+1	; 0x01
    11f8:	84 30       	cpi	r24, 0x04	; 4
    11fa:	08 f0       	brcs	.+2      	; 0x11fe <GPIO_setupPinDirection+0x24>
    11fc:	d1 c0       	rjmp	.+418    	; 0x13a0 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    11fe:	89 81       	ldd	r24, Y+1	; 0x01
    1200:	28 2f       	mov	r18, r24
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	3d 83       	std	Y+5, r19	; 0x05
    1206:	2c 83       	std	Y+4, r18	; 0x04
    1208:	8c 81       	ldd	r24, Y+4	; 0x04
    120a:	9d 81       	ldd	r25, Y+5	; 0x05
    120c:	81 30       	cpi	r24, 0x01	; 1
    120e:	91 05       	cpc	r25, r1
    1210:	09 f4       	brne	.+2      	; 0x1214 <GPIO_setupPinDirection+0x3a>
    1212:	43 c0       	rjmp	.+134    	; 0x129a <GPIO_setupPinDirection+0xc0>
    1214:	2c 81       	ldd	r18, Y+4	; 0x04
    1216:	3d 81       	ldd	r19, Y+5	; 0x05
    1218:	22 30       	cpi	r18, 0x02	; 2
    121a:	31 05       	cpc	r19, r1
    121c:	2c f4       	brge	.+10     	; 0x1228 <GPIO_setupPinDirection+0x4e>
    121e:	8c 81       	ldd	r24, Y+4	; 0x04
    1220:	9d 81       	ldd	r25, Y+5	; 0x05
    1222:	00 97       	sbiw	r24, 0x00	; 0
    1224:	71 f0       	breq	.+28     	; 0x1242 <GPIO_setupPinDirection+0x68>
    1226:	bc c0       	rjmp	.+376    	; 0x13a0 <GPIO_setupPinDirection+0x1c6>
    1228:	2c 81       	ldd	r18, Y+4	; 0x04
    122a:	3d 81       	ldd	r19, Y+5	; 0x05
    122c:	22 30       	cpi	r18, 0x02	; 2
    122e:	31 05       	cpc	r19, r1
    1230:	09 f4       	brne	.+2      	; 0x1234 <GPIO_setupPinDirection+0x5a>
    1232:	5f c0       	rjmp	.+190    	; 0x12f2 <GPIO_setupPinDirection+0x118>
    1234:	8c 81       	ldd	r24, Y+4	; 0x04
    1236:	9d 81       	ldd	r25, Y+5	; 0x05
    1238:	83 30       	cpi	r24, 0x03	; 3
    123a:	91 05       	cpc	r25, r1
    123c:	09 f4       	brne	.+2      	; 0x1240 <GPIO_setupPinDirection+0x66>
    123e:	85 c0       	rjmp	.+266    	; 0x134a <GPIO_setupPinDirection+0x170>
    1240:	af c0       	rjmp	.+350    	; 0x13a0 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1242:	8b 81       	ldd	r24, Y+3	; 0x03
    1244:	81 30       	cpi	r24, 0x01	; 1
    1246:	a1 f4       	brne	.+40     	; 0x1270 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1248:	aa e3       	ldi	r26, 0x3A	; 58
    124a:	b0 e0       	ldi	r27, 0x00	; 0
    124c:	ea e3       	ldi	r30, 0x3A	; 58
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	48 2f       	mov	r20, r24
    1254:	8a 81       	ldd	r24, Y+2	; 0x02
    1256:	28 2f       	mov	r18, r24
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	90 e0       	ldi	r25, 0x00	; 0
    125e:	02 2e       	mov	r0, r18
    1260:	02 c0       	rjmp	.+4      	; 0x1266 <GPIO_setupPinDirection+0x8c>
    1262:	88 0f       	add	r24, r24
    1264:	99 1f       	adc	r25, r25
    1266:	0a 94       	dec	r0
    1268:	e2 f7       	brpl	.-8      	; 0x1262 <GPIO_setupPinDirection+0x88>
    126a:	84 2b       	or	r24, r20
    126c:	8c 93       	st	X, r24
    126e:	98 c0       	rjmp	.+304    	; 0x13a0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1270:	aa e3       	ldi	r26, 0x3A	; 58
    1272:	b0 e0       	ldi	r27, 0x00	; 0
    1274:	ea e3       	ldi	r30, 0x3A	; 58
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	80 81       	ld	r24, Z
    127a:	48 2f       	mov	r20, r24
    127c:	8a 81       	ldd	r24, Y+2	; 0x02
    127e:	28 2f       	mov	r18, r24
    1280:	30 e0       	ldi	r19, 0x00	; 0
    1282:	81 e0       	ldi	r24, 0x01	; 1
    1284:	90 e0       	ldi	r25, 0x00	; 0
    1286:	02 2e       	mov	r0, r18
    1288:	02 c0       	rjmp	.+4      	; 0x128e <GPIO_setupPinDirection+0xb4>
    128a:	88 0f       	add	r24, r24
    128c:	99 1f       	adc	r25, r25
    128e:	0a 94       	dec	r0
    1290:	e2 f7       	brpl	.-8      	; 0x128a <GPIO_setupPinDirection+0xb0>
    1292:	80 95       	com	r24
    1294:	84 23       	and	r24, r20
    1296:	8c 93       	st	X, r24
    1298:	83 c0       	rjmp	.+262    	; 0x13a0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    129a:	8b 81       	ldd	r24, Y+3	; 0x03
    129c:	81 30       	cpi	r24, 0x01	; 1
    129e:	a1 f4       	brne	.+40     	; 0x12c8 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    12a0:	a7 e3       	ldi	r26, 0x37	; 55
    12a2:	b0 e0       	ldi	r27, 0x00	; 0
    12a4:	e7 e3       	ldi	r30, 0x37	; 55
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	80 81       	ld	r24, Z
    12aa:	48 2f       	mov	r20, r24
    12ac:	8a 81       	ldd	r24, Y+2	; 0x02
    12ae:	28 2f       	mov	r18, r24
    12b0:	30 e0       	ldi	r19, 0x00	; 0
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	02 2e       	mov	r0, r18
    12b8:	02 c0       	rjmp	.+4      	; 0x12be <GPIO_setupPinDirection+0xe4>
    12ba:	88 0f       	add	r24, r24
    12bc:	99 1f       	adc	r25, r25
    12be:	0a 94       	dec	r0
    12c0:	e2 f7       	brpl	.-8      	; 0x12ba <GPIO_setupPinDirection+0xe0>
    12c2:	84 2b       	or	r24, r20
    12c4:	8c 93       	st	X, r24
    12c6:	6c c0       	rjmp	.+216    	; 0x13a0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    12c8:	a7 e3       	ldi	r26, 0x37	; 55
    12ca:	b0 e0       	ldi	r27, 0x00	; 0
    12cc:	e7 e3       	ldi	r30, 0x37	; 55
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	80 81       	ld	r24, Z
    12d2:	48 2f       	mov	r20, r24
    12d4:	8a 81       	ldd	r24, Y+2	; 0x02
    12d6:	28 2f       	mov	r18, r24
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	81 e0       	ldi	r24, 0x01	; 1
    12dc:	90 e0       	ldi	r25, 0x00	; 0
    12de:	02 2e       	mov	r0, r18
    12e0:	02 c0       	rjmp	.+4      	; 0x12e6 <GPIO_setupPinDirection+0x10c>
    12e2:	88 0f       	add	r24, r24
    12e4:	99 1f       	adc	r25, r25
    12e6:	0a 94       	dec	r0
    12e8:	e2 f7       	brpl	.-8      	; 0x12e2 <GPIO_setupPinDirection+0x108>
    12ea:	80 95       	com	r24
    12ec:	84 23       	and	r24, r20
    12ee:	8c 93       	st	X, r24
    12f0:	57 c0       	rjmp	.+174    	; 0x13a0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    12f2:	8b 81       	ldd	r24, Y+3	; 0x03
    12f4:	81 30       	cpi	r24, 0x01	; 1
    12f6:	a1 f4       	brne	.+40     	; 0x1320 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    12f8:	a4 e3       	ldi	r26, 0x34	; 52
    12fa:	b0 e0       	ldi	r27, 0x00	; 0
    12fc:	e4 e3       	ldi	r30, 0x34	; 52
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	80 81       	ld	r24, Z
    1302:	48 2f       	mov	r20, r24
    1304:	8a 81       	ldd	r24, Y+2	; 0x02
    1306:	28 2f       	mov	r18, r24
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	02 2e       	mov	r0, r18
    1310:	02 c0       	rjmp	.+4      	; 0x1316 <GPIO_setupPinDirection+0x13c>
    1312:	88 0f       	add	r24, r24
    1314:	99 1f       	adc	r25, r25
    1316:	0a 94       	dec	r0
    1318:	e2 f7       	brpl	.-8      	; 0x1312 <GPIO_setupPinDirection+0x138>
    131a:	84 2b       	or	r24, r20
    131c:	8c 93       	st	X, r24
    131e:	40 c0       	rjmp	.+128    	; 0x13a0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1320:	a4 e3       	ldi	r26, 0x34	; 52
    1322:	b0 e0       	ldi	r27, 0x00	; 0
    1324:	e4 e3       	ldi	r30, 0x34	; 52
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	80 81       	ld	r24, Z
    132a:	48 2f       	mov	r20, r24
    132c:	8a 81       	ldd	r24, Y+2	; 0x02
    132e:	28 2f       	mov	r18, r24
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	81 e0       	ldi	r24, 0x01	; 1
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	02 2e       	mov	r0, r18
    1338:	02 c0       	rjmp	.+4      	; 0x133e <GPIO_setupPinDirection+0x164>
    133a:	88 0f       	add	r24, r24
    133c:	99 1f       	adc	r25, r25
    133e:	0a 94       	dec	r0
    1340:	e2 f7       	brpl	.-8      	; 0x133a <GPIO_setupPinDirection+0x160>
    1342:	80 95       	com	r24
    1344:	84 23       	and	r24, r20
    1346:	8c 93       	st	X, r24
    1348:	2b c0       	rjmp	.+86     	; 0x13a0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    134a:	8b 81       	ldd	r24, Y+3	; 0x03
    134c:	81 30       	cpi	r24, 0x01	; 1
    134e:	a1 f4       	brne	.+40     	; 0x1378 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1350:	a1 e3       	ldi	r26, 0x31	; 49
    1352:	b0 e0       	ldi	r27, 0x00	; 0
    1354:	e1 e3       	ldi	r30, 0x31	; 49
    1356:	f0 e0       	ldi	r31, 0x00	; 0
    1358:	80 81       	ld	r24, Z
    135a:	48 2f       	mov	r20, r24
    135c:	8a 81       	ldd	r24, Y+2	; 0x02
    135e:	28 2f       	mov	r18, r24
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	81 e0       	ldi	r24, 0x01	; 1
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	02 2e       	mov	r0, r18
    1368:	02 c0       	rjmp	.+4      	; 0x136e <GPIO_setupPinDirection+0x194>
    136a:	88 0f       	add	r24, r24
    136c:	99 1f       	adc	r25, r25
    136e:	0a 94       	dec	r0
    1370:	e2 f7       	brpl	.-8      	; 0x136a <GPIO_setupPinDirection+0x190>
    1372:	84 2b       	or	r24, r20
    1374:	8c 93       	st	X, r24
    1376:	14 c0       	rjmp	.+40     	; 0x13a0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1378:	a1 e3       	ldi	r26, 0x31	; 49
    137a:	b0 e0       	ldi	r27, 0x00	; 0
    137c:	e1 e3       	ldi	r30, 0x31	; 49
    137e:	f0 e0       	ldi	r31, 0x00	; 0
    1380:	80 81       	ld	r24, Z
    1382:	48 2f       	mov	r20, r24
    1384:	8a 81       	ldd	r24, Y+2	; 0x02
    1386:	28 2f       	mov	r18, r24
    1388:	30 e0       	ldi	r19, 0x00	; 0
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	02 2e       	mov	r0, r18
    1390:	02 c0       	rjmp	.+4      	; 0x1396 <GPIO_setupPinDirection+0x1bc>
    1392:	88 0f       	add	r24, r24
    1394:	99 1f       	adc	r25, r25
    1396:	0a 94       	dec	r0
    1398:	e2 f7       	brpl	.-8      	; 0x1392 <GPIO_setupPinDirection+0x1b8>
    139a:	80 95       	com	r24
    139c:	84 23       	and	r24, r20
    139e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    13a0:	0f 90       	pop	r0
    13a2:	0f 90       	pop	r0
    13a4:	0f 90       	pop	r0
    13a6:	0f 90       	pop	r0
    13a8:	0f 90       	pop	r0
    13aa:	cf 91       	pop	r28
    13ac:	df 91       	pop	r29
    13ae:	08 95       	ret

000013b0 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    13b0:	df 93       	push	r29
    13b2:	cf 93       	push	r28
    13b4:	00 d0       	rcall	.+0      	; 0x13b6 <GPIO_writePin+0x6>
    13b6:	00 d0       	rcall	.+0      	; 0x13b8 <GPIO_writePin+0x8>
    13b8:	0f 92       	push	r0
    13ba:	cd b7       	in	r28, 0x3d	; 61
    13bc:	de b7       	in	r29, 0x3e	; 62
    13be:	89 83       	std	Y+1, r24	; 0x01
    13c0:	6a 83       	std	Y+2, r22	; 0x02
    13c2:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    13c4:	8a 81       	ldd	r24, Y+2	; 0x02
    13c6:	88 30       	cpi	r24, 0x08	; 8
    13c8:	08 f0       	brcs	.+2      	; 0x13cc <GPIO_writePin+0x1c>
    13ca:	d5 c0       	rjmp	.+426    	; 0x1576 <GPIO_writePin+0x1c6>
    13cc:	89 81       	ldd	r24, Y+1	; 0x01
    13ce:	84 30       	cpi	r24, 0x04	; 4
    13d0:	08 f0       	brcs	.+2      	; 0x13d4 <GPIO_writePin+0x24>
    13d2:	d1 c0       	rjmp	.+418    	; 0x1576 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    13d4:	89 81       	ldd	r24, Y+1	; 0x01
    13d6:	28 2f       	mov	r18, r24
    13d8:	30 e0       	ldi	r19, 0x00	; 0
    13da:	3d 83       	std	Y+5, r19	; 0x05
    13dc:	2c 83       	std	Y+4, r18	; 0x04
    13de:	8c 81       	ldd	r24, Y+4	; 0x04
    13e0:	9d 81       	ldd	r25, Y+5	; 0x05
    13e2:	81 30       	cpi	r24, 0x01	; 1
    13e4:	91 05       	cpc	r25, r1
    13e6:	09 f4       	brne	.+2      	; 0x13ea <GPIO_writePin+0x3a>
    13e8:	43 c0       	rjmp	.+134    	; 0x1470 <GPIO_writePin+0xc0>
    13ea:	2c 81       	ldd	r18, Y+4	; 0x04
    13ec:	3d 81       	ldd	r19, Y+5	; 0x05
    13ee:	22 30       	cpi	r18, 0x02	; 2
    13f0:	31 05       	cpc	r19, r1
    13f2:	2c f4       	brge	.+10     	; 0x13fe <GPIO_writePin+0x4e>
    13f4:	8c 81       	ldd	r24, Y+4	; 0x04
    13f6:	9d 81       	ldd	r25, Y+5	; 0x05
    13f8:	00 97       	sbiw	r24, 0x00	; 0
    13fa:	71 f0       	breq	.+28     	; 0x1418 <GPIO_writePin+0x68>
    13fc:	bc c0       	rjmp	.+376    	; 0x1576 <GPIO_writePin+0x1c6>
    13fe:	2c 81       	ldd	r18, Y+4	; 0x04
    1400:	3d 81       	ldd	r19, Y+5	; 0x05
    1402:	22 30       	cpi	r18, 0x02	; 2
    1404:	31 05       	cpc	r19, r1
    1406:	09 f4       	brne	.+2      	; 0x140a <GPIO_writePin+0x5a>
    1408:	5f c0       	rjmp	.+190    	; 0x14c8 <GPIO_writePin+0x118>
    140a:	8c 81       	ldd	r24, Y+4	; 0x04
    140c:	9d 81       	ldd	r25, Y+5	; 0x05
    140e:	83 30       	cpi	r24, 0x03	; 3
    1410:	91 05       	cpc	r25, r1
    1412:	09 f4       	brne	.+2      	; 0x1416 <GPIO_writePin+0x66>
    1414:	85 c0       	rjmp	.+266    	; 0x1520 <GPIO_writePin+0x170>
    1416:	af c0       	rjmp	.+350    	; 0x1576 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1418:	8b 81       	ldd	r24, Y+3	; 0x03
    141a:	81 30       	cpi	r24, 0x01	; 1
    141c:	a1 f4       	brne	.+40     	; 0x1446 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    141e:	ab e3       	ldi	r26, 0x3B	; 59
    1420:	b0 e0       	ldi	r27, 0x00	; 0
    1422:	eb e3       	ldi	r30, 0x3B	; 59
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	80 81       	ld	r24, Z
    1428:	48 2f       	mov	r20, r24
    142a:	8a 81       	ldd	r24, Y+2	; 0x02
    142c:	28 2f       	mov	r18, r24
    142e:	30 e0       	ldi	r19, 0x00	; 0
    1430:	81 e0       	ldi	r24, 0x01	; 1
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	02 2e       	mov	r0, r18
    1436:	02 c0       	rjmp	.+4      	; 0x143c <GPIO_writePin+0x8c>
    1438:	88 0f       	add	r24, r24
    143a:	99 1f       	adc	r25, r25
    143c:	0a 94       	dec	r0
    143e:	e2 f7       	brpl	.-8      	; 0x1438 <GPIO_writePin+0x88>
    1440:	84 2b       	or	r24, r20
    1442:	8c 93       	st	X, r24
    1444:	98 c0       	rjmp	.+304    	; 0x1576 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1446:	ab e3       	ldi	r26, 0x3B	; 59
    1448:	b0 e0       	ldi	r27, 0x00	; 0
    144a:	eb e3       	ldi	r30, 0x3B	; 59
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	80 81       	ld	r24, Z
    1450:	48 2f       	mov	r20, r24
    1452:	8a 81       	ldd	r24, Y+2	; 0x02
    1454:	28 2f       	mov	r18, r24
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	81 e0       	ldi	r24, 0x01	; 1
    145a:	90 e0       	ldi	r25, 0x00	; 0
    145c:	02 2e       	mov	r0, r18
    145e:	02 c0       	rjmp	.+4      	; 0x1464 <GPIO_writePin+0xb4>
    1460:	88 0f       	add	r24, r24
    1462:	99 1f       	adc	r25, r25
    1464:	0a 94       	dec	r0
    1466:	e2 f7       	brpl	.-8      	; 0x1460 <GPIO_writePin+0xb0>
    1468:	80 95       	com	r24
    146a:	84 23       	and	r24, r20
    146c:	8c 93       	st	X, r24
    146e:	83 c0       	rjmp	.+262    	; 0x1576 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1470:	8b 81       	ldd	r24, Y+3	; 0x03
    1472:	81 30       	cpi	r24, 0x01	; 1
    1474:	a1 f4       	brne	.+40     	; 0x149e <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1476:	a8 e3       	ldi	r26, 0x38	; 56
    1478:	b0 e0       	ldi	r27, 0x00	; 0
    147a:	e8 e3       	ldi	r30, 0x38	; 56
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	80 81       	ld	r24, Z
    1480:	48 2f       	mov	r20, r24
    1482:	8a 81       	ldd	r24, Y+2	; 0x02
    1484:	28 2f       	mov	r18, r24
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	81 e0       	ldi	r24, 0x01	; 1
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	02 2e       	mov	r0, r18
    148e:	02 c0       	rjmp	.+4      	; 0x1494 <GPIO_writePin+0xe4>
    1490:	88 0f       	add	r24, r24
    1492:	99 1f       	adc	r25, r25
    1494:	0a 94       	dec	r0
    1496:	e2 f7       	brpl	.-8      	; 0x1490 <GPIO_writePin+0xe0>
    1498:	84 2b       	or	r24, r20
    149a:	8c 93       	st	X, r24
    149c:	6c c0       	rjmp	.+216    	; 0x1576 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    149e:	a8 e3       	ldi	r26, 0x38	; 56
    14a0:	b0 e0       	ldi	r27, 0x00	; 0
    14a2:	e8 e3       	ldi	r30, 0x38	; 56
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	80 81       	ld	r24, Z
    14a8:	48 2f       	mov	r20, r24
    14aa:	8a 81       	ldd	r24, Y+2	; 0x02
    14ac:	28 2f       	mov	r18, r24
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	81 e0       	ldi	r24, 0x01	; 1
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	02 2e       	mov	r0, r18
    14b6:	02 c0       	rjmp	.+4      	; 0x14bc <GPIO_writePin+0x10c>
    14b8:	88 0f       	add	r24, r24
    14ba:	99 1f       	adc	r25, r25
    14bc:	0a 94       	dec	r0
    14be:	e2 f7       	brpl	.-8      	; 0x14b8 <GPIO_writePin+0x108>
    14c0:	80 95       	com	r24
    14c2:	84 23       	and	r24, r20
    14c4:	8c 93       	st	X, r24
    14c6:	57 c0       	rjmp	.+174    	; 0x1576 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    14c8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ca:	81 30       	cpi	r24, 0x01	; 1
    14cc:	a1 f4       	brne	.+40     	; 0x14f6 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    14ce:	a5 e3       	ldi	r26, 0x35	; 53
    14d0:	b0 e0       	ldi	r27, 0x00	; 0
    14d2:	e5 e3       	ldi	r30, 0x35	; 53
    14d4:	f0 e0       	ldi	r31, 0x00	; 0
    14d6:	80 81       	ld	r24, Z
    14d8:	48 2f       	mov	r20, r24
    14da:	8a 81       	ldd	r24, Y+2	; 0x02
    14dc:	28 2f       	mov	r18, r24
    14de:	30 e0       	ldi	r19, 0x00	; 0
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	02 2e       	mov	r0, r18
    14e6:	02 c0       	rjmp	.+4      	; 0x14ec <GPIO_writePin+0x13c>
    14e8:	88 0f       	add	r24, r24
    14ea:	99 1f       	adc	r25, r25
    14ec:	0a 94       	dec	r0
    14ee:	e2 f7       	brpl	.-8      	; 0x14e8 <GPIO_writePin+0x138>
    14f0:	84 2b       	or	r24, r20
    14f2:	8c 93       	st	X, r24
    14f4:	40 c0       	rjmp	.+128    	; 0x1576 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    14f6:	a5 e3       	ldi	r26, 0x35	; 53
    14f8:	b0 e0       	ldi	r27, 0x00	; 0
    14fa:	e5 e3       	ldi	r30, 0x35	; 53
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	80 81       	ld	r24, Z
    1500:	48 2f       	mov	r20, r24
    1502:	8a 81       	ldd	r24, Y+2	; 0x02
    1504:	28 2f       	mov	r18, r24
    1506:	30 e0       	ldi	r19, 0x00	; 0
    1508:	81 e0       	ldi	r24, 0x01	; 1
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	02 2e       	mov	r0, r18
    150e:	02 c0       	rjmp	.+4      	; 0x1514 <GPIO_writePin+0x164>
    1510:	88 0f       	add	r24, r24
    1512:	99 1f       	adc	r25, r25
    1514:	0a 94       	dec	r0
    1516:	e2 f7       	brpl	.-8      	; 0x1510 <GPIO_writePin+0x160>
    1518:	80 95       	com	r24
    151a:	84 23       	and	r24, r20
    151c:	8c 93       	st	X, r24
    151e:	2b c0       	rjmp	.+86     	; 0x1576 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1520:	8b 81       	ldd	r24, Y+3	; 0x03
    1522:	81 30       	cpi	r24, 0x01	; 1
    1524:	a1 f4       	brne	.+40     	; 0x154e <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1526:	a2 e3       	ldi	r26, 0x32	; 50
    1528:	b0 e0       	ldi	r27, 0x00	; 0
    152a:	e2 e3       	ldi	r30, 0x32	; 50
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	80 81       	ld	r24, Z
    1530:	48 2f       	mov	r20, r24
    1532:	8a 81       	ldd	r24, Y+2	; 0x02
    1534:	28 2f       	mov	r18, r24
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	81 e0       	ldi	r24, 0x01	; 1
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	02 2e       	mov	r0, r18
    153e:	02 c0       	rjmp	.+4      	; 0x1544 <GPIO_writePin+0x194>
    1540:	88 0f       	add	r24, r24
    1542:	99 1f       	adc	r25, r25
    1544:	0a 94       	dec	r0
    1546:	e2 f7       	brpl	.-8      	; 0x1540 <GPIO_writePin+0x190>
    1548:	84 2b       	or	r24, r20
    154a:	8c 93       	st	X, r24
    154c:	14 c0       	rjmp	.+40     	; 0x1576 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    154e:	a2 e3       	ldi	r26, 0x32	; 50
    1550:	b0 e0       	ldi	r27, 0x00	; 0
    1552:	e2 e3       	ldi	r30, 0x32	; 50
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	80 81       	ld	r24, Z
    1558:	48 2f       	mov	r20, r24
    155a:	8a 81       	ldd	r24, Y+2	; 0x02
    155c:	28 2f       	mov	r18, r24
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	81 e0       	ldi	r24, 0x01	; 1
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	02 2e       	mov	r0, r18
    1566:	02 c0       	rjmp	.+4      	; 0x156c <GPIO_writePin+0x1bc>
    1568:	88 0f       	add	r24, r24
    156a:	99 1f       	adc	r25, r25
    156c:	0a 94       	dec	r0
    156e:	e2 f7       	brpl	.-8      	; 0x1568 <GPIO_writePin+0x1b8>
    1570:	80 95       	com	r24
    1572:	84 23       	and	r24, r20
    1574:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1576:	0f 90       	pop	r0
    1578:	0f 90       	pop	r0
    157a:	0f 90       	pop	r0
    157c:	0f 90       	pop	r0
    157e:	0f 90       	pop	r0
    1580:	cf 91       	pop	r28
    1582:	df 91       	pop	r29
    1584:	08 95       	ret

00001586 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1586:	df 93       	push	r29
    1588:	cf 93       	push	r28
    158a:	00 d0       	rcall	.+0      	; 0x158c <GPIO_readPin+0x6>
    158c:	00 d0       	rcall	.+0      	; 0x158e <GPIO_readPin+0x8>
    158e:	0f 92       	push	r0
    1590:	cd b7       	in	r28, 0x3d	; 61
    1592:	de b7       	in	r29, 0x3e	; 62
    1594:	8a 83       	std	Y+2, r24	; 0x02
    1596:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1598:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    159a:	8b 81       	ldd	r24, Y+3	; 0x03
    159c:	88 30       	cpi	r24, 0x08	; 8
    159e:	08 f0       	brcs	.+2      	; 0x15a2 <GPIO_readPin+0x1c>
    15a0:	84 c0       	rjmp	.+264    	; 0x16aa <GPIO_readPin+0x124>
    15a2:	8a 81       	ldd	r24, Y+2	; 0x02
    15a4:	84 30       	cpi	r24, 0x04	; 4
    15a6:	08 f0       	brcs	.+2      	; 0x15aa <GPIO_readPin+0x24>
    15a8:	80 c0       	rjmp	.+256    	; 0x16aa <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    15aa:	8a 81       	ldd	r24, Y+2	; 0x02
    15ac:	28 2f       	mov	r18, r24
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	3d 83       	std	Y+5, r19	; 0x05
    15b2:	2c 83       	std	Y+4, r18	; 0x04
    15b4:	4c 81       	ldd	r20, Y+4	; 0x04
    15b6:	5d 81       	ldd	r21, Y+5	; 0x05
    15b8:	41 30       	cpi	r20, 0x01	; 1
    15ba:	51 05       	cpc	r21, r1
    15bc:	79 f1       	breq	.+94     	; 0x161c <GPIO_readPin+0x96>
    15be:	8c 81       	ldd	r24, Y+4	; 0x04
    15c0:	9d 81       	ldd	r25, Y+5	; 0x05
    15c2:	82 30       	cpi	r24, 0x02	; 2
    15c4:	91 05       	cpc	r25, r1
    15c6:	34 f4       	brge	.+12     	; 0x15d4 <GPIO_readPin+0x4e>
    15c8:	2c 81       	ldd	r18, Y+4	; 0x04
    15ca:	3d 81       	ldd	r19, Y+5	; 0x05
    15cc:	21 15       	cp	r18, r1
    15ce:	31 05       	cpc	r19, r1
    15d0:	69 f0       	breq	.+26     	; 0x15ec <GPIO_readPin+0x66>
    15d2:	6b c0       	rjmp	.+214    	; 0x16aa <GPIO_readPin+0x124>
    15d4:	4c 81       	ldd	r20, Y+4	; 0x04
    15d6:	5d 81       	ldd	r21, Y+5	; 0x05
    15d8:	42 30       	cpi	r20, 0x02	; 2
    15da:	51 05       	cpc	r21, r1
    15dc:	b9 f1       	breq	.+110    	; 0x164c <GPIO_readPin+0xc6>
    15de:	8c 81       	ldd	r24, Y+4	; 0x04
    15e0:	9d 81       	ldd	r25, Y+5	; 0x05
    15e2:	83 30       	cpi	r24, 0x03	; 3
    15e4:	91 05       	cpc	r25, r1
    15e6:	09 f4       	brne	.+2      	; 0x15ea <GPIO_readPin+0x64>
    15e8:	49 c0       	rjmp	.+146    	; 0x167c <GPIO_readPin+0xf6>
    15ea:	5f c0       	rjmp	.+190    	; 0x16aa <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    15ec:	e9 e3       	ldi	r30, 0x39	; 57
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	80 81       	ld	r24, Z
    15f2:	28 2f       	mov	r18, r24
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	8b 81       	ldd	r24, Y+3	; 0x03
    15f8:	88 2f       	mov	r24, r24
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	a9 01       	movw	r20, r18
    15fe:	02 c0       	rjmp	.+4      	; 0x1604 <GPIO_readPin+0x7e>
    1600:	55 95       	asr	r21
    1602:	47 95       	ror	r20
    1604:	8a 95       	dec	r24
    1606:	e2 f7       	brpl	.-8      	; 0x1600 <GPIO_readPin+0x7a>
    1608:	ca 01       	movw	r24, r20
    160a:	81 70       	andi	r24, 0x01	; 1
    160c:	90 70       	andi	r25, 0x00	; 0
    160e:	88 23       	and	r24, r24
    1610:	19 f0       	breq	.+6      	; 0x1618 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1612:	81 e0       	ldi	r24, 0x01	; 1
    1614:	89 83       	std	Y+1, r24	; 0x01
    1616:	49 c0       	rjmp	.+146    	; 0x16aa <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1618:	19 82       	std	Y+1, r1	; 0x01
    161a:	47 c0       	rjmp	.+142    	; 0x16aa <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    161c:	e6 e3       	ldi	r30, 0x36	; 54
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	80 81       	ld	r24, Z
    1622:	28 2f       	mov	r18, r24
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	8b 81       	ldd	r24, Y+3	; 0x03
    1628:	88 2f       	mov	r24, r24
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	a9 01       	movw	r20, r18
    162e:	02 c0       	rjmp	.+4      	; 0x1634 <GPIO_readPin+0xae>
    1630:	55 95       	asr	r21
    1632:	47 95       	ror	r20
    1634:	8a 95       	dec	r24
    1636:	e2 f7       	brpl	.-8      	; 0x1630 <GPIO_readPin+0xaa>
    1638:	ca 01       	movw	r24, r20
    163a:	81 70       	andi	r24, 0x01	; 1
    163c:	90 70       	andi	r25, 0x00	; 0
    163e:	88 23       	and	r24, r24
    1640:	19 f0       	breq	.+6      	; 0x1648 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1642:	81 e0       	ldi	r24, 0x01	; 1
    1644:	89 83       	std	Y+1, r24	; 0x01
    1646:	31 c0       	rjmp	.+98     	; 0x16aa <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1648:	19 82       	std	Y+1, r1	; 0x01
    164a:	2f c0       	rjmp	.+94     	; 0x16aa <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    164c:	e3 e3       	ldi	r30, 0x33	; 51
    164e:	f0 e0       	ldi	r31, 0x00	; 0
    1650:	80 81       	ld	r24, Z
    1652:	28 2f       	mov	r18, r24
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	8b 81       	ldd	r24, Y+3	; 0x03
    1658:	88 2f       	mov	r24, r24
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	a9 01       	movw	r20, r18
    165e:	02 c0       	rjmp	.+4      	; 0x1664 <GPIO_readPin+0xde>
    1660:	55 95       	asr	r21
    1662:	47 95       	ror	r20
    1664:	8a 95       	dec	r24
    1666:	e2 f7       	brpl	.-8      	; 0x1660 <GPIO_readPin+0xda>
    1668:	ca 01       	movw	r24, r20
    166a:	81 70       	andi	r24, 0x01	; 1
    166c:	90 70       	andi	r25, 0x00	; 0
    166e:	88 23       	and	r24, r24
    1670:	19 f0       	breq	.+6      	; 0x1678 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1672:	81 e0       	ldi	r24, 0x01	; 1
    1674:	89 83       	std	Y+1, r24	; 0x01
    1676:	19 c0       	rjmp	.+50     	; 0x16aa <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1678:	19 82       	std	Y+1, r1	; 0x01
    167a:	17 c0       	rjmp	.+46     	; 0x16aa <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    167c:	e0 e3       	ldi	r30, 0x30	; 48
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	80 81       	ld	r24, Z
    1682:	28 2f       	mov	r18, r24
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	8b 81       	ldd	r24, Y+3	; 0x03
    1688:	88 2f       	mov	r24, r24
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	a9 01       	movw	r20, r18
    168e:	02 c0       	rjmp	.+4      	; 0x1694 <GPIO_readPin+0x10e>
    1690:	55 95       	asr	r21
    1692:	47 95       	ror	r20
    1694:	8a 95       	dec	r24
    1696:	e2 f7       	brpl	.-8      	; 0x1690 <GPIO_readPin+0x10a>
    1698:	ca 01       	movw	r24, r20
    169a:	81 70       	andi	r24, 0x01	; 1
    169c:	90 70       	andi	r25, 0x00	; 0
    169e:	88 23       	and	r24, r24
    16a0:	19 f0       	breq	.+6      	; 0x16a8 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    16a2:	81 e0       	ldi	r24, 0x01	; 1
    16a4:	89 83       	std	Y+1, r24	; 0x01
    16a6:	01 c0       	rjmp	.+2      	; 0x16aa <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    16a8:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    16aa:	89 81       	ldd	r24, Y+1	; 0x01
}
    16ac:	0f 90       	pop	r0
    16ae:	0f 90       	pop	r0
    16b0:	0f 90       	pop	r0
    16b2:	0f 90       	pop	r0
    16b4:	0f 90       	pop	r0
    16b6:	cf 91       	pop	r28
    16b8:	df 91       	pop	r29
    16ba:	08 95       	ret

000016bc <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    16bc:	df 93       	push	r29
    16be:	cf 93       	push	r28
    16c0:	00 d0       	rcall	.+0      	; 0x16c2 <GPIO_setupPortDirection+0x6>
    16c2:	00 d0       	rcall	.+0      	; 0x16c4 <GPIO_setupPortDirection+0x8>
    16c4:	cd b7       	in	r28, 0x3d	; 61
    16c6:	de b7       	in	r29, 0x3e	; 62
    16c8:	89 83       	std	Y+1, r24	; 0x01
    16ca:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    16cc:	89 81       	ldd	r24, Y+1	; 0x01
    16ce:	84 30       	cpi	r24, 0x04	; 4
    16d0:	90 f5       	brcc	.+100    	; 0x1736 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    16d2:	89 81       	ldd	r24, Y+1	; 0x01
    16d4:	28 2f       	mov	r18, r24
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	3c 83       	std	Y+4, r19	; 0x04
    16da:	2b 83       	std	Y+3, r18	; 0x03
    16dc:	8b 81       	ldd	r24, Y+3	; 0x03
    16de:	9c 81       	ldd	r25, Y+4	; 0x04
    16e0:	81 30       	cpi	r24, 0x01	; 1
    16e2:	91 05       	cpc	r25, r1
    16e4:	d1 f0       	breq	.+52     	; 0x171a <GPIO_setupPortDirection+0x5e>
    16e6:	2b 81       	ldd	r18, Y+3	; 0x03
    16e8:	3c 81       	ldd	r19, Y+4	; 0x04
    16ea:	22 30       	cpi	r18, 0x02	; 2
    16ec:	31 05       	cpc	r19, r1
    16ee:	2c f4       	brge	.+10     	; 0x16fa <GPIO_setupPortDirection+0x3e>
    16f0:	8b 81       	ldd	r24, Y+3	; 0x03
    16f2:	9c 81       	ldd	r25, Y+4	; 0x04
    16f4:	00 97       	sbiw	r24, 0x00	; 0
    16f6:	61 f0       	breq	.+24     	; 0x1710 <GPIO_setupPortDirection+0x54>
    16f8:	1e c0       	rjmp	.+60     	; 0x1736 <GPIO_setupPortDirection+0x7a>
    16fa:	2b 81       	ldd	r18, Y+3	; 0x03
    16fc:	3c 81       	ldd	r19, Y+4	; 0x04
    16fe:	22 30       	cpi	r18, 0x02	; 2
    1700:	31 05       	cpc	r19, r1
    1702:	81 f0       	breq	.+32     	; 0x1724 <GPIO_setupPortDirection+0x68>
    1704:	8b 81       	ldd	r24, Y+3	; 0x03
    1706:	9c 81       	ldd	r25, Y+4	; 0x04
    1708:	83 30       	cpi	r24, 0x03	; 3
    170a:	91 05       	cpc	r25, r1
    170c:	81 f0       	breq	.+32     	; 0x172e <GPIO_setupPortDirection+0x72>
    170e:	13 c0       	rjmp	.+38     	; 0x1736 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1710:	ea e3       	ldi	r30, 0x3A	; 58
    1712:	f0 e0       	ldi	r31, 0x00	; 0
    1714:	8a 81       	ldd	r24, Y+2	; 0x02
    1716:	80 83       	st	Z, r24
    1718:	0e c0       	rjmp	.+28     	; 0x1736 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    171a:	e7 e3       	ldi	r30, 0x37	; 55
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	8a 81       	ldd	r24, Y+2	; 0x02
    1720:	80 83       	st	Z, r24
    1722:	09 c0       	rjmp	.+18     	; 0x1736 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1724:	e4 e3       	ldi	r30, 0x34	; 52
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	8a 81       	ldd	r24, Y+2	; 0x02
    172a:	80 83       	st	Z, r24
    172c:	04 c0       	rjmp	.+8      	; 0x1736 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    172e:	e1 e3       	ldi	r30, 0x31	; 49
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	8a 81       	ldd	r24, Y+2	; 0x02
    1734:	80 83       	st	Z, r24
			break;
		}
	}
}
    1736:	0f 90       	pop	r0
    1738:	0f 90       	pop	r0
    173a:	0f 90       	pop	r0
    173c:	0f 90       	pop	r0
    173e:	cf 91       	pop	r28
    1740:	df 91       	pop	r29
    1742:	08 95       	ret

00001744 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1744:	df 93       	push	r29
    1746:	cf 93       	push	r28
    1748:	00 d0       	rcall	.+0      	; 0x174a <GPIO_writePort+0x6>
    174a:	00 d0       	rcall	.+0      	; 0x174c <GPIO_writePort+0x8>
    174c:	cd b7       	in	r28, 0x3d	; 61
    174e:	de b7       	in	r29, 0x3e	; 62
    1750:	89 83       	std	Y+1, r24	; 0x01
    1752:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1754:	89 81       	ldd	r24, Y+1	; 0x01
    1756:	84 30       	cpi	r24, 0x04	; 4
    1758:	90 f5       	brcc	.+100    	; 0x17be <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    175a:	89 81       	ldd	r24, Y+1	; 0x01
    175c:	28 2f       	mov	r18, r24
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	3c 83       	std	Y+4, r19	; 0x04
    1762:	2b 83       	std	Y+3, r18	; 0x03
    1764:	8b 81       	ldd	r24, Y+3	; 0x03
    1766:	9c 81       	ldd	r25, Y+4	; 0x04
    1768:	81 30       	cpi	r24, 0x01	; 1
    176a:	91 05       	cpc	r25, r1
    176c:	d1 f0       	breq	.+52     	; 0x17a2 <GPIO_writePort+0x5e>
    176e:	2b 81       	ldd	r18, Y+3	; 0x03
    1770:	3c 81       	ldd	r19, Y+4	; 0x04
    1772:	22 30       	cpi	r18, 0x02	; 2
    1774:	31 05       	cpc	r19, r1
    1776:	2c f4       	brge	.+10     	; 0x1782 <GPIO_writePort+0x3e>
    1778:	8b 81       	ldd	r24, Y+3	; 0x03
    177a:	9c 81       	ldd	r25, Y+4	; 0x04
    177c:	00 97       	sbiw	r24, 0x00	; 0
    177e:	61 f0       	breq	.+24     	; 0x1798 <GPIO_writePort+0x54>
    1780:	1e c0       	rjmp	.+60     	; 0x17be <GPIO_writePort+0x7a>
    1782:	2b 81       	ldd	r18, Y+3	; 0x03
    1784:	3c 81       	ldd	r19, Y+4	; 0x04
    1786:	22 30       	cpi	r18, 0x02	; 2
    1788:	31 05       	cpc	r19, r1
    178a:	81 f0       	breq	.+32     	; 0x17ac <GPIO_writePort+0x68>
    178c:	8b 81       	ldd	r24, Y+3	; 0x03
    178e:	9c 81       	ldd	r25, Y+4	; 0x04
    1790:	83 30       	cpi	r24, 0x03	; 3
    1792:	91 05       	cpc	r25, r1
    1794:	81 f0       	breq	.+32     	; 0x17b6 <GPIO_writePort+0x72>
    1796:	13 c0       	rjmp	.+38     	; 0x17be <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1798:	eb e3       	ldi	r30, 0x3B	; 59
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	8a 81       	ldd	r24, Y+2	; 0x02
    179e:	80 83       	st	Z, r24
    17a0:	0e c0       	rjmp	.+28     	; 0x17be <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    17a2:	e8 e3       	ldi	r30, 0x38	; 56
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	8a 81       	ldd	r24, Y+2	; 0x02
    17a8:	80 83       	st	Z, r24
    17aa:	09 c0       	rjmp	.+18     	; 0x17be <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    17ac:	e5 e3       	ldi	r30, 0x35	; 53
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	8a 81       	ldd	r24, Y+2	; 0x02
    17b2:	80 83       	st	Z, r24
    17b4:	04 c0       	rjmp	.+8      	; 0x17be <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    17b6:	e2 e3       	ldi	r30, 0x32	; 50
    17b8:	f0 e0       	ldi	r31, 0x00	; 0
    17ba:	8a 81       	ldd	r24, Y+2	; 0x02
    17bc:	80 83       	st	Z, r24
			break;
		}
	}
}
    17be:	0f 90       	pop	r0
    17c0:	0f 90       	pop	r0
    17c2:	0f 90       	pop	r0
    17c4:	0f 90       	pop	r0
    17c6:	cf 91       	pop	r28
    17c8:	df 91       	pop	r29
    17ca:	08 95       	ret

000017cc <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    17cc:	df 93       	push	r29
    17ce:	cf 93       	push	r28
    17d0:	00 d0       	rcall	.+0      	; 0x17d2 <GPIO_readPort+0x6>
    17d2:	00 d0       	rcall	.+0      	; 0x17d4 <GPIO_readPort+0x8>
    17d4:	cd b7       	in	r28, 0x3d	; 61
    17d6:	de b7       	in	r29, 0x3e	; 62
    17d8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    17da:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    17dc:	8a 81       	ldd	r24, Y+2	; 0x02
    17de:	84 30       	cpi	r24, 0x04	; 4
    17e0:	90 f5       	brcc	.+100    	; 0x1846 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    17e2:	8a 81       	ldd	r24, Y+2	; 0x02
    17e4:	28 2f       	mov	r18, r24
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	3c 83       	std	Y+4, r19	; 0x04
    17ea:	2b 83       	std	Y+3, r18	; 0x03
    17ec:	8b 81       	ldd	r24, Y+3	; 0x03
    17ee:	9c 81       	ldd	r25, Y+4	; 0x04
    17f0:	81 30       	cpi	r24, 0x01	; 1
    17f2:	91 05       	cpc	r25, r1
    17f4:	d1 f0       	breq	.+52     	; 0x182a <GPIO_readPort+0x5e>
    17f6:	2b 81       	ldd	r18, Y+3	; 0x03
    17f8:	3c 81       	ldd	r19, Y+4	; 0x04
    17fa:	22 30       	cpi	r18, 0x02	; 2
    17fc:	31 05       	cpc	r19, r1
    17fe:	2c f4       	brge	.+10     	; 0x180a <GPIO_readPort+0x3e>
    1800:	8b 81       	ldd	r24, Y+3	; 0x03
    1802:	9c 81       	ldd	r25, Y+4	; 0x04
    1804:	00 97       	sbiw	r24, 0x00	; 0
    1806:	61 f0       	breq	.+24     	; 0x1820 <GPIO_readPort+0x54>
    1808:	1e c0       	rjmp	.+60     	; 0x1846 <GPIO_readPort+0x7a>
    180a:	2b 81       	ldd	r18, Y+3	; 0x03
    180c:	3c 81       	ldd	r19, Y+4	; 0x04
    180e:	22 30       	cpi	r18, 0x02	; 2
    1810:	31 05       	cpc	r19, r1
    1812:	81 f0       	breq	.+32     	; 0x1834 <GPIO_readPort+0x68>
    1814:	8b 81       	ldd	r24, Y+3	; 0x03
    1816:	9c 81       	ldd	r25, Y+4	; 0x04
    1818:	83 30       	cpi	r24, 0x03	; 3
    181a:	91 05       	cpc	r25, r1
    181c:	81 f0       	breq	.+32     	; 0x183e <GPIO_readPort+0x72>
    181e:	13 c0       	rjmp	.+38     	; 0x1846 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1820:	e9 e3       	ldi	r30, 0x39	; 57
    1822:	f0 e0       	ldi	r31, 0x00	; 0
    1824:	80 81       	ld	r24, Z
    1826:	89 83       	std	Y+1, r24	; 0x01
    1828:	0e c0       	rjmp	.+28     	; 0x1846 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    182a:	e6 e3       	ldi	r30, 0x36	; 54
    182c:	f0 e0       	ldi	r31, 0x00	; 0
    182e:	80 81       	ld	r24, Z
    1830:	89 83       	std	Y+1, r24	; 0x01
    1832:	09 c0       	rjmp	.+18     	; 0x1846 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1834:	e3 e3       	ldi	r30, 0x33	; 51
    1836:	f0 e0       	ldi	r31, 0x00	; 0
    1838:	80 81       	ld	r24, Z
    183a:	89 83       	std	Y+1, r24	; 0x01
    183c:	04 c0       	rjmp	.+8      	; 0x1846 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    183e:	e0 e3       	ldi	r30, 0x30	; 48
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	80 81       	ld	r24, Z
    1844:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1846:	89 81       	ldd	r24, Y+1	; 0x01
}
    1848:	0f 90       	pop	r0
    184a:	0f 90       	pop	r0
    184c:	0f 90       	pop	r0
    184e:	0f 90       	pop	r0
    1850:	cf 91       	pop	r28
    1852:	df 91       	pop	r29
    1854:	08 95       	ret

00001856 <DIO_init>:


void DIO_init(void)
{
    1856:	df 93       	push	r29
    1858:	cf 93       	push	r28
    185a:	00 d0       	rcall	.+0      	; 0x185c <DIO_init+0x6>
    185c:	00 d0       	rcall	.+0      	; 0x185e <DIO_init+0x8>
    185e:	cd b7       	in	r28, 0x3d	; 61
    1860:	de b7       	in	r29, 0x3e	; 62
	uint8_t loop;
	for(loop=0u; loop < DIO_NUM_OF_CHANNELS ; loop++ ){
    1862:	1c 82       	std	Y+4, r1	; 0x04
    1864:	2f c0       	rjmp	.+94     	; 0x18c4 <DIO_init+0x6e>
		uint8_t portid=dio_config_array[loop].port_id;
    1866:	8c 81       	ldd	r24, Y+4	; 0x04
    1868:	28 2f       	mov	r18, r24
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	c9 01       	movw	r24, r18
    186e:	88 0f       	add	r24, r24
    1870:	99 1f       	adc	r25, r25
    1872:	82 0f       	add	r24, r18
    1874:	93 1f       	adc	r25, r19
    1876:	fc 01       	movw	r30, r24
    1878:	e8 57       	subi	r30, 0x78	; 120
    187a:	fe 4f       	sbci	r31, 0xFE	; 254
    187c:	80 81       	ld	r24, Z
    187e:	8b 83       	std	Y+3, r24	; 0x03
		uint8_t pin_num=dio_config_array[loop].pin_num;
    1880:	8c 81       	ldd	r24, Y+4	; 0x04
    1882:	28 2f       	mov	r18, r24
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	c9 01       	movw	r24, r18
    1888:	88 0f       	add	r24, r24
    188a:	99 1f       	adc	r25, r25
    188c:	82 0f       	add	r24, r18
    188e:	93 1f       	adc	r25, r19
    1890:	fc 01       	movw	r30, r24
    1892:	e7 57       	subi	r30, 0x77	; 119
    1894:	fe 4f       	sbci	r31, 0xFE	; 254
    1896:	80 81       	ld	r24, Z
    1898:	8a 83       	std	Y+2, r24	; 0x02
		uint8_t direction=dio_config_array[loop].direction;
    189a:	8c 81       	ldd	r24, Y+4	; 0x04
    189c:	28 2f       	mov	r18, r24
    189e:	30 e0       	ldi	r19, 0x00	; 0
    18a0:	c9 01       	movw	r24, r18
    18a2:	88 0f       	add	r24, r24
    18a4:	99 1f       	adc	r25, r25
    18a6:	82 0f       	add	r24, r18
    18a8:	93 1f       	adc	r25, r19
    18aa:	fc 01       	movw	r30, r24
    18ac:	e6 57       	subi	r30, 0x76	; 118
    18ae:	fe 4f       	sbci	r31, 0xFE	; 254
    18b0:	80 81       	ld	r24, Z
    18b2:	89 83       	std	Y+1, r24	; 0x01
		GPIO_setupPinDirection(portid,pin_num,direction);
    18b4:	8b 81       	ldd	r24, Y+3	; 0x03
    18b6:	6a 81       	ldd	r22, Y+2	; 0x02
    18b8:	49 81       	ldd	r20, Y+1	; 0x01
    18ba:	0e 94 ed 08 	call	0x11da	; 0x11da <GPIO_setupPinDirection>


void DIO_init(void)
{
	uint8_t loop;
	for(loop=0u; loop < DIO_NUM_OF_CHANNELS ; loop++ ){
    18be:	8c 81       	ldd	r24, Y+4	; 0x04
    18c0:	8f 5f       	subi	r24, 0xFF	; 255
    18c2:	8c 83       	std	Y+4, r24	; 0x04
    18c4:	8c 81       	ldd	r24, Y+4	; 0x04
    18c6:	85 30       	cpi	r24, 0x05	; 5
    18c8:	70 f2       	brcs	.-100    	; 0x1866 <DIO_init+0x10>
		uint8_t portid=dio_config_array[loop].port_id;
		uint8_t pin_num=dio_config_array[loop].pin_num;
		uint8_t direction=dio_config_array[loop].direction;
		GPIO_setupPinDirection(portid,pin_num,direction);
	}
}
    18ca:	0f 90       	pop	r0
    18cc:	0f 90       	pop	r0
    18ce:	0f 90       	pop	r0
    18d0:	0f 90       	pop	r0
    18d2:	cf 91       	pop	r28
    18d4:	df 91       	pop	r29
    18d6:	08 95       	ret

000018d8 <DIO_ChannelGroupWrite>:


void DIO_ChannelGroupWrite(ChannelGroupType channel_group_variabe , uint8_t data)
{
    18d8:	cf 92       	push	r12
    18da:	ef 92       	push	r14
    18dc:	ff 92       	push	r15
    18de:	0f 93       	push	r16
    18e0:	1f 93       	push	r17
    18e2:	df 93       	push	r29
    18e4:	cf 93       	push	r28
    18e6:	cd b7       	in	r28, 0x3d	; 61
    18e8:	de b7       	in	r29, 0x3e	; 62
    18ea:	63 97       	sbiw	r28, 0x13	; 19
    18ec:	0f b6       	in	r0, 0x3f	; 63
    18ee:	f8 94       	cli
    18f0:	de bf       	out	0x3e, r29	; 62
    18f2:	0f be       	out	0x3f, r0	; 63
    18f4:	cd bf       	out	0x3d, r28	; 61
    18f6:	ef 82       	std	Y+7, r14	; 0x07
    18f8:	f8 86       	std	Y+8, r15	; 0x08
    18fa:	09 87       	std	Y+9, r16	; 0x09
    18fc:	1a 87       	std	Y+10, r17	; 0x0a
    18fe:	2b 87       	std	Y+11, r18	; 0x0b
    1900:	3c 87       	std	Y+12, r19	; 0x0c
    1902:	4d 87       	std	Y+13, r20	; 0x0d
    1904:	5e 87       	std	Y+14, r21	; 0x0e
    1906:	6f 87       	std	Y+15, r22	; 0x0f
    1908:	78 8b       	std	Y+16, r23	; 0x10
    190a:	89 8b       	std	Y+17, r24	; 0x11
    190c:	9a 8b       	std	Y+18, r25	; 0x12
    190e:	cb 8a       	std	Y+19, r12	; 0x13
	uint8_t loop;
	uint8_t to=channel_group_variabe.no_of_channels;
    1910:	8f 81       	ldd	r24, Y+7	; 0x07
    1912:	98 85       	ldd	r25, Y+8	; 0x08
    1914:	8d 83       	std	Y+5, r24	; 0x05

	for(loop=0u; loop <to ; loop++ ){
    1916:	1e 82       	std	Y+6, r1	; 0x06
    1918:	4c c0       	rjmp	.+152    	; 0x19b2 <DIO_ChannelGroupWrite+0xda>
		uint8_t channel_id=channel_group_variabe.group_ids[loop];
    191a:	8e 81       	ldd	r24, Y+6	; 0x06
    191c:	88 2f       	mov	r24, r24
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	01 96       	adiw	r24, 0x01	; 1
    1922:	9c 01       	movw	r18, r24
    1924:	22 0f       	add	r18, r18
    1926:	33 1f       	adc	r19, r19
    1928:	ce 01       	movw	r24, r28
    192a:	01 96       	adiw	r24, 0x01	; 1
    192c:	82 0f       	add	r24, r18
    192e:	93 1f       	adc	r25, r19
    1930:	fc 01       	movw	r30, r24
    1932:	36 96       	adiw	r30, 0x06	; 6
    1934:	80 81       	ld	r24, Z
    1936:	91 81       	ldd	r25, Z+1	; 0x01
    1938:	8c 83       	std	Y+4, r24	; 0x04
		uint8_t portid=dio_config_array[channel_id].port_id;
    193a:	8c 81       	ldd	r24, Y+4	; 0x04
    193c:	28 2f       	mov	r18, r24
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	c9 01       	movw	r24, r18
    1942:	88 0f       	add	r24, r24
    1944:	99 1f       	adc	r25, r25
    1946:	82 0f       	add	r24, r18
    1948:	93 1f       	adc	r25, r19
    194a:	fc 01       	movw	r30, r24
    194c:	e8 57       	subi	r30, 0x78	; 120
    194e:	fe 4f       	sbci	r31, 0xFE	; 254
    1950:	80 81       	ld	r24, Z
    1952:	8b 83       	std	Y+3, r24	; 0x03
		uint8_t pin_num=dio_config_array[channel_id].pin_num;
    1954:	8c 81       	ldd	r24, Y+4	; 0x04
    1956:	28 2f       	mov	r18, r24
    1958:	30 e0       	ldi	r19, 0x00	; 0
    195a:	c9 01       	movw	r24, r18
    195c:	88 0f       	add	r24, r24
    195e:	99 1f       	adc	r25, r25
    1960:	82 0f       	add	r24, r18
    1962:	93 1f       	adc	r25, r19
    1964:	fc 01       	movw	r30, r24
    1966:	e7 57       	subi	r30, 0x77	; 119
    1968:	fe 4f       	sbci	r31, 0xFE	; 254
    196a:	80 81       	ld	r24, Z
    196c:	8a 83       	std	Y+2, r24	; 0x02
		uint8_t bit_data=READ_BIT(data,loop);
    196e:	8e 81       	ldd	r24, Y+6	; 0x06
    1970:	28 2f       	mov	r18, r24
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	81 e0       	ldi	r24, 0x01	; 1
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	02 c0       	rjmp	.+4      	; 0x197e <DIO_ChannelGroupWrite+0xa6>
    197a:	88 0f       	add	r24, r24
    197c:	99 1f       	adc	r25, r25
    197e:	2a 95       	dec	r18
    1980:	e2 f7       	brpl	.-8      	; 0x197a <DIO_ChannelGroupWrite+0xa2>
    1982:	98 2f       	mov	r25, r24
    1984:	8b 89       	ldd	r24, Y+19	; 0x13
    1986:	89 23       	and	r24, r25
    1988:	28 2f       	mov	r18, r24
    198a:	30 e0       	ldi	r19, 0x00	; 0
    198c:	8e 81       	ldd	r24, Y+6	; 0x06
    198e:	88 2f       	mov	r24, r24
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	a9 01       	movw	r20, r18
    1994:	02 c0       	rjmp	.+4      	; 0x199a <DIO_ChannelGroupWrite+0xc2>
    1996:	55 95       	asr	r21
    1998:	47 95       	ror	r20
    199a:	8a 95       	dec	r24
    199c:	e2 f7       	brpl	.-8      	; 0x1996 <DIO_ChannelGroupWrite+0xbe>
    199e:	ca 01       	movw	r24, r20
    19a0:	89 83       	std	Y+1, r24	; 0x01
		GPIO_writePin(portid,pin_num,bit_data);
    19a2:	8b 81       	ldd	r24, Y+3	; 0x03
    19a4:	6a 81       	ldd	r22, Y+2	; 0x02
    19a6:	49 81       	ldd	r20, Y+1	; 0x01
    19a8:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <GPIO_writePin>
void DIO_ChannelGroupWrite(ChannelGroupType channel_group_variabe , uint8_t data)
{
	uint8_t loop;
	uint8_t to=channel_group_variabe.no_of_channels;

	for(loop=0u; loop <to ; loop++ ){
    19ac:	8e 81       	ldd	r24, Y+6	; 0x06
    19ae:	8f 5f       	subi	r24, 0xFF	; 255
    19b0:	8e 83       	std	Y+6, r24	; 0x06
    19b2:	9e 81       	ldd	r25, Y+6	; 0x06
    19b4:	8d 81       	ldd	r24, Y+5	; 0x05
    19b6:	98 17       	cp	r25, r24
    19b8:	08 f4       	brcc	.+2      	; 0x19bc <DIO_ChannelGroupWrite+0xe4>
    19ba:	af cf       	rjmp	.-162    	; 0x191a <DIO_ChannelGroupWrite+0x42>
		GPIO_writePin(portid,pin_num,bit_data);

	}


}
    19bc:	63 96       	adiw	r28, 0x13	; 19
    19be:	0f b6       	in	r0, 0x3f	; 63
    19c0:	f8 94       	cli
    19c2:	de bf       	out	0x3e, r29	; 62
    19c4:	0f be       	out	0x3f, r0	; 63
    19c6:	cd bf       	out	0x3d, r28	; 61
    19c8:	cf 91       	pop	r28
    19ca:	df 91       	pop	r29
    19cc:	1f 91       	pop	r17
    19ce:	0f 91       	pop	r16
    19d0:	ff 90       	pop	r15
    19d2:	ef 90       	pop	r14
    19d4:	cf 90       	pop	r12
    19d6:	08 95       	ret

000019d8 <DIO_ChannelGroupRead>:


void DIO_ChannelGroupRead(ChannelGroupType channel_group_variabe ,uint8_t * data_ptr)
{
    19d8:	cf 92       	push	r12
    19da:	df 92       	push	r13
    19dc:	ef 92       	push	r14
    19de:	ff 92       	push	r15
    19e0:	0f 93       	push	r16
    19e2:	1f 93       	push	r17
    19e4:	df 93       	push	r29
    19e6:	cf 93       	push	r28
    19e8:	cd b7       	in	r28, 0x3d	; 61
    19ea:	de b7       	in	r29, 0x3e	; 62
    19ec:	64 97       	sbiw	r28, 0x14	; 20
    19ee:	0f b6       	in	r0, 0x3f	; 63
    19f0:	f8 94       	cli
    19f2:	de bf       	out	0x3e, r29	; 62
    19f4:	0f be       	out	0x3f, r0	; 63
    19f6:	cd bf       	out	0x3d, r28	; 61
    19f8:	ef 82       	std	Y+7, r14	; 0x07
    19fa:	f8 86       	std	Y+8, r15	; 0x08
    19fc:	09 87       	std	Y+9, r16	; 0x09
    19fe:	1a 87       	std	Y+10, r17	; 0x0a
    1a00:	2b 87       	std	Y+11, r18	; 0x0b
    1a02:	3c 87       	std	Y+12, r19	; 0x0c
    1a04:	4d 87       	std	Y+13, r20	; 0x0d
    1a06:	5e 87       	std	Y+14, r21	; 0x0e
    1a08:	6f 87       	std	Y+15, r22	; 0x0f
    1a0a:	78 8b       	std	Y+16, r23	; 0x10
    1a0c:	89 8b       	std	Y+17, r24	; 0x11
    1a0e:	9a 8b       	std	Y+18, r25	; 0x12
    1a10:	dc 8a       	std	Y+20, r13	; 0x14
    1a12:	cb 8a       	std	Y+19, r12	; 0x13

	uint8_t loop;
	uint8_t to=channel_group_variabe.no_of_channels;
    1a14:	8f 81       	ldd	r24, Y+7	; 0x07
    1a16:	98 85       	ldd	r25, Y+8	; 0x08
    1a18:	8d 83       	std	Y+5, r24	; 0x05

	for(loop=0u; loop <to ; loop++ ){
    1a1a:	1e 82       	std	Y+6, r1	; 0x06
    1a1c:	5d c0       	rjmp	.+186    	; 0x1ad8 <DIO_ChannelGroupRead+0x100>
		uint8_t channel_id=channel_group_variabe.group_ids[loop];
    1a1e:	8e 81       	ldd	r24, Y+6	; 0x06
    1a20:	88 2f       	mov	r24, r24
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	01 96       	adiw	r24, 0x01	; 1
    1a26:	9c 01       	movw	r18, r24
    1a28:	22 0f       	add	r18, r18
    1a2a:	33 1f       	adc	r19, r19
    1a2c:	ce 01       	movw	r24, r28
    1a2e:	01 96       	adiw	r24, 0x01	; 1
    1a30:	82 0f       	add	r24, r18
    1a32:	93 1f       	adc	r25, r19
    1a34:	fc 01       	movw	r30, r24
    1a36:	36 96       	adiw	r30, 0x06	; 6
    1a38:	80 81       	ld	r24, Z
    1a3a:	91 81       	ldd	r25, Z+1	; 0x01
    1a3c:	8c 83       	std	Y+4, r24	; 0x04
		uint8_t portid=dio_config_array[channel_id].port_id;
    1a3e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a40:	28 2f       	mov	r18, r24
    1a42:	30 e0       	ldi	r19, 0x00	; 0
    1a44:	c9 01       	movw	r24, r18
    1a46:	88 0f       	add	r24, r24
    1a48:	99 1f       	adc	r25, r25
    1a4a:	82 0f       	add	r24, r18
    1a4c:	93 1f       	adc	r25, r19
    1a4e:	fc 01       	movw	r30, r24
    1a50:	e8 57       	subi	r30, 0x78	; 120
    1a52:	fe 4f       	sbci	r31, 0xFE	; 254
    1a54:	80 81       	ld	r24, Z
    1a56:	8b 83       	std	Y+3, r24	; 0x03
		uint8_t pin_num=dio_config_array[channel_id].pin_num;
    1a58:	8c 81       	ldd	r24, Y+4	; 0x04
    1a5a:	28 2f       	mov	r18, r24
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	c9 01       	movw	r24, r18
    1a60:	88 0f       	add	r24, r24
    1a62:	99 1f       	adc	r25, r25
    1a64:	82 0f       	add	r24, r18
    1a66:	93 1f       	adc	r25, r19
    1a68:	fc 01       	movw	r30, r24
    1a6a:	e7 57       	subi	r30, 0x77	; 119
    1a6c:	fe 4f       	sbci	r31, 0xFE	; 254
    1a6e:	80 81       	ld	r24, Z
    1a70:	8a 83       	std	Y+2, r24	; 0x02
		uint8_t data = GPIO_readPin(portid, pin_num);
    1a72:	8b 81       	ldd	r24, Y+3	; 0x03
    1a74:	6a 81       	ldd	r22, Y+2	; 0x02
    1a76:	0e 94 c3 0a 	call	0x1586	; 0x1586 <GPIO_readPin>
    1a7a:	89 83       	std	Y+1, r24	; 0x01
		if(data == LOGIC_HIGH){
    1a7c:	89 81       	ldd	r24, Y+1	; 0x01
    1a7e:	81 30       	cpi	r24, 0x01	; 1
    1a80:	a1 f4       	brne	.+40     	; 0x1aaa <DIO_ChannelGroupRead+0xd2>
			SET_BIT(* data_ptr,loop);
    1a82:	eb 89       	ldd	r30, Y+19	; 0x13
    1a84:	fc 89       	ldd	r31, Y+20	; 0x14
    1a86:	80 81       	ld	r24, Z
    1a88:	48 2f       	mov	r20, r24
    1a8a:	8e 81       	ldd	r24, Y+6	; 0x06
    1a8c:	28 2f       	mov	r18, r24
    1a8e:	30 e0       	ldi	r19, 0x00	; 0
    1a90:	81 e0       	ldi	r24, 0x01	; 1
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	02 2e       	mov	r0, r18
    1a96:	02 c0       	rjmp	.+4      	; 0x1a9c <DIO_ChannelGroupRead+0xc4>
    1a98:	88 0f       	add	r24, r24
    1a9a:	99 1f       	adc	r25, r25
    1a9c:	0a 94       	dec	r0
    1a9e:	e2 f7       	brpl	.-8      	; 0x1a98 <DIO_ChannelGroupRead+0xc0>
    1aa0:	84 2b       	or	r24, r20
    1aa2:	eb 89       	ldd	r30, Y+19	; 0x13
    1aa4:	fc 89       	ldd	r31, Y+20	; 0x14
    1aa6:	80 83       	st	Z, r24
    1aa8:	14 c0       	rjmp	.+40     	; 0x1ad2 <DIO_ChannelGroupRead+0xfa>
		}else{
			CLEAR_BIT(* data_ptr,loop);
    1aaa:	eb 89       	ldd	r30, Y+19	; 0x13
    1aac:	fc 89       	ldd	r31, Y+20	; 0x14
    1aae:	80 81       	ld	r24, Z
    1ab0:	48 2f       	mov	r20, r24
    1ab2:	8e 81       	ldd	r24, Y+6	; 0x06
    1ab4:	28 2f       	mov	r18, r24
    1ab6:	30 e0       	ldi	r19, 0x00	; 0
    1ab8:	81 e0       	ldi	r24, 0x01	; 1
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	02 2e       	mov	r0, r18
    1abe:	02 c0       	rjmp	.+4      	; 0x1ac4 <DIO_ChannelGroupRead+0xec>
    1ac0:	88 0f       	add	r24, r24
    1ac2:	99 1f       	adc	r25, r25
    1ac4:	0a 94       	dec	r0
    1ac6:	e2 f7       	brpl	.-8      	; 0x1ac0 <DIO_ChannelGroupRead+0xe8>
    1ac8:	80 95       	com	r24
    1aca:	84 23       	and	r24, r20
    1acc:	eb 89       	ldd	r30, Y+19	; 0x13
    1ace:	fc 89       	ldd	r31, Y+20	; 0x14
    1ad0:	80 83       	st	Z, r24
{

	uint8_t loop;
	uint8_t to=channel_group_variabe.no_of_channels;

	for(loop=0u; loop <to ; loop++ ){
    1ad2:	8e 81       	ldd	r24, Y+6	; 0x06
    1ad4:	8f 5f       	subi	r24, 0xFF	; 255
    1ad6:	8e 83       	std	Y+6, r24	; 0x06
    1ad8:	9e 81       	ldd	r25, Y+6	; 0x06
    1ada:	8d 81       	ldd	r24, Y+5	; 0x05
    1adc:	98 17       	cp	r25, r24
    1ade:	08 f4       	brcc	.+2      	; 0x1ae2 <DIO_ChannelGroupRead+0x10a>
    1ae0:	9e cf       	rjmp	.-196    	; 0x1a1e <DIO_ChannelGroupRead+0x46>
		}else{
			CLEAR_BIT(* data_ptr,loop);
		}
	}

}
    1ae2:	64 96       	adiw	r28, 0x14	; 20
    1ae4:	0f b6       	in	r0, 0x3f	; 63
    1ae6:	f8 94       	cli
    1ae8:	de bf       	out	0x3e, r29	; 62
    1aea:	0f be       	out	0x3f, r0	; 63
    1aec:	cd bf       	out	0x3d, r28	; 61
    1aee:	cf 91       	pop	r28
    1af0:	df 91       	pop	r29
    1af2:	1f 91       	pop	r17
    1af4:	0f 91       	pop	r16
    1af6:	ff 90       	pop	r15
    1af8:	ef 90       	pop	r14
    1afa:	df 90       	pop	r13
    1afc:	cf 90       	pop	r12
    1afe:	08 95       	ret

00001b00 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1b00:	df 93       	push	r29
    1b02:	cf 93       	push	r28
    1b04:	cd b7       	in	r28, 0x3d	; 61
    1b06:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1b08:	83 e0       	ldi	r24, 0x03	; 3
    1b0a:	60 e0       	ldi	r22, 0x00	; 0
    1b0c:	41 e0       	ldi	r20, 0x01	; 1
    1b0e:	0e 94 ed 08 	call	0x11da	; 0x11da <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    1b12:	83 e0       	ldi	r24, 0x03	; 3
    1b14:	61 e0       	ldi	r22, 0x01	; 1
    1b16:	41 e0       	ldi	r20, 0x01	; 1
    1b18:	0e 94 ed 08 	call	0x11da	; 0x11da <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1b1c:	83 e0       	ldi	r24, 0x03	; 3
    1b1e:	62 e0       	ldi	r22, 0x02	; 2
    1b20:	41 e0       	ldi	r20, 0x01	; 1
    1b22:	0e 94 ed 08 	call	0x11da	; 0x11da <GPIO_setupPinDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1b26:	82 e0       	ldi	r24, 0x02	; 2
    1b28:	6f ef       	ldi	r22, 0xFF	; 255
    1b2a:	0e 94 5e 0b 	call	0x16bc	; 0x16bc <GPIO_setupPortDirection>

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1b2e:	88 e3       	ldi	r24, 0x38	; 56
    1b30:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1b34:	8c e0       	ldi	r24, 0x0C	; 12
    1b36:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1b3a:	81 e0       	ldi	r24, 0x01	; 1
    1b3c:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <LCD_sendCommand>
}
    1b40:	cf 91       	pop	r28
    1b42:	df 91       	pop	r29
    1b44:	08 95       	ret

00001b46 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1b46:	df 93       	push	r29
    1b48:	cf 93       	push	r28
    1b4a:	cd b7       	in	r28, 0x3d	; 61
    1b4c:	de b7       	in	r29, 0x3e	; 62
    1b4e:	e9 97       	sbiw	r28, 0x39	; 57
    1b50:	0f b6       	in	r0, 0x3f	; 63
    1b52:	f8 94       	cli
    1b54:	de bf       	out	0x3e, r29	; 62
    1b56:	0f be       	out	0x3f, r0	; 63
    1b58:	cd bf       	out	0x3d, r28	; 61
    1b5a:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1b5c:	83 e0       	ldi	r24, 0x03	; 3
    1b5e:	60 e0       	ldi	r22, 0x00	; 0
    1b60:	40 e0       	ldi	r20, 0x00	; 0
    1b62:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1b66:	83 e0       	ldi	r24, 0x03	; 3
    1b68:	61 e0       	ldi	r22, 0x01	; 1
    1b6a:	40 e0       	ldi	r20, 0x00	; 0
    1b6c:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <GPIO_writePin>
    1b70:	80 e0       	ldi	r24, 0x00	; 0
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	a0 e8       	ldi	r26, 0x80	; 128
    1b76:	bf e3       	ldi	r27, 0x3F	; 63
    1b78:	8d ab       	std	Y+53, r24	; 0x35
    1b7a:	9e ab       	std	Y+54, r25	; 0x36
    1b7c:	af ab       	std	Y+55, r26	; 0x37
    1b7e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b80:	6d a9       	ldd	r22, Y+53	; 0x35
    1b82:	7e a9       	ldd	r23, Y+54	; 0x36
    1b84:	8f a9       	ldd	r24, Y+55	; 0x37
    1b86:	98 ad       	ldd	r25, Y+56	; 0x38
    1b88:	20 e0       	ldi	r18, 0x00	; 0
    1b8a:	30 e0       	ldi	r19, 0x00	; 0
    1b8c:	4a e7       	ldi	r20, 0x7A	; 122
    1b8e:	53 e4       	ldi	r21, 0x43	; 67
    1b90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b94:	dc 01       	movw	r26, r24
    1b96:	cb 01       	movw	r24, r22
    1b98:	89 ab       	std	Y+49, r24	; 0x31
    1b9a:	9a ab       	std	Y+50, r25	; 0x32
    1b9c:	ab ab       	std	Y+51, r26	; 0x33
    1b9e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ba0:	69 a9       	ldd	r22, Y+49	; 0x31
    1ba2:	7a a9       	ldd	r23, Y+50	; 0x32
    1ba4:	8b a9       	ldd	r24, Y+51	; 0x33
    1ba6:	9c a9       	ldd	r25, Y+52	; 0x34
    1ba8:	20 e0       	ldi	r18, 0x00	; 0
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	40 e8       	ldi	r20, 0x80	; 128
    1bae:	5f e3       	ldi	r21, 0x3F	; 63
    1bb0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bb4:	88 23       	and	r24, r24
    1bb6:	2c f4       	brge	.+10     	; 0x1bc2 <LCD_sendCommand+0x7c>
		__ticks = 1;
    1bb8:	81 e0       	ldi	r24, 0x01	; 1
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	98 ab       	std	Y+48, r25	; 0x30
    1bbe:	8f a7       	std	Y+47, r24	; 0x2f
    1bc0:	3f c0       	rjmp	.+126    	; 0x1c40 <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    1bc2:	69 a9       	ldd	r22, Y+49	; 0x31
    1bc4:	7a a9       	ldd	r23, Y+50	; 0x32
    1bc6:	8b a9       	ldd	r24, Y+51	; 0x33
    1bc8:	9c a9       	ldd	r25, Y+52	; 0x34
    1bca:	20 e0       	ldi	r18, 0x00	; 0
    1bcc:	3f ef       	ldi	r19, 0xFF	; 255
    1bce:	4f e7       	ldi	r20, 0x7F	; 127
    1bd0:	57 e4       	ldi	r21, 0x47	; 71
    1bd2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bd6:	18 16       	cp	r1, r24
    1bd8:	4c f5       	brge	.+82     	; 0x1c2c <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bda:	6d a9       	ldd	r22, Y+53	; 0x35
    1bdc:	7e a9       	ldd	r23, Y+54	; 0x36
    1bde:	8f a9       	ldd	r24, Y+55	; 0x37
    1be0:	98 ad       	ldd	r25, Y+56	; 0x38
    1be2:	20 e0       	ldi	r18, 0x00	; 0
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	40 e2       	ldi	r20, 0x20	; 32
    1be8:	51 e4       	ldi	r21, 0x41	; 65
    1bea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bee:	dc 01       	movw	r26, r24
    1bf0:	cb 01       	movw	r24, r22
    1bf2:	bc 01       	movw	r22, r24
    1bf4:	cd 01       	movw	r24, r26
    1bf6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bfa:	dc 01       	movw	r26, r24
    1bfc:	cb 01       	movw	r24, r22
    1bfe:	98 ab       	std	Y+48, r25	; 0x30
    1c00:	8f a7       	std	Y+47, r24	; 0x2f
    1c02:	0f c0       	rjmp	.+30     	; 0x1c22 <LCD_sendCommand+0xdc>
    1c04:	89 e1       	ldi	r24, 0x19	; 25
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	9e a7       	std	Y+46, r25	; 0x2e
    1c0a:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c0c:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c0e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c10:	01 97       	sbiw	r24, 0x01	; 1
    1c12:	f1 f7       	brne	.-4      	; 0x1c10 <LCD_sendCommand+0xca>
    1c14:	9e a7       	std	Y+46, r25	; 0x2e
    1c16:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c18:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c1a:	98 a9       	ldd	r25, Y+48	; 0x30
    1c1c:	01 97       	sbiw	r24, 0x01	; 1
    1c1e:	98 ab       	std	Y+48, r25	; 0x30
    1c20:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c22:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c24:	98 a9       	ldd	r25, Y+48	; 0x30
    1c26:	00 97       	sbiw	r24, 0x00	; 0
    1c28:	69 f7       	brne	.-38     	; 0x1c04 <LCD_sendCommand+0xbe>
    1c2a:	14 c0       	rjmp	.+40     	; 0x1c54 <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c2c:	69 a9       	ldd	r22, Y+49	; 0x31
    1c2e:	7a a9       	ldd	r23, Y+50	; 0x32
    1c30:	8b a9       	ldd	r24, Y+51	; 0x33
    1c32:	9c a9       	ldd	r25, Y+52	; 0x34
    1c34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c38:	dc 01       	movw	r26, r24
    1c3a:	cb 01       	movw	r24, r22
    1c3c:	98 ab       	std	Y+48, r25	; 0x30
    1c3e:	8f a7       	std	Y+47, r24	; 0x2f
    1c40:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c42:	98 a9       	ldd	r25, Y+48	; 0x30
    1c44:	9c a7       	std	Y+44, r25	; 0x2c
    1c46:	8b a7       	std	Y+43, r24	; 0x2b
    1c48:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c4a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c4c:	01 97       	sbiw	r24, 0x01	; 1
    1c4e:	f1 f7       	brne	.-4      	; 0x1c4c <LCD_sendCommand+0x106>
    1c50:	9c a7       	std	Y+44, r25	; 0x2c
    1c52:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1c54:	83 e0       	ldi	r24, 0x03	; 3
    1c56:	62 e0       	ldi	r22, 0x02	; 2
    1c58:	41 e0       	ldi	r20, 0x01	; 1
    1c5a:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <GPIO_writePin>
    1c5e:	80 e0       	ldi	r24, 0x00	; 0
    1c60:	90 e0       	ldi	r25, 0x00	; 0
    1c62:	a0 e8       	ldi	r26, 0x80	; 128
    1c64:	bf e3       	ldi	r27, 0x3F	; 63
    1c66:	8f a3       	std	Y+39, r24	; 0x27
    1c68:	98 a7       	std	Y+40, r25	; 0x28
    1c6a:	a9 a7       	std	Y+41, r26	; 0x29
    1c6c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c6e:	6f a1       	ldd	r22, Y+39	; 0x27
    1c70:	78 a5       	ldd	r23, Y+40	; 0x28
    1c72:	89 a5       	ldd	r24, Y+41	; 0x29
    1c74:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c76:	20 e0       	ldi	r18, 0x00	; 0
    1c78:	30 e0       	ldi	r19, 0x00	; 0
    1c7a:	4a e7       	ldi	r20, 0x7A	; 122
    1c7c:	53 e4       	ldi	r21, 0x43	; 67
    1c7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c82:	dc 01       	movw	r26, r24
    1c84:	cb 01       	movw	r24, r22
    1c86:	8b a3       	std	Y+35, r24	; 0x23
    1c88:	9c a3       	std	Y+36, r25	; 0x24
    1c8a:	ad a3       	std	Y+37, r26	; 0x25
    1c8c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c8e:	6b a1       	ldd	r22, Y+35	; 0x23
    1c90:	7c a1       	ldd	r23, Y+36	; 0x24
    1c92:	8d a1       	ldd	r24, Y+37	; 0x25
    1c94:	9e a1       	ldd	r25, Y+38	; 0x26
    1c96:	20 e0       	ldi	r18, 0x00	; 0
    1c98:	30 e0       	ldi	r19, 0x00	; 0
    1c9a:	40 e8       	ldi	r20, 0x80	; 128
    1c9c:	5f e3       	ldi	r21, 0x3F	; 63
    1c9e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ca2:	88 23       	and	r24, r24
    1ca4:	2c f4       	brge	.+10     	; 0x1cb0 <LCD_sendCommand+0x16a>
		__ticks = 1;
    1ca6:	81 e0       	ldi	r24, 0x01	; 1
    1ca8:	90 e0       	ldi	r25, 0x00	; 0
    1caa:	9a a3       	std	Y+34, r25	; 0x22
    1cac:	89 a3       	std	Y+33, r24	; 0x21
    1cae:	3f c0       	rjmp	.+126    	; 0x1d2e <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    1cb0:	6b a1       	ldd	r22, Y+35	; 0x23
    1cb2:	7c a1       	ldd	r23, Y+36	; 0x24
    1cb4:	8d a1       	ldd	r24, Y+37	; 0x25
    1cb6:	9e a1       	ldd	r25, Y+38	; 0x26
    1cb8:	20 e0       	ldi	r18, 0x00	; 0
    1cba:	3f ef       	ldi	r19, 0xFF	; 255
    1cbc:	4f e7       	ldi	r20, 0x7F	; 127
    1cbe:	57 e4       	ldi	r21, 0x47	; 71
    1cc0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cc4:	18 16       	cp	r1, r24
    1cc6:	4c f5       	brge	.+82     	; 0x1d1a <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cc8:	6f a1       	ldd	r22, Y+39	; 0x27
    1cca:	78 a5       	ldd	r23, Y+40	; 0x28
    1ccc:	89 a5       	ldd	r24, Y+41	; 0x29
    1cce:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cd0:	20 e0       	ldi	r18, 0x00	; 0
    1cd2:	30 e0       	ldi	r19, 0x00	; 0
    1cd4:	40 e2       	ldi	r20, 0x20	; 32
    1cd6:	51 e4       	ldi	r21, 0x41	; 65
    1cd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cdc:	dc 01       	movw	r26, r24
    1cde:	cb 01       	movw	r24, r22
    1ce0:	bc 01       	movw	r22, r24
    1ce2:	cd 01       	movw	r24, r26
    1ce4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ce8:	dc 01       	movw	r26, r24
    1cea:	cb 01       	movw	r24, r22
    1cec:	9a a3       	std	Y+34, r25	; 0x22
    1cee:	89 a3       	std	Y+33, r24	; 0x21
    1cf0:	0f c0       	rjmp	.+30     	; 0x1d10 <LCD_sendCommand+0x1ca>
    1cf2:	89 e1       	ldi	r24, 0x19	; 25
    1cf4:	90 e0       	ldi	r25, 0x00	; 0
    1cf6:	98 a3       	std	Y+32, r25	; 0x20
    1cf8:	8f 8f       	std	Y+31, r24	; 0x1f
    1cfa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1cfc:	98 a1       	ldd	r25, Y+32	; 0x20
    1cfe:	01 97       	sbiw	r24, 0x01	; 1
    1d00:	f1 f7       	brne	.-4      	; 0x1cfe <LCD_sendCommand+0x1b8>
    1d02:	98 a3       	std	Y+32, r25	; 0x20
    1d04:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d06:	89 a1       	ldd	r24, Y+33	; 0x21
    1d08:	9a a1       	ldd	r25, Y+34	; 0x22
    1d0a:	01 97       	sbiw	r24, 0x01	; 1
    1d0c:	9a a3       	std	Y+34, r25	; 0x22
    1d0e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d10:	89 a1       	ldd	r24, Y+33	; 0x21
    1d12:	9a a1       	ldd	r25, Y+34	; 0x22
    1d14:	00 97       	sbiw	r24, 0x00	; 0
    1d16:	69 f7       	brne	.-38     	; 0x1cf2 <LCD_sendCommand+0x1ac>
    1d18:	14 c0       	rjmp	.+40     	; 0x1d42 <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d1a:	6b a1       	ldd	r22, Y+35	; 0x23
    1d1c:	7c a1       	ldd	r23, Y+36	; 0x24
    1d1e:	8d a1       	ldd	r24, Y+37	; 0x25
    1d20:	9e a1       	ldd	r25, Y+38	; 0x26
    1d22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d26:	dc 01       	movw	r26, r24
    1d28:	cb 01       	movw	r24, r22
    1d2a:	9a a3       	std	Y+34, r25	; 0x22
    1d2c:	89 a3       	std	Y+33, r24	; 0x21
    1d2e:	89 a1       	ldd	r24, Y+33	; 0x21
    1d30:	9a a1       	ldd	r25, Y+34	; 0x22
    1d32:	9e 8f       	std	Y+30, r25	; 0x1e
    1d34:	8d 8f       	std	Y+29, r24	; 0x1d
    1d36:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d38:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d3a:	01 97       	sbiw	r24, 0x01	; 1
    1d3c:	f1 f7       	brne	.-4      	; 0x1d3a <LCD_sendCommand+0x1f4>
    1d3e:	9e 8f       	std	Y+30, r25	; 0x1e
    1d40:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1d42:	82 e0       	ldi	r24, 0x02	; 2
    1d44:	69 ad       	ldd	r22, Y+57	; 0x39
    1d46:	0e 94 a2 0b 	call	0x1744	; 0x1744 <GPIO_writePort>
    1d4a:	80 e0       	ldi	r24, 0x00	; 0
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	a0 e8       	ldi	r26, 0x80	; 128
    1d50:	bf e3       	ldi	r27, 0x3F	; 63
    1d52:	89 8f       	std	Y+25, r24	; 0x19
    1d54:	9a 8f       	std	Y+26, r25	; 0x1a
    1d56:	ab 8f       	std	Y+27, r26	; 0x1b
    1d58:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d5a:	69 8d       	ldd	r22, Y+25	; 0x19
    1d5c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d5e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d60:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d62:	20 e0       	ldi	r18, 0x00	; 0
    1d64:	30 e0       	ldi	r19, 0x00	; 0
    1d66:	4a e7       	ldi	r20, 0x7A	; 122
    1d68:	53 e4       	ldi	r21, 0x43	; 67
    1d6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d6e:	dc 01       	movw	r26, r24
    1d70:	cb 01       	movw	r24, r22
    1d72:	8d 8b       	std	Y+21, r24	; 0x15
    1d74:	9e 8b       	std	Y+22, r25	; 0x16
    1d76:	af 8b       	std	Y+23, r26	; 0x17
    1d78:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d7a:	6d 89       	ldd	r22, Y+21	; 0x15
    1d7c:	7e 89       	ldd	r23, Y+22	; 0x16
    1d7e:	8f 89       	ldd	r24, Y+23	; 0x17
    1d80:	98 8d       	ldd	r25, Y+24	; 0x18
    1d82:	20 e0       	ldi	r18, 0x00	; 0
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	40 e8       	ldi	r20, 0x80	; 128
    1d88:	5f e3       	ldi	r21, 0x3F	; 63
    1d8a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d8e:	88 23       	and	r24, r24
    1d90:	2c f4       	brge	.+10     	; 0x1d9c <LCD_sendCommand+0x256>
		__ticks = 1;
    1d92:	81 e0       	ldi	r24, 0x01	; 1
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	9c 8b       	std	Y+20, r25	; 0x14
    1d98:	8b 8b       	std	Y+19, r24	; 0x13
    1d9a:	3f c0       	rjmp	.+126    	; 0x1e1a <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    1d9c:	6d 89       	ldd	r22, Y+21	; 0x15
    1d9e:	7e 89       	ldd	r23, Y+22	; 0x16
    1da0:	8f 89       	ldd	r24, Y+23	; 0x17
    1da2:	98 8d       	ldd	r25, Y+24	; 0x18
    1da4:	20 e0       	ldi	r18, 0x00	; 0
    1da6:	3f ef       	ldi	r19, 0xFF	; 255
    1da8:	4f e7       	ldi	r20, 0x7F	; 127
    1daa:	57 e4       	ldi	r21, 0x47	; 71
    1dac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1db0:	18 16       	cp	r1, r24
    1db2:	4c f5       	brge	.+82     	; 0x1e06 <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1db4:	69 8d       	ldd	r22, Y+25	; 0x19
    1db6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1db8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dbc:	20 e0       	ldi	r18, 0x00	; 0
    1dbe:	30 e0       	ldi	r19, 0x00	; 0
    1dc0:	40 e2       	ldi	r20, 0x20	; 32
    1dc2:	51 e4       	ldi	r21, 0x41	; 65
    1dc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dc8:	dc 01       	movw	r26, r24
    1dca:	cb 01       	movw	r24, r22
    1dcc:	bc 01       	movw	r22, r24
    1dce:	cd 01       	movw	r24, r26
    1dd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dd4:	dc 01       	movw	r26, r24
    1dd6:	cb 01       	movw	r24, r22
    1dd8:	9c 8b       	std	Y+20, r25	; 0x14
    1dda:	8b 8b       	std	Y+19, r24	; 0x13
    1ddc:	0f c0       	rjmp	.+30     	; 0x1dfc <LCD_sendCommand+0x2b6>
    1dde:	89 e1       	ldi	r24, 0x19	; 25
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	9a 8b       	std	Y+18, r25	; 0x12
    1de4:	89 8b       	std	Y+17, r24	; 0x11
    1de6:	89 89       	ldd	r24, Y+17	; 0x11
    1de8:	9a 89       	ldd	r25, Y+18	; 0x12
    1dea:	01 97       	sbiw	r24, 0x01	; 1
    1dec:	f1 f7       	brne	.-4      	; 0x1dea <LCD_sendCommand+0x2a4>
    1dee:	9a 8b       	std	Y+18, r25	; 0x12
    1df0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1df2:	8b 89       	ldd	r24, Y+19	; 0x13
    1df4:	9c 89       	ldd	r25, Y+20	; 0x14
    1df6:	01 97       	sbiw	r24, 0x01	; 1
    1df8:	9c 8b       	std	Y+20, r25	; 0x14
    1dfa:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dfc:	8b 89       	ldd	r24, Y+19	; 0x13
    1dfe:	9c 89       	ldd	r25, Y+20	; 0x14
    1e00:	00 97       	sbiw	r24, 0x00	; 0
    1e02:	69 f7       	brne	.-38     	; 0x1dde <LCD_sendCommand+0x298>
    1e04:	14 c0       	rjmp	.+40     	; 0x1e2e <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e06:	6d 89       	ldd	r22, Y+21	; 0x15
    1e08:	7e 89       	ldd	r23, Y+22	; 0x16
    1e0a:	8f 89       	ldd	r24, Y+23	; 0x17
    1e0c:	98 8d       	ldd	r25, Y+24	; 0x18
    1e0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e12:	dc 01       	movw	r26, r24
    1e14:	cb 01       	movw	r24, r22
    1e16:	9c 8b       	std	Y+20, r25	; 0x14
    1e18:	8b 8b       	std	Y+19, r24	; 0x13
    1e1a:	8b 89       	ldd	r24, Y+19	; 0x13
    1e1c:	9c 89       	ldd	r25, Y+20	; 0x14
    1e1e:	98 8b       	std	Y+16, r25	; 0x10
    1e20:	8f 87       	std	Y+15, r24	; 0x0f
    1e22:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e24:	98 89       	ldd	r25, Y+16	; 0x10
    1e26:	01 97       	sbiw	r24, 0x01	; 1
    1e28:	f1 f7       	brne	.-4      	; 0x1e26 <LCD_sendCommand+0x2e0>
    1e2a:	98 8b       	std	Y+16, r25	; 0x10
    1e2c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1e2e:	83 e0       	ldi	r24, 0x03	; 3
    1e30:	62 e0       	ldi	r22, 0x02	; 2
    1e32:	40 e0       	ldi	r20, 0x00	; 0
    1e34:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <GPIO_writePin>
    1e38:	80 e0       	ldi	r24, 0x00	; 0
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	a0 e8       	ldi	r26, 0x80	; 128
    1e3e:	bf e3       	ldi	r27, 0x3F	; 63
    1e40:	8b 87       	std	Y+11, r24	; 0x0b
    1e42:	9c 87       	std	Y+12, r25	; 0x0c
    1e44:	ad 87       	std	Y+13, r26	; 0x0d
    1e46:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e48:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e50:	20 e0       	ldi	r18, 0x00	; 0
    1e52:	30 e0       	ldi	r19, 0x00	; 0
    1e54:	4a e7       	ldi	r20, 0x7A	; 122
    1e56:	53 e4       	ldi	r21, 0x43	; 67
    1e58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e5c:	dc 01       	movw	r26, r24
    1e5e:	cb 01       	movw	r24, r22
    1e60:	8f 83       	std	Y+7, r24	; 0x07
    1e62:	98 87       	std	Y+8, r25	; 0x08
    1e64:	a9 87       	std	Y+9, r26	; 0x09
    1e66:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e68:	6f 81       	ldd	r22, Y+7	; 0x07
    1e6a:	78 85       	ldd	r23, Y+8	; 0x08
    1e6c:	89 85       	ldd	r24, Y+9	; 0x09
    1e6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e70:	20 e0       	ldi	r18, 0x00	; 0
    1e72:	30 e0       	ldi	r19, 0x00	; 0
    1e74:	40 e8       	ldi	r20, 0x80	; 128
    1e76:	5f e3       	ldi	r21, 0x3F	; 63
    1e78:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e7c:	88 23       	and	r24, r24
    1e7e:	2c f4       	brge	.+10     	; 0x1e8a <LCD_sendCommand+0x344>
		__ticks = 1;
    1e80:	81 e0       	ldi	r24, 0x01	; 1
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	9e 83       	std	Y+6, r25	; 0x06
    1e86:	8d 83       	std	Y+5, r24	; 0x05
    1e88:	3f c0       	rjmp	.+126    	; 0x1f08 <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    1e8a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e8c:	78 85       	ldd	r23, Y+8	; 0x08
    1e8e:	89 85       	ldd	r24, Y+9	; 0x09
    1e90:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e92:	20 e0       	ldi	r18, 0x00	; 0
    1e94:	3f ef       	ldi	r19, 0xFF	; 255
    1e96:	4f e7       	ldi	r20, 0x7F	; 127
    1e98:	57 e4       	ldi	r21, 0x47	; 71
    1e9a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e9e:	18 16       	cp	r1, r24
    1ea0:	4c f5       	brge	.+82     	; 0x1ef4 <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ea2:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ea4:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ea6:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ea8:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eaa:	20 e0       	ldi	r18, 0x00	; 0
    1eac:	30 e0       	ldi	r19, 0x00	; 0
    1eae:	40 e2       	ldi	r20, 0x20	; 32
    1eb0:	51 e4       	ldi	r21, 0x41	; 65
    1eb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1eb6:	dc 01       	movw	r26, r24
    1eb8:	cb 01       	movw	r24, r22
    1eba:	bc 01       	movw	r22, r24
    1ebc:	cd 01       	movw	r24, r26
    1ebe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ec2:	dc 01       	movw	r26, r24
    1ec4:	cb 01       	movw	r24, r22
    1ec6:	9e 83       	std	Y+6, r25	; 0x06
    1ec8:	8d 83       	std	Y+5, r24	; 0x05
    1eca:	0f c0       	rjmp	.+30     	; 0x1eea <LCD_sendCommand+0x3a4>
    1ecc:	89 e1       	ldi	r24, 0x19	; 25
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	9c 83       	std	Y+4, r25	; 0x04
    1ed2:	8b 83       	std	Y+3, r24	; 0x03
    1ed4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ed8:	01 97       	sbiw	r24, 0x01	; 1
    1eda:	f1 f7       	brne	.-4      	; 0x1ed8 <LCD_sendCommand+0x392>
    1edc:	9c 83       	std	Y+4, r25	; 0x04
    1ede:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ee0:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee2:	9e 81       	ldd	r25, Y+6	; 0x06
    1ee4:	01 97       	sbiw	r24, 0x01	; 1
    1ee6:	9e 83       	std	Y+6, r25	; 0x06
    1ee8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eea:	8d 81       	ldd	r24, Y+5	; 0x05
    1eec:	9e 81       	ldd	r25, Y+6	; 0x06
    1eee:	00 97       	sbiw	r24, 0x00	; 0
    1ef0:	69 f7       	brne	.-38     	; 0x1ecc <LCD_sendCommand+0x386>
    1ef2:	14 c0       	rjmp	.+40     	; 0x1f1c <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ef4:	6f 81       	ldd	r22, Y+7	; 0x07
    1ef6:	78 85       	ldd	r23, Y+8	; 0x08
    1ef8:	89 85       	ldd	r24, Y+9	; 0x09
    1efa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1efc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f00:	dc 01       	movw	r26, r24
    1f02:	cb 01       	movw	r24, r22
    1f04:	9e 83       	std	Y+6, r25	; 0x06
    1f06:	8d 83       	std	Y+5, r24	; 0x05
    1f08:	8d 81       	ldd	r24, Y+5	; 0x05
    1f0a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f0c:	9a 83       	std	Y+2, r25	; 0x02
    1f0e:	89 83       	std	Y+1, r24	; 0x01
    1f10:	89 81       	ldd	r24, Y+1	; 0x01
    1f12:	9a 81       	ldd	r25, Y+2	; 0x02
    1f14:	01 97       	sbiw	r24, 0x01	; 1
    1f16:	f1 f7       	brne	.-4      	; 0x1f14 <LCD_sendCommand+0x3ce>
    1f18:	9a 83       	std	Y+2, r25	; 0x02
    1f1a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    1f1c:	e9 96       	adiw	r28, 0x39	; 57
    1f1e:	0f b6       	in	r0, 0x3f	; 63
    1f20:	f8 94       	cli
    1f22:	de bf       	out	0x3e, r29	; 62
    1f24:	0f be       	out	0x3f, r0	; 63
    1f26:	cd bf       	out	0x3d, r28	; 61
    1f28:	cf 91       	pop	r28
    1f2a:	df 91       	pop	r29
    1f2c:	08 95       	ret

00001f2e <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1f2e:	df 93       	push	r29
    1f30:	cf 93       	push	r28
    1f32:	cd b7       	in	r28, 0x3d	; 61
    1f34:	de b7       	in	r29, 0x3e	; 62
    1f36:	e9 97       	sbiw	r28, 0x39	; 57
    1f38:	0f b6       	in	r0, 0x3f	; 63
    1f3a:	f8 94       	cli
    1f3c:	de bf       	out	0x3e, r29	; 62
    1f3e:	0f be       	out	0x3f, r0	; 63
    1f40:	cd bf       	out	0x3d, r28	; 61
    1f42:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1f44:	83 e0       	ldi	r24, 0x03	; 3
    1f46:	60 e0       	ldi	r22, 0x00	; 0
    1f48:	41 e0       	ldi	r20, 0x01	; 1
    1f4a:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1f4e:	83 e0       	ldi	r24, 0x03	; 3
    1f50:	61 e0       	ldi	r22, 0x01	; 1
    1f52:	40 e0       	ldi	r20, 0x00	; 0
    1f54:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <GPIO_writePin>
    1f58:	80 e0       	ldi	r24, 0x00	; 0
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	a0 e8       	ldi	r26, 0x80	; 128
    1f5e:	bf e3       	ldi	r27, 0x3F	; 63
    1f60:	8d ab       	std	Y+53, r24	; 0x35
    1f62:	9e ab       	std	Y+54, r25	; 0x36
    1f64:	af ab       	std	Y+55, r26	; 0x37
    1f66:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f68:	6d a9       	ldd	r22, Y+53	; 0x35
    1f6a:	7e a9       	ldd	r23, Y+54	; 0x36
    1f6c:	8f a9       	ldd	r24, Y+55	; 0x37
    1f6e:	98 ad       	ldd	r25, Y+56	; 0x38
    1f70:	20 e0       	ldi	r18, 0x00	; 0
    1f72:	30 e0       	ldi	r19, 0x00	; 0
    1f74:	4a e7       	ldi	r20, 0x7A	; 122
    1f76:	53 e4       	ldi	r21, 0x43	; 67
    1f78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f7c:	dc 01       	movw	r26, r24
    1f7e:	cb 01       	movw	r24, r22
    1f80:	89 ab       	std	Y+49, r24	; 0x31
    1f82:	9a ab       	std	Y+50, r25	; 0x32
    1f84:	ab ab       	std	Y+51, r26	; 0x33
    1f86:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f88:	69 a9       	ldd	r22, Y+49	; 0x31
    1f8a:	7a a9       	ldd	r23, Y+50	; 0x32
    1f8c:	8b a9       	ldd	r24, Y+51	; 0x33
    1f8e:	9c a9       	ldd	r25, Y+52	; 0x34
    1f90:	20 e0       	ldi	r18, 0x00	; 0
    1f92:	30 e0       	ldi	r19, 0x00	; 0
    1f94:	40 e8       	ldi	r20, 0x80	; 128
    1f96:	5f e3       	ldi	r21, 0x3F	; 63
    1f98:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f9c:	88 23       	and	r24, r24
    1f9e:	2c f4       	brge	.+10     	; 0x1faa <LCD_displayCharacter+0x7c>
		__ticks = 1;
    1fa0:	81 e0       	ldi	r24, 0x01	; 1
    1fa2:	90 e0       	ldi	r25, 0x00	; 0
    1fa4:	98 ab       	std	Y+48, r25	; 0x30
    1fa6:	8f a7       	std	Y+47, r24	; 0x2f
    1fa8:	3f c0       	rjmp	.+126    	; 0x2028 <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    1faa:	69 a9       	ldd	r22, Y+49	; 0x31
    1fac:	7a a9       	ldd	r23, Y+50	; 0x32
    1fae:	8b a9       	ldd	r24, Y+51	; 0x33
    1fb0:	9c a9       	ldd	r25, Y+52	; 0x34
    1fb2:	20 e0       	ldi	r18, 0x00	; 0
    1fb4:	3f ef       	ldi	r19, 0xFF	; 255
    1fb6:	4f e7       	ldi	r20, 0x7F	; 127
    1fb8:	57 e4       	ldi	r21, 0x47	; 71
    1fba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fbe:	18 16       	cp	r1, r24
    1fc0:	4c f5       	brge	.+82     	; 0x2014 <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fc2:	6d a9       	ldd	r22, Y+53	; 0x35
    1fc4:	7e a9       	ldd	r23, Y+54	; 0x36
    1fc6:	8f a9       	ldd	r24, Y+55	; 0x37
    1fc8:	98 ad       	ldd	r25, Y+56	; 0x38
    1fca:	20 e0       	ldi	r18, 0x00	; 0
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	40 e2       	ldi	r20, 0x20	; 32
    1fd0:	51 e4       	ldi	r21, 0x41	; 65
    1fd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fd6:	dc 01       	movw	r26, r24
    1fd8:	cb 01       	movw	r24, r22
    1fda:	bc 01       	movw	r22, r24
    1fdc:	cd 01       	movw	r24, r26
    1fde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fe2:	dc 01       	movw	r26, r24
    1fe4:	cb 01       	movw	r24, r22
    1fe6:	98 ab       	std	Y+48, r25	; 0x30
    1fe8:	8f a7       	std	Y+47, r24	; 0x2f
    1fea:	0f c0       	rjmp	.+30     	; 0x200a <LCD_displayCharacter+0xdc>
    1fec:	89 e1       	ldi	r24, 0x19	; 25
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	9e a7       	std	Y+46, r25	; 0x2e
    1ff2:	8d a7       	std	Y+45, r24	; 0x2d
    1ff4:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ff6:	9e a5       	ldd	r25, Y+46	; 0x2e
    1ff8:	01 97       	sbiw	r24, 0x01	; 1
    1ffa:	f1 f7       	brne	.-4      	; 0x1ff8 <LCD_displayCharacter+0xca>
    1ffc:	9e a7       	std	Y+46, r25	; 0x2e
    1ffe:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2000:	8f a5       	ldd	r24, Y+47	; 0x2f
    2002:	98 a9       	ldd	r25, Y+48	; 0x30
    2004:	01 97       	sbiw	r24, 0x01	; 1
    2006:	98 ab       	std	Y+48, r25	; 0x30
    2008:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    200a:	8f a5       	ldd	r24, Y+47	; 0x2f
    200c:	98 a9       	ldd	r25, Y+48	; 0x30
    200e:	00 97       	sbiw	r24, 0x00	; 0
    2010:	69 f7       	brne	.-38     	; 0x1fec <LCD_displayCharacter+0xbe>
    2012:	14 c0       	rjmp	.+40     	; 0x203c <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2014:	69 a9       	ldd	r22, Y+49	; 0x31
    2016:	7a a9       	ldd	r23, Y+50	; 0x32
    2018:	8b a9       	ldd	r24, Y+51	; 0x33
    201a:	9c a9       	ldd	r25, Y+52	; 0x34
    201c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2020:	dc 01       	movw	r26, r24
    2022:	cb 01       	movw	r24, r22
    2024:	98 ab       	std	Y+48, r25	; 0x30
    2026:	8f a7       	std	Y+47, r24	; 0x2f
    2028:	8f a5       	ldd	r24, Y+47	; 0x2f
    202a:	98 a9       	ldd	r25, Y+48	; 0x30
    202c:	9c a7       	std	Y+44, r25	; 0x2c
    202e:	8b a7       	std	Y+43, r24	; 0x2b
    2030:	8b a5       	ldd	r24, Y+43	; 0x2b
    2032:	9c a5       	ldd	r25, Y+44	; 0x2c
    2034:	01 97       	sbiw	r24, 0x01	; 1
    2036:	f1 f7       	brne	.-4      	; 0x2034 <LCD_displayCharacter+0x106>
    2038:	9c a7       	std	Y+44, r25	; 0x2c
    203a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    203c:	83 e0       	ldi	r24, 0x03	; 3
    203e:	62 e0       	ldi	r22, 0x02	; 2
    2040:	41 e0       	ldi	r20, 0x01	; 1
    2042:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <GPIO_writePin>
    2046:	80 e0       	ldi	r24, 0x00	; 0
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	a0 e8       	ldi	r26, 0x80	; 128
    204c:	bf e3       	ldi	r27, 0x3F	; 63
    204e:	8f a3       	std	Y+39, r24	; 0x27
    2050:	98 a7       	std	Y+40, r25	; 0x28
    2052:	a9 a7       	std	Y+41, r26	; 0x29
    2054:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2056:	6f a1       	ldd	r22, Y+39	; 0x27
    2058:	78 a5       	ldd	r23, Y+40	; 0x28
    205a:	89 a5       	ldd	r24, Y+41	; 0x29
    205c:	9a a5       	ldd	r25, Y+42	; 0x2a
    205e:	20 e0       	ldi	r18, 0x00	; 0
    2060:	30 e0       	ldi	r19, 0x00	; 0
    2062:	4a e7       	ldi	r20, 0x7A	; 122
    2064:	53 e4       	ldi	r21, 0x43	; 67
    2066:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    206a:	dc 01       	movw	r26, r24
    206c:	cb 01       	movw	r24, r22
    206e:	8b a3       	std	Y+35, r24	; 0x23
    2070:	9c a3       	std	Y+36, r25	; 0x24
    2072:	ad a3       	std	Y+37, r26	; 0x25
    2074:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2076:	6b a1       	ldd	r22, Y+35	; 0x23
    2078:	7c a1       	ldd	r23, Y+36	; 0x24
    207a:	8d a1       	ldd	r24, Y+37	; 0x25
    207c:	9e a1       	ldd	r25, Y+38	; 0x26
    207e:	20 e0       	ldi	r18, 0x00	; 0
    2080:	30 e0       	ldi	r19, 0x00	; 0
    2082:	40 e8       	ldi	r20, 0x80	; 128
    2084:	5f e3       	ldi	r21, 0x3F	; 63
    2086:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    208a:	88 23       	and	r24, r24
    208c:	2c f4       	brge	.+10     	; 0x2098 <LCD_displayCharacter+0x16a>
		__ticks = 1;
    208e:	81 e0       	ldi	r24, 0x01	; 1
    2090:	90 e0       	ldi	r25, 0x00	; 0
    2092:	9a a3       	std	Y+34, r25	; 0x22
    2094:	89 a3       	std	Y+33, r24	; 0x21
    2096:	3f c0       	rjmp	.+126    	; 0x2116 <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    2098:	6b a1       	ldd	r22, Y+35	; 0x23
    209a:	7c a1       	ldd	r23, Y+36	; 0x24
    209c:	8d a1       	ldd	r24, Y+37	; 0x25
    209e:	9e a1       	ldd	r25, Y+38	; 0x26
    20a0:	20 e0       	ldi	r18, 0x00	; 0
    20a2:	3f ef       	ldi	r19, 0xFF	; 255
    20a4:	4f e7       	ldi	r20, 0x7F	; 127
    20a6:	57 e4       	ldi	r21, 0x47	; 71
    20a8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20ac:	18 16       	cp	r1, r24
    20ae:	4c f5       	brge	.+82     	; 0x2102 <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20b0:	6f a1       	ldd	r22, Y+39	; 0x27
    20b2:	78 a5       	ldd	r23, Y+40	; 0x28
    20b4:	89 a5       	ldd	r24, Y+41	; 0x29
    20b6:	9a a5       	ldd	r25, Y+42	; 0x2a
    20b8:	20 e0       	ldi	r18, 0x00	; 0
    20ba:	30 e0       	ldi	r19, 0x00	; 0
    20bc:	40 e2       	ldi	r20, 0x20	; 32
    20be:	51 e4       	ldi	r21, 0x41	; 65
    20c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20c4:	dc 01       	movw	r26, r24
    20c6:	cb 01       	movw	r24, r22
    20c8:	bc 01       	movw	r22, r24
    20ca:	cd 01       	movw	r24, r26
    20cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20d0:	dc 01       	movw	r26, r24
    20d2:	cb 01       	movw	r24, r22
    20d4:	9a a3       	std	Y+34, r25	; 0x22
    20d6:	89 a3       	std	Y+33, r24	; 0x21
    20d8:	0f c0       	rjmp	.+30     	; 0x20f8 <LCD_displayCharacter+0x1ca>
    20da:	89 e1       	ldi	r24, 0x19	; 25
    20dc:	90 e0       	ldi	r25, 0x00	; 0
    20de:	98 a3       	std	Y+32, r25	; 0x20
    20e0:	8f 8f       	std	Y+31, r24	; 0x1f
    20e2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20e4:	98 a1       	ldd	r25, Y+32	; 0x20
    20e6:	01 97       	sbiw	r24, 0x01	; 1
    20e8:	f1 f7       	brne	.-4      	; 0x20e6 <LCD_displayCharacter+0x1b8>
    20ea:	98 a3       	std	Y+32, r25	; 0x20
    20ec:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ee:	89 a1       	ldd	r24, Y+33	; 0x21
    20f0:	9a a1       	ldd	r25, Y+34	; 0x22
    20f2:	01 97       	sbiw	r24, 0x01	; 1
    20f4:	9a a3       	std	Y+34, r25	; 0x22
    20f6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20f8:	89 a1       	ldd	r24, Y+33	; 0x21
    20fa:	9a a1       	ldd	r25, Y+34	; 0x22
    20fc:	00 97       	sbiw	r24, 0x00	; 0
    20fe:	69 f7       	brne	.-38     	; 0x20da <LCD_displayCharacter+0x1ac>
    2100:	14 c0       	rjmp	.+40     	; 0x212a <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2102:	6b a1       	ldd	r22, Y+35	; 0x23
    2104:	7c a1       	ldd	r23, Y+36	; 0x24
    2106:	8d a1       	ldd	r24, Y+37	; 0x25
    2108:	9e a1       	ldd	r25, Y+38	; 0x26
    210a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    210e:	dc 01       	movw	r26, r24
    2110:	cb 01       	movw	r24, r22
    2112:	9a a3       	std	Y+34, r25	; 0x22
    2114:	89 a3       	std	Y+33, r24	; 0x21
    2116:	89 a1       	ldd	r24, Y+33	; 0x21
    2118:	9a a1       	ldd	r25, Y+34	; 0x22
    211a:	9e 8f       	std	Y+30, r25	; 0x1e
    211c:	8d 8f       	std	Y+29, r24	; 0x1d
    211e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2120:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2122:	01 97       	sbiw	r24, 0x01	; 1
    2124:	f1 f7       	brne	.-4      	; 0x2122 <LCD_displayCharacter+0x1f4>
    2126:	9e 8f       	std	Y+30, r25	; 0x1e
    2128:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    212a:	82 e0       	ldi	r24, 0x02	; 2
    212c:	69 ad       	ldd	r22, Y+57	; 0x39
    212e:	0e 94 a2 0b 	call	0x1744	; 0x1744 <GPIO_writePort>
    2132:	80 e0       	ldi	r24, 0x00	; 0
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	a0 e8       	ldi	r26, 0x80	; 128
    2138:	bf e3       	ldi	r27, 0x3F	; 63
    213a:	89 8f       	std	Y+25, r24	; 0x19
    213c:	9a 8f       	std	Y+26, r25	; 0x1a
    213e:	ab 8f       	std	Y+27, r26	; 0x1b
    2140:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2142:	69 8d       	ldd	r22, Y+25	; 0x19
    2144:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2146:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2148:	9c 8d       	ldd	r25, Y+28	; 0x1c
    214a:	20 e0       	ldi	r18, 0x00	; 0
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	4a e7       	ldi	r20, 0x7A	; 122
    2150:	53 e4       	ldi	r21, 0x43	; 67
    2152:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2156:	dc 01       	movw	r26, r24
    2158:	cb 01       	movw	r24, r22
    215a:	8d 8b       	std	Y+21, r24	; 0x15
    215c:	9e 8b       	std	Y+22, r25	; 0x16
    215e:	af 8b       	std	Y+23, r26	; 0x17
    2160:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2162:	6d 89       	ldd	r22, Y+21	; 0x15
    2164:	7e 89       	ldd	r23, Y+22	; 0x16
    2166:	8f 89       	ldd	r24, Y+23	; 0x17
    2168:	98 8d       	ldd	r25, Y+24	; 0x18
    216a:	20 e0       	ldi	r18, 0x00	; 0
    216c:	30 e0       	ldi	r19, 0x00	; 0
    216e:	40 e8       	ldi	r20, 0x80	; 128
    2170:	5f e3       	ldi	r21, 0x3F	; 63
    2172:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2176:	88 23       	and	r24, r24
    2178:	2c f4       	brge	.+10     	; 0x2184 <LCD_displayCharacter+0x256>
		__ticks = 1;
    217a:	81 e0       	ldi	r24, 0x01	; 1
    217c:	90 e0       	ldi	r25, 0x00	; 0
    217e:	9c 8b       	std	Y+20, r25	; 0x14
    2180:	8b 8b       	std	Y+19, r24	; 0x13
    2182:	3f c0       	rjmp	.+126    	; 0x2202 <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    2184:	6d 89       	ldd	r22, Y+21	; 0x15
    2186:	7e 89       	ldd	r23, Y+22	; 0x16
    2188:	8f 89       	ldd	r24, Y+23	; 0x17
    218a:	98 8d       	ldd	r25, Y+24	; 0x18
    218c:	20 e0       	ldi	r18, 0x00	; 0
    218e:	3f ef       	ldi	r19, 0xFF	; 255
    2190:	4f e7       	ldi	r20, 0x7F	; 127
    2192:	57 e4       	ldi	r21, 0x47	; 71
    2194:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2198:	18 16       	cp	r1, r24
    219a:	4c f5       	brge	.+82     	; 0x21ee <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    219c:	69 8d       	ldd	r22, Y+25	; 0x19
    219e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21a0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21a2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21a4:	20 e0       	ldi	r18, 0x00	; 0
    21a6:	30 e0       	ldi	r19, 0x00	; 0
    21a8:	40 e2       	ldi	r20, 0x20	; 32
    21aa:	51 e4       	ldi	r21, 0x41	; 65
    21ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21b0:	dc 01       	movw	r26, r24
    21b2:	cb 01       	movw	r24, r22
    21b4:	bc 01       	movw	r22, r24
    21b6:	cd 01       	movw	r24, r26
    21b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21bc:	dc 01       	movw	r26, r24
    21be:	cb 01       	movw	r24, r22
    21c0:	9c 8b       	std	Y+20, r25	; 0x14
    21c2:	8b 8b       	std	Y+19, r24	; 0x13
    21c4:	0f c0       	rjmp	.+30     	; 0x21e4 <LCD_displayCharacter+0x2b6>
    21c6:	89 e1       	ldi	r24, 0x19	; 25
    21c8:	90 e0       	ldi	r25, 0x00	; 0
    21ca:	9a 8b       	std	Y+18, r25	; 0x12
    21cc:	89 8b       	std	Y+17, r24	; 0x11
    21ce:	89 89       	ldd	r24, Y+17	; 0x11
    21d0:	9a 89       	ldd	r25, Y+18	; 0x12
    21d2:	01 97       	sbiw	r24, 0x01	; 1
    21d4:	f1 f7       	brne	.-4      	; 0x21d2 <LCD_displayCharacter+0x2a4>
    21d6:	9a 8b       	std	Y+18, r25	; 0x12
    21d8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21da:	8b 89       	ldd	r24, Y+19	; 0x13
    21dc:	9c 89       	ldd	r25, Y+20	; 0x14
    21de:	01 97       	sbiw	r24, 0x01	; 1
    21e0:	9c 8b       	std	Y+20, r25	; 0x14
    21e2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21e4:	8b 89       	ldd	r24, Y+19	; 0x13
    21e6:	9c 89       	ldd	r25, Y+20	; 0x14
    21e8:	00 97       	sbiw	r24, 0x00	; 0
    21ea:	69 f7       	brne	.-38     	; 0x21c6 <LCD_displayCharacter+0x298>
    21ec:	14 c0       	rjmp	.+40     	; 0x2216 <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21ee:	6d 89       	ldd	r22, Y+21	; 0x15
    21f0:	7e 89       	ldd	r23, Y+22	; 0x16
    21f2:	8f 89       	ldd	r24, Y+23	; 0x17
    21f4:	98 8d       	ldd	r25, Y+24	; 0x18
    21f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21fa:	dc 01       	movw	r26, r24
    21fc:	cb 01       	movw	r24, r22
    21fe:	9c 8b       	std	Y+20, r25	; 0x14
    2200:	8b 8b       	std	Y+19, r24	; 0x13
    2202:	8b 89       	ldd	r24, Y+19	; 0x13
    2204:	9c 89       	ldd	r25, Y+20	; 0x14
    2206:	98 8b       	std	Y+16, r25	; 0x10
    2208:	8f 87       	std	Y+15, r24	; 0x0f
    220a:	8f 85       	ldd	r24, Y+15	; 0x0f
    220c:	98 89       	ldd	r25, Y+16	; 0x10
    220e:	01 97       	sbiw	r24, 0x01	; 1
    2210:	f1 f7       	brne	.-4      	; 0x220e <LCD_displayCharacter+0x2e0>
    2212:	98 8b       	std	Y+16, r25	; 0x10
    2214:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2216:	83 e0       	ldi	r24, 0x03	; 3
    2218:	62 e0       	ldi	r22, 0x02	; 2
    221a:	40 e0       	ldi	r20, 0x00	; 0
    221c:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <GPIO_writePin>
    2220:	80 e0       	ldi	r24, 0x00	; 0
    2222:	90 e0       	ldi	r25, 0x00	; 0
    2224:	a0 e8       	ldi	r26, 0x80	; 128
    2226:	bf e3       	ldi	r27, 0x3F	; 63
    2228:	8b 87       	std	Y+11, r24	; 0x0b
    222a:	9c 87       	std	Y+12, r25	; 0x0c
    222c:	ad 87       	std	Y+13, r26	; 0x0d
    222e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2230:	6b 85       	ldd	r22, Y+11	; 0x0b
    2232:	7c 85       	ldd	r23, Y+12	; 0x0c
    2234:	8d 85       	ldd	r24, Y+13	; 0x0d
    2236:	9e 85       	ldd	r25, Y+14	; 0x0e
    2238:	20 e0       	ldi	r18, 0x00	; 0
    223a:	30 e0       	ldi	r19, 0x00	; 0
    223c:	4a e7       	ldi	r20, 0x7A	; 122
    223e:	53 e4       	ldi	r21, 0x43	; 67
    2240:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2244:	dc 01       	movw	r26, r24
    2246:	cb 01       	movw	r24, r22
    2248:	8f 83       	std	Y+7, r24	; 0x07
    224a:	98 87       	std	Y+8, r25	; 0x08
    224c:	a9 87       	std	Y+9, r26	; 0x09
    224e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2250:	6f 81       	ldd	r22, Y+7	; 0x07
    2252:	78 85       	ldd	r23, Y+8	; 0x08
    2254:	89 85       	ldd	r24, Y+9	; 0x09
    2256:	9a 85       	ldd	r25, Y+10	; 0x0a
    2258:	20 e0       	ldi	r18, 0x00	; 0
    225a:	30 e0       	ldi	r19, 0x00	; 0
    225c:	40 e8       	ldi	r20, 0x80	; 128
    225e:	5f e3       	ldi	r21, 0x3F	; 63
    2260:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2264:	88 23       	and	r24, r24
    2266:	2c f4       	brge	.+10     	; 0x2272 <LCD_displayCharacter+0x344>
		__ticks = 1;
    2268:	81 e0       	ldi	r24, 0x01	; 1
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	9e 83       	std	Y+6, r25	; 0x06
    226e:	8d 83       	std	Y+5, r24	; 0x05
    2270:	3f c0       	rjmp	.+126    	; 0x22f0 <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    2272:	6f 81       	ldd	r22, Y+7	; 0x07
    2274:	78 85       	ldd	r23, Y+8	; 0x08
    2276:	89 85       	ldd	r24, Y+9	; 0x09
    2278:	9a 85       	ldd	r25, Y+10	; 0x0a
    227a:	20 e0       	ldi	r18, 0x00	; 0
    227c:	3f ef       	ldi	r19, 0xFF	; 255
    227e:	4f e7       	ldi	r20, 0x7F	; 127
    2280:	57 e4       	ldi	r21, 0x47	; 71
    2282:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2286:	18 16       	cp	r1, r24
    2288:	4c f5       	brge	.+82     	; 0x22dc <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    228a:	6b 85       	ldd	r22, Y+11	; 0x0b
    228c:	7c 85       	ldd	r23, Y+12	; 0x0c
    228e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2290:	9e 85       	ldd	r25, Y+14	; 0x0e
    2292:	20 e0       	ldi	r18, 0x00	; 0
    2294:	30 e0       	ldi	r19, 0x00	; 0
    2296:	40 e2       	ldi	r20, 0x20	; 32
    2298:	51 e4       	ldi	r21, 0x41	; 65
    229a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    229e:	dc 01       	movw	r26, r24
    22a0:	cb 01       	movw	r24, r22
    22a2:	bc 01       	movw	r22, r24
    22a4:	cd 01       	movw	r24, r26
    22a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22aa:	dc 01       	movw	r26, r24
    22ac:	cb 01       	movw	r24, r22
    22ae:	9e 83       	std	Y+6, r25	; 0x06
    22b0:	8d 83       	std	Y+5, r24	; 0x05
    22b2:	0f c0       	rjmp	.+30     	; 0x22d2 <LCD_displayCharacter+0x3a4>
    22b4:	89 e1       	ldi	r24, 0x19	; 25
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	9c 83       	std	Y+4, r25	; 0x04
    22ba:	8b 83       	std	Y+3, r24	; 0x03
    22bc:	8b 81       	ldd	r24, Y+3	; 0x03
    22be:	9c 81       	ldd	r25, Y+4	; 0x04
    22c0:	01 97       	sbiw	r24, 0x01	; 1
    22c2:	f1 f7       	brne	.-4      	; 0x22c0 <LCD_displayCharacter+0x392>
    22c4:	9c 83       	std	Y+4, r25	; 0x04
    22c6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22c8:	8d 81       	ldd	r24, Y+5	; 0x05
    22ca:	9e 81       	ldd	r25, Y+6	; 0x06
    22cc:	01 97       	sbiw	r24, 0x01	; 1
    22ce:	9e 83       	std	Y+6, r25	; 0x06
    22d0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22d2:	8d 81       	ldd	r24, Y+5	; 0x05
    22d4:	9e 81       	ldd	r25, Y+6	; 0x06
    22d6:	00 97       	sbiw	r24, 0x00	; 0
    22d8:	69 f7       	brne	.-38     	; 0x22b4 <LCD_displayCharacter+0x386>
    22da:	14 c0       	rjmp	.+40     	; 0x2304 <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22dc:	6f 81       	ldd	r22, Y+7	; 0x07
    22de:	78 85       	ldd	r23, Y+8	; 0x08
    22e0:	89 85       	ldd	r24, Y+9	; 0x09
    22e2:	9a 85       	ldd	r25, Y+10	; 0x0a
    22e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22e8:	dc 01       	movw	r26, r24
    22ea:	cb 01       	movw	r24, r22
    22ec:	9e 83       	std	Y+6, r25	; 0x06
    22ee:	8d 83       	std	Y+5, r24	; 0x05
    22f0:	8d 81       	ldd	r24, Y+5	; 0x05
    22f2:	9e 81       	ldd	r25, Y+6	; 0x06
    22f4:	9a 83       	std	Y+2, r25	; 0x02
    22f6:	89 83       	std	Y+1, r24	; 0x01
    22f8:	89 81       	ldd	r24, Y+1	; 0x01
    22fa:	9a 81       	ldd	r25, Y+2	; 0x02
    22fc:	01 97       	sbiw	r24, 0x01	; 1
    22fe:	f1 f7       	brne	.-4      	; 0x22fc <LCD_displayCharacter+0x3ce>
    2300:	9a 83       	std	Y+2, r25	; 0x02
    2302:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    2304:	e9 96       	adiw	r28, 0x39	; 57
    2306:	0f b6       	in	r0, 0x3f	; 63
    2308:	f8 94       	cli
    230a:	de bf       	out	0x3e, r29	; 62
    230c:	0f be       	out	0x3f, r0	; 63
    230e:	cd bf       	out	0x3d, r28	; 61
    2310:	cf 91       	pop	r28
    2312:	df 91       	pop	r29
    2314:	08 95       	ret

00002316 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2316:	df 93       	push	r29
    2318:	cf 93       	push	r28
    231a:	00 d0       	rcall	.+0      	; 0x231c <LCD_displayString+0x6>
    231c:	0f 92       	push	r0
    231e:	cd b7       	in	r28, 0x3d	; 61
    2320:	de b7       	in	r29, 0x3e	; 62
    2322:	9b 83       	std	Y+3, r25	; 0x03
    2324:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2326:	19 82       	std	Y+1, r1	; 0x01
    2328:	0e c0       	rjmp	.+28     	; 0x2346 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    232a:	89 81       	ldd	r24, Y+1	; 0x01
    232c:	28 2f       	mov	r18, r24
    232e:	30 e0       	ldi	r19, 0x00	; 0
    2330:	8a 81       	ldd	r24, Y+2	; 0x02
    2332:	9b 81       	ldd	r25, Y+3	; 0x03
    2334:	fc 01       	movw	r30, r24
    2336:	e2 0f       	add	r30, r18
    2338:	f3 1f       	adc	r31, r19
    233a:	80 81       	ld	r24, Z
    233c:	0e 94 97 0f 	call	0x1f2e	; 0x1f2e <LCD_displayCharacter>
		i++;
    2340:	89 81       	ldd	r24, Y+1	; 0x01
    2342:	8f 5f       	subi	r24, 0xFF	; 255
    2344:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2346:	89 81       	ldd	r24, Y+1	; 0x01
    2348:	28 2f       	mov	r18, r24
    234a:	30 e0       	ldi	r19, 0x00	; 0
    234c:	8a 81       	ldd	r24, Y+2	; 0x02
    234e:	9b 81       	ldd	r25, Y+3	; 0x03
    2350:	fc 01       	movw	r30, r24
    2352:	e2 0f       	add	r30, r18
    2354:	f3 1f       	adc	r31, r19
    2356:	80 81       	ld	r24, Z
    2358:	88 23       	and	r24, r24
    235a:	39 f7       	brne	.-50     	; 0x232a <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    235c:	0f 90       	pop	r0
    235e:	0f 90       	pop	r0
    2360:	0f 90       	pop	r0
    2362:	cf 91       	pop	r28
    2364:	df 91       	pop	r29
    2366:	08 95       	ret

00002368 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2368:	df 93       	push	r29
    236a:	cf 93       	push	r28
    236c:	00 d0       	rcall	.+0      	; 0x236e <LCD_moveCursor+0x6>
    236e:	00 d0       	rcall	.+0      	; 0x2370 <LCD_moveCursor+0x8>
    2370:	0f 92       	push	r0
    2372:	cd b7       	in	r28, 0x3d	; 61
    2374:	de b7       	in	r29, 0x3e	; 62
    2376:	8a 83       	std	Y+2, r24	; 0x02
    2378:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    237a:	8a 81       	ldd	r24, Y+2	; 0x02
    237c:	28 2f       	mov	r18, r24
    237e:	30 e0       	ldi	r19, 0x00	; 0
    2380:	3d 83       	std	Y+5, r19	; 0x05
    2382:	2c 83       	std	Y+4, r18	; 0x04
    2384:	8c 81       	ldd	r24, Y+4	; 0x04
    2386:	9d 81       	ldd	r25, Y+5	; 0x05
    2388:	81 30       	cpi	r24, 0x01	; 1
    238a:	91 05       	cpc	r25, r1
    238c:	c1 f0       	breq	.+48     	; 0x23be <LCD_moveCursor+0x56>
    238e:	2c 81       	ldd	r18, Y+4	; 0x04
    2390:	3d 81       	ldd	r19, Y+5	; 0x05
    2392:	22 30       	cpi	r18, 0x02	; 2
    2394:	31 05       	cpc	r19, r1
    2396:	2c f4       	brge	.+10     	; 0x23a2 <LCD_moveCursor+0x3a>
    2398:	8c 81       	ldd	r24, Y+4	; 0x04
    239a:	9d 81       	ldd	r25, Y+5	; 0x05
    239c:	00 97       	sbiw	r24, 0x00	; 0
    239e:	61 f0       	breq	.+24     	; 0x23b8 <LCD_moveCursor+0x50>
    23a0:	19 c0       	rjmp	.+50     	; 0x23d4 <LCD_moveCursor+0x6c>
    23a2:	2c 81       	ldd	r18, Y+4	; 0x04
    23a4:	3d 81       	ldd	r19, Y+5	; 0x05
    23a6:	22 30       	cpi	r18, 0x02	; 2
    23a8:	31 05       	cpc	r19, r1
    23aa:	69 f0       	breq	.+26     	; 0x23c6 <LCD_moveCursor+0x5e>
    23ac:	8c 81       	ldd	r24, Y+4	; 0x04
    23ae:	9d 81       	ldd	r25, Y+5	; 0x05
    23b0:	83 30       	cpi	r24, 0x03	; 3
    23b2:	91 05       	cpc	r25, r1
    23b4:	61 f0       	breq	.+24     	; 0x23ce <LCD_moveCursor+0x66>
    23b6:	0e c0       	rjmp	.+28     	; 0x23d4 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    23b8:	8b 81       	ldd	r24, Y+3	; 0x03
    23ba:	89 83       	std	Y+1, r24	; 0x01
    23bc:	0b c0       	rjmp	.+22     	; 0x23d4 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    23be:	8b 81       	ldd	r24, Y+3	; 0x03
    23c0:	80 5c       	subi	r24, 0xC0	; 192
    23c2:	89 83       	std	Y+1, r24	; 0x01
    23c4:	07 c0       	rjmp	.+14     	; 0x23d4 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    23c6:	8b 81       	ldd	r24, Y+3	; 0x03
    23c8:	80 5f       	subi	r24, 0xF0	; 240
    23ca:	89 83       	std	Y+1, r24	; 0x01
    23cc:	03 c0       	rjmp	.+6      	; 0x23d4 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    23ce:	8b 81       	ldd	r24, Y+3	; 0x03
    23d0:	80 5b       	subi	r24, 0xB0	; 176
    23d2:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    23d4:	89 81       	ldd	r24, Y+1	; 0x01
    23d6:	80 68       	ori	r24, 0x80	; 128
    23d8:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <LCD_sendCommand>
}
    23dc:	0f 90       	pop	r0
    23de:	0f 90       	pop	r0
    23e0:	0f 90       	pop	r0
    23e2:	0f 90       	pop	r0
    23e4:	0f 90       	pop	r0
    23e6:	cf 91       	pop	r28
    23e8:	df 91       	pop	r29
    23ea:	08 95       	ret

000023ec <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    23ec:	df 93       	push	r29
    23ee:	cf 93       	push	r28
    23f0:	00 d0       	rcall	.+0      	; 0x23f2 <LCD_displayStringRowColumn+0x6>
    23f2:	00 d0       	rcall	.+0      	; 0x23f4 <LCD_displayStringRowColumn+0x8>
    23f4:	cd b7       	in	r28, 0x3d	; 61
    23f6:	de b7       	in	r29, 0x3e	; 62
    23f8:	89 83       	std	Y+1, r24	; 0x01
    23fa:	6a 83       	std	Y+2, r22	; 0x02
    23fc:	5c 83       	std	Y+4, r21	; 0x04
    23fe:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2400:	89 81       	ldd	r24, Y+1	; 0x01
    2402:	6a 81       	ldd	r22, Y+2	; 0x02
    2404:	0e 94 b4 11 	call	0x2368	; 0x2368 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2408:	8b 81       	ldd	r24, Y+3	; 0x03
    240a:	9c 81       	ldd	r25, Y+4	; 0x04
    240c:	0e 94 8b 11 	call	0x2316	; 0x2316 <LCD_displayString>
}
    2410:	0f 90       	pop	r0
    2412:	0f 90       	pop	r0
    2414:	0f 90       	pop	r0
    2416:	0f 90       	pop	r0
    2418:	cf 91       	pop	r28
    241a:	df 91       	pop	r29
    241c:	08 95       	ret

0000241e <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    241e:	df 93       	push	r29
    2420:	cf 93       	push	r28
    2422:	cd b7       	in	r28, 0x3d	; 61
    2424:	de b7       	in	r29, 0x3e	; 62
    2426:	62 97       	sbiw	r28, 0x12	; 18
    2428:	0f b6       	in	r0, 0x3f	; 63
    242a:	f8 94       	cli
    242c:	de bf       	out	0x3e, r29	; 62
    242e:	0f be       	out	0x3f, r0	; 63
    2430:	cd bf       	out	0x3d, r28	; 61
    2432:	9a 8b       	std	Y+18, r25	; 0x12
    2434:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2436:	89 89       	ldd	r24, Y+17	; 0x11
    2438:	9a 89       	ldd	r25, Y+18	; 0x12
    243a:	9e 01       	movw	r18, r28
    243c:	2f 5f       	subi	r18, 0xFF	; 255
    243e:	3f 4f       	sbci	r19, 0xFF	; 255
    2440:	b9 01       	movw	r22, r18
    2442:	4a e0       	ldi	r20, 0x0A	; 10
    2444:	50 e0       	ldi	r21, 0x00	; 0
    2446:	0e 94 4b 14 	call	0x2896	; 0x2896 <itoa>
   LCD_displayString(buff); /* Display the string */
    244a:	ce 01       	movw	r24, r28
    244c:	01 96       	adiw	r24, 0x01	; 1
    244e:	0e 94 8b 11 	call	0x2316	; 0x2316 <LCD_displayString>
}
    2452:	62 96       	adiw	r28, 0x12	; 18
    2454:	0f b6       	in	r0, 0x3f	; 63
    2456:	f8 94       	cli
    2458:	de bf       	out	0x3e, r29	; 62
    245a:	0f be       	out	0x3f, r0	; 63
    245c:	cd bf       	out	0x3d, r28	; 61
    245e:	cf 91       	pop	r28
    2460:	df 91       	pop	r29
    2462:	08 95       	ret

00002464 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2464:	df 93       	push	r29
    2466:	cf 93       	push	r28
    2468:	cd b7       	in	r28, 0x3d	; 61
    246a:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    246c:	81 e0       	ldi	r24, 0x01	; 1
    246e:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <LCD_sendCommand>
}
    2472:	cf 91       	pop	r28
    2474:	df 91       	pop	r29
    2476:	08 95       	ret

00002478 <main>:




int main(void)
{
    2478:	df 93       	push	r29
    247a:	cf 93       	push	r28
    247c:	cd b7       	in	r28, 0x3d	; 61
    247e:	de b7       	in	r29, 0x3e	; 62
	SREG  |= (1<<7);           // Enable global interrupts in MC.
    2480:	af e5       	ldi	r26, 0x5F	; 95
    2482:	b0 e0       	ldi	r27, 0x00	; 0
    2484:	ef e5       	ldi	r30, 0x5F	; 95
    2486:	f0 e0       	ldi	r31, 0x00	; 0
    2488:	80 81       	ld	r24, Z
    248a:	80 68       	ori	r24, 0x80	; 128
    248c:	8c 93       	st	X, r24

	SPI_initMaster();
    248e:	0e 94 1a 13 	call	0x2634	; 0x2634 <SPI_initMaster>
	TC72_Init(CONTINUOUS_MODE);
    2492:	84 e0       	ldi	r24, 0x04	; 4
    2494:	0e 94 8f 08 	call	0x111e	; 0x111e <TC72_Init>
	LCD_init();
    2498:	0e 94 80 0d 	call	0x1b00	; 0x1b00 <LCD_init>


	PIDController_Init(&pid);
    249c:	88 e6       	ldi	r24, 0x68	; 104
    249e:	91 e0       	ldi	r25, 0x01	; 1
    24a0:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <PIDController_Init>

	SetPollingTime(500);
    24a4:	84 ef       	ldi	r24, 0xF4	; 244
    24a6:	91 e0       	ldi	r25, 0x01	; 1
    24a8:	0e 94 d0 12 	call	0x25a0	; 0x25a0 <SetPollingTime>
	Timer2_Init_CTC_Mode(250);
    24ac:	8a ef       	ldi	r24, 0xFA	; 250
    24ae:	0e 94 c4 08 	call	0x1188	; 0x1188 <Timer2_Init_CTC_Mode>
    24b2:	ff cf       	rjmp	.-2      	; 0x24b2 <main+0x3a>

000024b4 <__vector_3>:

	}
}

ISR(TIMER2_COMP_vect)
{
    24b4:	1f 92       	push	r1
    24b6:	0f 92       	push	r0
    24b8:	0f b6       	in	r0, 0x3f	; 63
    24ba:	0f 92       	push	r0
    24bc:	11 24       	eor	r1, r1
    24be:	2f 93       	push	r18
    24c0:	3f 93       	push	r19
    24c2:	4f 93       	push	r20
    24c4:	5f 93       	push	r21
    24c6:	6f 93       	push	r22
    24c8:	7f 93       	push	r23
    24ca:	8f 93       	push	r24
    24cc:	9f 93       	push	r25
    24ce:	af 93       	push	r26
    24d0:	bf 93       	push	r27
    24d2:	ef 93       	push	r30
    24d4:	ff 93       	push	r31
    24d6:	df 93       	push	r29
    24d8:	cf 93       	push	r28
    24da:	cd b7       	in	r28, 0x3d	; 61
    24dc:	de b7       	in	r29, 0x3e	; 62
	Poll();
    24de:	0e 94 84 12 	call	0x2508	; 0x2508 <Poll>
}
    24e2:	cf 91       	pop	r28
    24e4:	df 91       	pop	r29
    24e6:	ff 91       	pop	r31
    24e8:	ef 91       	pop	r30
    24ea:	bf 91       	pop	r27
    24ec:	af 91       	pop	r26
    24ee:	9f 91       	pop	r25
    24f0:	8f 91       	pop	r24
    24f2:	7f 91       	pop	r23
    24f4:	6f 91       	pop	r22
    24f6:	5f 91       	pop	r21
    24f8:	4f 91       	pop	r20
    24fa:	3f 91       	pop	r19
    24fc:	2f 91       	pop	r18
    24fe:	0f 90       	pop	r0
    2500:	0f be       	out	0x3f, r0	; 63
    2502:	0f 90       	pop	r0
    2504:	1f 90       	pop	r1
    2506:	18 95       	reti

00002508 <Poll>:
int polling_enabled= 1;
int polling_counter= 1;
int counter = 0 ;

void Poll(void)
{
    2508:	df 93       	push	r29
    250a:	cf 93       	push	r28
    250c:	0f 92       	push	r0
    250e:	cd b7       	in	r28, 0x3d	; 61
    2510:	de b7       	in	r29, 0x3e	; 62
	if(polling_enabled && (!counter))
    2512:	80 91 84 01 	lds	r24, 0x0184
    2516:	90 91 85 01 	lds	r25, 0x0185
    251a:	00 97       	sbiw	r24, 0x00	; 0
    251c:	69 f0       	breq	.+26     	; 0x2538 <Poll+0x30>
    251e:	80 91 b0 01 	lds	r24, 0x01B0
    2522:	90 91 b1 01 	lds	r25, 0x01B1
    2526:	00 97       	sbiw	r24, 0x00	; 0
    2528:	39 f4       	brne	.+14     	; 0x2538 <Poll+0x30>
	{
		signed char data = 0;
    252a:	19 82       	std	Y+1, r1	; 0x01
		data = Get_Data();
    252c:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <Get_Data>
    2530:	89 83       	std	Y+1, r24	; 0x01
		Handle_data(data);
    2532:	89 81       	ldd	r24, Y+1	; 0x01
    2534:	0e 94 28 08 	call	0x1050	; 0x1050 <Handle_data>

	}
	counter++;
    2538:	80 91 b0 01 	lds	r24, 0x01B0
    253c:	90 91 b1 01 	lds	r25, 0x01B1
    2540:	01 96       	adiw	r24, 0x01	; 1
    2542:	90 93 b1 01 	sts	0x01B1, r25
    2546:	80 93 b0 01 	sts	0x01B0, r24
	counter = counter%polling_counter;
    254a:	80 91 b0 01 	lds	r24, 0x01B0
    254e:	90 91 b1 01 	lds	r25, 0x01B1
    2552:	20 91 86 01 	lds	r18, 0x0186
    2556:	30 91 87 01 	lds	r19, 0x0187
    255a:	b9 01       	movw	r22, r18
    255c:	0e 94 ed 13 	call	0x27da	; 0x27da <__divmodhi4>
    2560:	90 93 b1 01 	sts	0x01B1, r25
    2564:	80 93 b0 01 	sts	0x01B0, r24
}
    2568:	0f 90       	pop	r0
    256a:	cf 91       	pop	r28
    256c:	df 91       	pop	r29
    256e:	08 95       	ret

00002570 <StartPolling>:

void StartPolling(void)
{
    2570:	df 93       	push	r29
    2572:	cf 93       	push	r28
    2574:	cd b7       	in	r28, 0x3d	; 61
    2576:	de b7       	in	r29, 0x3e	; 62
	polling_enabled=1;
    2578:	81 e0       	ldi	r24, 0x01	; 1
    257a:	90 e0       	ldi	r25, 0x00	; 0
    257c:	90 93 85 01 	sts	0x0185, r25
    2580:	80 93 84 01 	sts	0x0184, r24
}
    2584:	cf 91       	pop	r28
    2586:	df 91       	pop	r29
    2588:	08 95       	ret

0000258a <StopPolling>:

void StopPolling(void)
{
    258a:	df 93       	push	r29
    258c:	cf 93       	push	r28
    258e:	cd b7       	in	r28, 0x3d	; 61
    2590:	de b7       	in	r29, 0x3e	; 62
	polling_enabled=0;
    2592:	10 92 85 01 	sts	0x0185, r1
    2596:	10 92 84 01 	sts	0x0184, r1
}
    259a:	cf 91       	pop	r28
    259c:	df 91       	pop	r29
    259e:	08 95       	ret

000025a0 <SetPollingTime>:

void SetPollingTime(int polling_time)
{
    25a0:	df 93       	push	r29
    25a2:	cf 93       	push	r28
    25a4:	00 d0       	rcall	.+0      	; 0x25a6 <SetPollingTime+0x6>
    25a6:	cd b7       	in	r28, 0x3d	; 61
    25a8:	de b7       	in	r29, 0x3e	; 62
    25aa:	9a 83       	std	Y+2, r25	; 0x02
    25ac:	89 83       	std	Y+1, r24	; 0x01
	polling_counter = polling_time/250;
    25ae:	89 81       	ldd	r24, Y+1	; 0x01
    25b0:	9a 81       	ldd	r25, Y+2	; 0x02
    25b2:	2a ef       	ldi	r18, 0xFA	; 250
    25b4:	30 e0       	ldi	r19, 0x00	; 0
    25b6:	b9 01       	movw	r22, r18
    25b8:	0e 94 ed 13 	call	0x27da	; 0x27da <__divmodhi4>
    25bc:	cb 01       	movw	r24, r22
    25be:	90 93 87 01 	sts	0x0187, r25
    25c2:	80 93 86 01 	sts	0x0186, r24
}
    25c6:	0f 90       	pop	r0
    25c8:	0f 90       	pop	r0
    25ca:	cf 91       	pop	r28
    25cc:	df 91       	pop	r29
    25ce:	08 95       	ret

000025d0 <PWM_Timer0_Start>:
#include "gpio.h"
#include "common_macros.h"
#include <avr/io.h>

void PWM_Timer0_Start(uint8_t duty_cycle)
{
    25d0:	df 93       	push	r29
    25d2:	cf 93       	push	r28
    25d4:	0f 92       	push	r0
    25d6:	cd b7       	in	r28, 0x3d	; 61
    25d8:	de b7       	in	r29, 0x3e	; 62
    25da:	89 83       	std	Y+1, r24	; 0x01
	/*	The function responsible for trigger the Timer0 with the PWM Mode. */

	TCNT0 = 0; //Set Timer Initial value
    25dc:	e2 e5       	ldi	r30, 0x52	; 82
    25de:	f0 e0       	ldi	r31, 0x00	; 0
    25e0:	10 82       	st	Z, r1
	OCR0 = duty_cycle; // Set Compare Value
    25e2:	ec e5       	ldi	r30, 0x5C	; 92
    25e4:	f0 e0       	ldi	r31, 0x00	; 0
    25e6:	89 81       	ldd	r24, Y+1	; 0x01
    25e8:	80 83       	st	Z, r24
	GPIO_setupPinDirection(PWM_PORT_ID, PWM_PIN_ID, PIN_OUTPUT); //Setup the PWM pin as Output pin
    25ea:	81 e0       	ldi	r24, 0x01	; 1
    25ec:	63 e0       	ldi	r22, 0x03	; 3
    25ee:	41 e0       	ldi	r20, 0x01	; 1
    25f0:	0e 94 ed 08 	call	0x11da	; 0x11da <GPIO_setupPinDirection>
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 = (500Hz) .. CS00=0 CS01=1 CS02=0
	 */
	SET_BIT(TCCR0,WGM00);
    25f4:	a3 e5       	ldi	r26, 0x53	; 83
    25f6:	b0 e0       	ldi	r27, 0x00	; 0
    25f8:	e3 e5       	ldi	r30, 0x53	; 83
    25fa:	f0 e0       	ldi	r31, 0x00	; 0
    25fc:	80 81       	ld	r24, Z
    25fe:	80 64       	ori	r24, 0x40	; 64
    2600:	8c 93       	st	X, r24
	SET_BIT(TCCR0,WGM01);
    2602:	a3 e5       	ldi	r26, 0x53	; 83
    2604:	b0 e0       	ldi	r27, 0x00	; 0
    2606:	e3 e5       	ldi	r30, 0x53	; 83
    2608:	f0 e0       	ldi	r31, 0x00	; 0
    260a:	80 81       	ld	r24, Z
    260c:	88 60       	ori	r24, 0x08	; 8
    260e:	8c 93       	st	X, r24
	SET_BIT(TCCR0,COM01);
    2610:	a3 e5       	ldi	r26, 0x53	; 83
    2612:	b0 e0       	ldi	r27, 0x00	; 0
    2614:	e3 e5       	ldi	r30, 0x53	; 83
    2616:	f0 e0       	ldi	r31, 0x00	; 0
    2618:	80 81       	ld	r24, Z
    261a:	80 62       	ori	r24, 0x20	; 32
    261c:	8c 93       	st	X, r24
	SET_BIT(TCCR0,CS01);
    261e:	a3 e5       	ldi	r26, 0x53	; 83
    2620:	b0 e0       	ldi	r27, 0x00	; 0
    2622:	e3 e5       	ldi	r30, 0x53	; 83
    2624:	f0 e0       	ldi	r31, 0x00	; 0
    2626:	80 81       	ld	r24, Z
    2628:	82 60       	ori	r24, 0x02	; 2
    262a:	8c 93       	st	X, r24
}
    262c:	0f 90       	pop	r0
    262e:	cf 91       	pop	r28
    2630:	df 91       	pop	r29
    2632:	08 95       	ret

00002634 <SPI_initMaster>:
/*
 * Description :
 * Initialize the SPI device as Master.
 */
void SPI_initMaster(void) 
{
    2634:	df 93       	push	r29
    2636:	cf 93       	push	r28
    2638:	cd b7       	in	r28, 0x3d	; 61
    263a:	de b7       	in	r29, 0x3e	; 62
	 * SS(PB4)   --> Output
	 * MOSI(PB5) --> Output 
	 * MISO(PB6) --> Input
	 * SCK(PB7) --> Output
	 ********************************************/
	GPIO_setupPinDirection(PORTB_ID,PIN4_ID,PIN_OUTPUT);
    263c:	81 e0       	ldi	r24, 0x01	; 1
    263e:	64 e0       	ldi	r22, 0x04	; 4
    2640:	41 e0       	ldi	r20, 0x01	; 1
    2642:	0e 94 ed 08 	call	0x11da	; 0x11da <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN5_ID,PIN_OUTPUT);
    2646:	81 e0       	ldi	r24, 0x01	; 1
    2648:	65 e0       	ldi	r22, 0x05	; 5
    264a:	41 e0       	ldi	r20, 0x01	; 1
    264c:	0e 94 ed 08 	call	0x11da	; 0x11da <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN6_ID,PIN_INPUT);
    2650:	81 e0       	ldi	r24, 0x01	; 1
    2652:	66 e0       	ldi	r22, 0x06	; 6
    2654:	40 e0       	ldi	r20, 0x00	; 0
    2656:	0e 94 ed 08 	call	0x11da	; 0x11da <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN7_ID,PIN_OUTPUT);
    265a:	81 e0       	ldi	r24, 0x01	; 1
    265c:	67 e0       	ldi	r22, 0x07	; 7
    265e:	41 e0       	ldi	r20, 0x01	; 1
    2660:	0e 94 ed 08 	call	0x11da	; 0x11da <GPIO_setupPinDirection>
     * MSTR    = 1 Enable Master
     * CPOL    = 0 SCK is low when idle
     * CPHA    = 1 Sample Data with the falling edge
     * SPR1:0  = 00 Choose SPI clock = Fosc/4
     ***********************************************************************/
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<CPHA);
    2664:	ed e2       	ldi	r30, 0x2D	; 45
    2666:	f0 e0       	ldi	r31, 0x00	; 0
    2668:	84 e5       	ldi	r24, 0x54	; 84
    266a:	80 83       	st	Z, r24

	/* Clear the SPI2X bit in SPSR to Choose SPI clock = Fosc/4 */
	SPSR &= ~(1<<SPI2X);
    266c:	ae e2       	ldi	r26, 0x2E	; 46
    266e:	b0 e0       	ldi	r27, 0x00	; 0
    2670:	ee e2       	ldi	r30, 0x2E	; 46
    2672:	f0 e0       	ldi	r31, 0x00	; 0
    2674:	80 81       	ld	r24, Z
    2676:	8e 7f       	andi	r24, 0xFE	; 254
    2678:	8c 93       	st	X, r24
//	SPSR |= (1<<SPR0);		//FOSC/16


}
    267a:	cf 91       	pop	r28
    267c:	df 91       	pop	r29
    267e:	08 95       	ret

00002680 <SPI_initSlave>:
/*
 * Description :
 * Initialize the SPI device as Slave.
 */
void SPI_initSlave(void)
{ 
    2680:	df 93       	push	r29
    2682:	cf 93       	push	r28
    2684:	cd b7       	in	r28, 0x3d	; 61
    2686:	de b7       	in	r29, 0x3e	; 62
	 * SS(PB4)   --> Input
	 * MOSI(PB5) --> Input
	 * MISO(PB6) --> Output
	 * SCK(PB7) --> Input
	 ********************************************/
	GPIO_setupPinDirection(PORTB_ID,PIN4_ID,PIN_INPUT);
    2688:	81 e0       	ldi	r24, 0x01	; 1
    268a:	64 e0       	ldi	r22, 0x04	; 4
    268c:	40 e0       	ldi	r20, 0x00	; 0
    268e:	0e 94 ed 08 	call	0x11da	; 0x11da <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN5_ID,PIN_INPUT);
    2692:	81 e0       	ldi	r24, 0x01	; 1
    2694:	65 e0       	ldi	r22, 0x05	; 5
    2696:	40 e0       	ldi	r20, 0x00	; 0
    2698:	0e 94 ed 08 	call	0x11da	; 0x11da <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN6_ID,PIN_OUTPUT);
    269c:	81 e0       	ldi	r24, 0x01	; 1
    269e:	66 e0       	ldi	r22, 0x06	; 6
    26a0:	41 e0       	ldi	r20, 0x01	; 1
    26a2:	0e 94 ed 08 	call	0x11da	; 0x11da <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN7_ID,PIN_INPUT);
    26a6:	81 e0       	ldi	r24, 0x01	; 1
    26a8:	67 e0       	ldi	r22, 0x07	; 7
    26aa:	40 e0       	ldi	r20, 0x00	; 0
    26ac:	0e 94 ed 08 	call	0x11da	; 0x11da <GPIO_setupPinDirection>
	 * MSTR    = 0 Disable Master
	 * CPOL    = 0 SCK is low when idle
	 * CPHA    = 0 Sample Data with the raising edge
	 * SPR1:0  = 00 Choose SPI clock = Fosc/4
	 ***********************************************************************/
	SPCR = (1<<SPE);
    26b0:	ed e2       	ldi	r30, 0x2D	; 45
    26b2:	f0 e0       	ldi	r31, 0x00	; 0
    26b4:	80 e4       	ldi	r24, 0x40	; 64
    26b6:	80 83       	st	Z, r24

	/* Clear the SPI2X bit in SPSR to Choose SPI clock = Fosc/4 */
	SPSR &= ~(1<<SPI2X);
    26b8:	ae e2       	ldi	r26, 0x2E	; 46
    26ba:	b0 e0       	ldi	r27, 0x00	; 0
    26bc:	ee e2       	ldi	r30, 0x2E	; 46
    26be:	f0 e0       	ldi	r31, 0x00	; 0
    26c0:	80 81       	ld	r24, Z
    26c2:	8e 7f       	andi	r24, 0xFE	; 254
    26c4:	8c 93       	st	X, r24
}
    26c6:	cf 91       	pop	r28
    26c8:	df 91       	pop	r29
    26ca:	08 95       	ret

000026cc <SPI_sendReceiveByte>:
 * Description :
 * Send the required data through SPI to the other SPI device.
 * In the same time data will be received from the other device.
 */
uint8 SPI_sendReceiveByte(uint8 data)
{
    26cc:	df 93       	push	r29
    26ce:	cf 93       	push	r28
    26d0:	0f 92       	push	r0
    26d2:	cd b7       	in	r28, 0x3d	; 61
    26d4:	de b7       	in	r29, 0x3e	; 62
    26d6:	89 83       	std	Y+1, r24	; 0x01
	/* Initiate the communication and send data by SPI */
	SPDR = data;
    26d8:	ef e2       	ldi	r30, 0x2F	; 47
    26da:	f0 e0       	ldi	r31, 0x00	; 0
    26dc:	89 81       	ldd	r24, Y+1	; 0x01
    26de:	80 83       	st	Z, r24

	/* Wait until SPI interrupt flag SPIF = 1 (data has been sent/received correctly) */
	while(BIT_IS_CLEAR(SPSR,SPIF)){}
    26e0:	ee e2       	ldi	r30, 0x2E	; 46
    26e2:	f0 e0       	ldi	r31, 0x00	; 0
    26e4:	80 81       	ld	r24, Z
    26e6:	88 23       	and	r24, r24
    26e8:	dc f7       	brge	.-10     	; 0x26e0 <SPI_sendReceiveByte+0x14>

	/*
	 * Note: SPIF flag is cleared by first reading SPSR (with SPIF set) which is done in the previous step.
	 * and then accessing SPDR like the below line.
	 */
	return SPDR;
    26ea:	ef e2       	ldi	r30, 0x2F	; 47
    26ec:	f0 e0       	ldi	r31, 0x00	; 0
    26ee:	80 81       	ld	r24, Z
}
    26f0:	0f 90       	pop	r0
    26f2:	cf 91       	pop	r28
    26f4:	df 91       	pop	r29
    26f6:	08 95       	ret

000026f8 <SPI_sendString>:
/*
 * Description :
 * Send the required string through SPI to the other SPI device.
 */
void SPI_sendString(const uint8 *str)
{
    26f8:	df 93       	push	r29
    26fa:	cf 93       	push	r28
    26fc:	00 d0       	rcall	.+0      	; 0x26fe <SPI_sendString+0x6>
    26fe:	00 d0       	rcall	.+0      	; 0x2700 <SPI_sendString+0x8>
    2700:	cd b7       	in	r28, 0x3d	; 61
    2702:	de b7       	in	r29, 0x3e	; 62
    2704:	9c 83       	std	Y+4, r25	; 0x04
    2706:	8b 83       	std	Y+3, r24	; 0x03
	uint8 i = 0;
    2708:	1a 82       	std	Y+2, r1	; 0x02
	uint8 received_data = 0;
    270a:	19 82       	std	Y+1, r1	; 0x01
    270c:	0f c0       	rjmp	.+30     	; 0x272c <SPI_sendString+0x34>
	{
		/*
		 * received_data contains the received data from the other device.
		 * It is a dummy data variable as we just need to send the string to other device.
		 */
		received_data = SPI_sendReceiveByte(str[i]);
    270e:	8a 81       	ldd	r24, Y+2	; 0x02
    2710:	28 2f       	mov	r18, r24
    2712:	30 e0       	ldi	r19, 0x00	; 0
    2714:	8b 81       	ldd	r24, Y+3	; 0x03
    2716:	9c 81       	ldd	r25, Y+4	; 0x04
    2718:	fc 01       	movw	r30, r24
    271a:	e2 0f       	add	r30, r18
    271c:	f3 1f       	adc	r31, r19
    271e:	80 81       	ld	r24, Z
    2720:	0e 94 66 13 	call	0x26cc	; 0x26cc <SPI_sendReceiveByte>
    2724:	89 83       	std	Y+1, r24	; 0x01
		i++;
    2726:	8a 81       	ldd	r24, Y+2	; 0x02
    2728:	8f 5f       	subi	r24, 0xFF	; 255
    272a:	8a 83       	std	Y+2, r24	; 0x02
{
	uint8 i = 0;
	uint8 received_data = 0;

	/* Send the whole string */
	while(str[i] != '\0')
    272c:	8a 81       	ldd	r24, Y+2	; 0x02
    272e:	28 2f       	mov	r18, r24
    2730:	30 e0       	ldi	r19, 0x00	; 0
    2732:	8b 81       	ldd	r24, Y+3	; 0x03
    2734:	9c 81       	ldd	r25, Y+4	; 0x04
    2736:	fc 01       	movw	r30, r24
    2738:	e2 0f       	add	r30, r18
    273a:	f3 1f       	adc	r31, r19
    273c:	80 81       	ld	r24, Z
    273e:	88 23       	and	r24, r24
    2740:	31 f7       	brne	.-52     	; 0x270e <SPI_sendString+0x16>
		 * It is a dummy data variable as we just need to send the string to other device.
		 */
		received_data = SPI_sendReceiveByte(str[i]);
		i++;
	}
}
    2742:	0f 90       	pop	r0
    2744:	0f 90       	pop	r0
    2746:	0f 90       	pop	r0
    2748:	0f 90       	pop	r0
    274a:	cf 91       	pop	r28
    274c:	df 91       	pop	r29
    274e:	08 95       	ret

00002750 <SPI_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through SPI from the other SPI device.
 */
void SPI_receiveString(uint8 *str)
{
    2750:	0f 93       	push	r16
    2752:	1f 93       	push	r17
    2754:	df 93       	push	r29
    2756:	cf 93       	push	r28
    2758:	00 d0       	rcall	.+0      	; 0x275a <SPI_receiveString+0xa>
    275a:	0f 92       	push	r0
    275c:	cd b7       	in	r28, 0x3d	; 61
    275e:	de b7       	in	r29, 0x3e	; 62
    2760:	9b 83       	std	Y+3, r25	; 0x03
    2762:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2764:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	str[i] = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
    2766:	89 81       	ldd	r24, Y+1	; 0x01
    2768:	28 2f       	mov	r18, r24
    276a:	30 e0       	ldi	r19, 0x00	; 0
    276c:	8a 81       	ldd	r24, Y+2	; 0x02
    276e:	9b 81       	ldd	r25, Y+3	; 0x03
    2770:	8c 01       	movw	r16, r24
    2772:	02 0f       	add	r16, r18
    2774:	13 1f       	adc	r17, r19
    2776:	8f ef       	ldi	r24, 0xFF	; 255
    2778:	0e 94 66 13 	call	0x26cc	; 0x26cc <SPI_sendReceiveByte>
    277c:	f8 01       	movw	r30, r16
    277e:	80 83       	st	Z, r24
    2780:	10 c0       	rjmp	.+32     	; 0x27a2 <SPI_receiveString+0x52>

	/* Receive the whole string until the '#' */
	while(str[i] != '#')
	{
		i++;
    2782:	89 81       	ldd	r24, Y+1	; 0x01
    2784:	8f 5f       	subi	r24, 0xFF	; 255
    2786:	89 83       	std	Y+1, r24	; 0x01
		str[i] = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
    2788:	89 81       	ldd	r24, Y+1	; 0x01
    278a:	28 2f       	mov	r18, r24
    278c:	30 e0       	ldi	r19, 0x00	; 0
    278e:	8a 81       	ldd	r24, Y+2	; 0x02
    2790:	9b 81       	ldd	r25, Y+3	; 0x03
    2792:	8c 01       	movw	r16, r24
    2794:	02 0f       	add	r16, r18
    2796:	13 1f       	adc	r17, r19
    2798:	8f ef       	ldi	r24, 0xFF	; 255
    279a:	0e 94 66 13 	call	0x26cc	; 0x26cc <SPI_sendReceiveByte>
    279e:	f8 01       	movw	r30, r16
    27a0:	80 83       	st	Z, r24

	/* Receive the first byte */
	str[i] = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);

	/* Receive the whole string until the '#' */
	while(str[i] != '#')
    27a2:	89 81       	ldd	r24, Y+1	; 0x01
    27a4:	28 2f       	mov	r18, r24
    27a6:	30 e0       	ldi	r19, 0x00	; 0
    27a8:	8a 81       	ldd	r24, Y+2	; 0x02
    27aa:	9b 81       	ldd	r25, Y+3	; 0x03
    27ac:	fc 01       	movw	r30, r24
    27ae:	e2 0f       	add	r30, r18
    27b0:	f3 1f       	adc	r31, r19
    27b2:	80 81       	ld	r24, Z
    27b4:	83 32       	cpi	r24, 0x23	; 35
    27b6:	29 f7       	brne	.-54     	; 0x2782 <SPI_receiveString+0x32>
		i++;
		str[i] = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	str[i] = '\0';
    27b8:	89 81       	ldd	r24, Y+1	; 0x01
    27ba:	28 2f       	mov	r18, r24
    27bc:	30 e0       	ldi	r19, 0x00	; 0
    27be:	8a 81       	ldd	r24, Y+2	; 0x02
    27c0:	9b 81       	ldd	r25, Y+3	; 0x03
    27c2:	fc 01       	movw	r30, r24
    27c4:	e2 0f       	add	r30, r18
    27c6:	f3 1f       	adc	r31, r19
    27c8:	10 82       	st	Z, r1
}
    27ca:	0f 90       	pop	r0
    27cc:	0f 90       	pop	r0
    27ce:	0f 90       	pop	r0
    27d0:	cf 91       	pop	r28
    27d2:	df 91       	pop	r29
    27d4:	1f 91       	pop	r17
    27d6:	0f 91       	pop	r16
    27d8:	08 95       	ret

000027da <__divmodhi4>:
    27da:	97 fb       	bst	r25, 7
    27dc:	09 2e       	mov	r0, r25
    27de:	07 26       	eor	r0, r23
    27e0:	0a d0       	rcall	.+20     	; 0x27f6 <__divmodhi4_neg1>
    27e2:	77 fd       	sbrc	r23, 7
    27e4:	04 d0       	rcall	.+8      	; 0x27ee <__divmodhi4_neg2>
    27e6:	0c d0       	rcall	.+24     	; 0x2800 <__udivmodhi4>
    27e8:	06 d0       	rcall	.+12     	; 0x27f6 <__divmodhi4_neg1>
    27ea:	00 20       	and	r0, r0
    27ec:	1a f4       	brpl	.+6      	; 0x27f4 <__divmodhi4_exit>

000027ee <__divmodhi4_neg2>:
    27ee:	70 95       	com	r23
    27f0:	61 95       	neg	r22
    27f2:	7f 4f       	sbci	r23, 0xFF	; 255

000027f4 <__divmodhi4_exit>:
    27f4:	08 95       	ret

000027f6 <__divmodhi4_neg1>:
    27f6:	f6 f7       	brtc	.-4      	; 0x27f4 <__divmodhi4_exit>
    27f8:	90 95       	com	r25
    27fa:	81 95       	neg	r24
    27fc:	9f 4f       	sbci	r25, 0xFF	; 255
    27fe:	08 95       	ret

00002800 <__udivmodhi4>:
    2800:	aa 1b       	sub	r26, r26
    2802:	bb 1b       	sub	r27, r27
    2804:	51 e1       	ldi	r21, 0x11	; 17
    2806:	07 c0       	rjmp	.+14     	; 0x2816 <__udivmodhi4_ep>

00002808 <__udivmodhi4_loop>:
    2808:	aa 1f       	adc	r26, r26
    280a:	bb 1f       	adc	r27, r27
    280c:	a6 17       	cp	r26, r22
    280e:	b7 07       	cpc	r27, r23
    2810:	10 f0       	brcs	.+4      	; 0x2816 <__udivmodhi4_ep>
    2812:	a6 1b       	sub	r26, r22
    2814:	b7 0b       	sbc	r27, r23

00002816 <__udivmodhi4_ep>:
    2816:	88 1f       	adc	r24, r24
    2818:	99 1f       	adc	r25, r25
    281a:	5a 95       	dec	r21
    281c:	a9 f7       	brne	.-22     	; 0x2808 <__udivmodhi4_loop>
    281e:	80 95       	com	r24
    2820:	90 95       	com	r25
    2822:	bc 01       	movw	r22, r24
    2824:	cd 01       	movw	r24, r26
    2826:	08 95       	ret

00002828 <__prologue_saves__>:
    2828:	2f 92       	push	r2
    282a:	3f 92       	push	r3
    282c:	4f 92       	push	r4
    282e:	5f 92       	push	r5
    2830:	6f 92       	push	r6
    2832:	7f 92       	push	r7
    2834:	8f 92       	push	r8
    2836:	9f 92       	push	r9
    2838:	af 92       	push	r10
    283a:	bf 92       	push	r11
    283c:	cf 92       	push	r12
    283e:	df 92       	push	r13
    2840:	ef 92       	push	r14
    2842:	ff 92       	push	r15
    2844:	0f 93       	push	r16
    2846:	1f 93       	push	r17
    2848:	cf 93       	push	r28
    284a:	df 93       	push	r29
    284c:	cd b7       	in	r28, 0x3d	; 61
    284e:	de b7       	in	r29, 0x3e	; 62
    2850:	ca 1b       	sub	r28, r26
    2852:	db 0b       	sbc	r29, r27
    2854:	0f b6       	in	r0, 0x3f	; 63
    2856:	f8 94       	cli
    2858:	de bf       	out	0x3e, r29	; 62
    285a:	0f be       	out	0x3f, r0	; 63
    285c:	cd bf       	out	0x3d, r28	; 61
    285e:	09 94       	ijmp

00002860 <__epilogue_restores__>:
    2860:	2a 88       	ldd	r2, Y+18	; 0x12
    2862:	39 88       	ldd	r3, Y+17	; 0x11
    2864:	48 88       	ldd	r4, Y+16	; 0x10
    2866:	5f 84       	ldd	r5, Y+15	; 0x0f
    2868:	6e 84       	ldd	r6, Y+14	; 0x0e
    286a:	7d 84       	ldd	r7, Y+13	; 0x0d
    286c:	8c 84       	ldd	r8, Y+12	; 0x0c
    286e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2870:	aa 84       	ldd	r10, Y+10	; 0x0a
    2872:	b9 84       	ldd	r11, Y+9	; 0x09
    2874:	c8 84       	ldd	r12, Y+8	; 0x08
    2876:	df 80       	ldd	r13, Y+7	; 0x07
    2878:	ee 80       	ldd	r14, Y+6	; 0x06
    287a:	fd 80       	ldd	r15, Y+5	; 0x05
    287c:	0c 81       	ldd	r16, Y+4	; 0x04
    287e:	1b 81       	ldd	r17, Y+3	; 0x03
    2880:	aa 81       	ldd	r26, Y+2	; 0x02
    2882:	b9 81       	ldd	r27, Y+1	; 0x01
    2884:	ce 0f       	add	r28, r30
    2886:	d1 1d       	adc	r29, r1
    2888:	0f b6       	in	r0, 0x3f	; 63
    288a:	f8 94       	cli
    288c:	de bf       	out	0x3e, r29	; 62
    288e:	0f be       	out	0x3f, r0	; 63
    2890:	cd bf       	out	0x3d, r28	; 61
    2892:	ed 01       	movw	r28, r26
    2894:	08 95       	ret

00002896 <itoa>:
    2896:	fb 01       	movw	r30, r22
    2898:	9f 01       	movw	r18, r30
    289a:	e8 94       	clt
    289c:	42 30       	cpi	r20, 0x02	; 2
    289e:	c4 f0       	brlt	.+48     	; 0x28d0 <itoa+0x3a>
    28a0:	45 32       	cpi	r20, 0x25	; 37
    28a2:	b4 f4       	brge	.+44     	; 0x28d0 <itoa+0x3a>
    28a4:	4a 30       	cpi	r20, 0x0A	; 10
    28a6:	29 f4       	brne	.+10     	; 0x28b2 <itoa+0x1c>
    28a8:	97 fb       	bst	r25, 7
    28aa:	1e f4       	brtc	.+6      	; 0x28b2 <itoa+0x1c>
    28ac:	90 95       	com	r25
    28ae:	81 95       	neg	r24
    28b0:	9f 4f       	sbci	r25, 0xFF	; 255
    28b2:	64 2f       	mov	r22, r20
    28b4:	77 27       	eor	r23, r23
    28b6:	0e 94 00 14 	call	0x2800	; 0x2800 <__udivmodhi4>
    28ba:	80 5d       	subi	r24, 0xD0	; 208
    28bc:	8a 33       	cpi	r24, 0x3A	; 58
    28be:	0c f0       	brlt	.+2      	; 0x28c2 <itoa+0x2c>
    28c0:	89 5d       	subi	r24, 0xD9	; 217
    28c2:	81 93       	st	Z+, r24
    28c4:	cb 01       	movw	r24, r22
    28c6:	00 97       	sbiw	r24, 0x00	; 0
    28c8:	a1 f7       	brne	.-24     	; 0x28b2 <itoa+0x1c>
    28ca:	16 f4       	brtc	.+4      	; 0x28d0 <itoa+0x3a>
    28cc:	5d e2       	ldi	r21, 0x2D	; 45
    28ce:	51 93       	st	Z+, r21
    28d0:	10 82       	st	Z, r1
    28d2:	c9 01       	movw	r24, r18
    28d4:	0c 94 6c 14 	jmp	0x28d8	; 0x28d8 <strrev>

000028d8 <strrev>:
    28d8:	dc 01       	movw	r26, r24
    28da:	fc 01       	movw	r30, r24
    28dc:	67 2f       	mov	r22, r23
    28de:	71 91       	ld	r23, Z+
    28e0:	77 23       	and	r23, r23
    28e2:	e1 f7       	brne	.-8      	; 0x28dc <strrev+0x4>
    28e4:	32 97       	sbiw	r30, 0x02	; 2
    28e6:	04 c0       	rjmp	.+8      	; 0x28f0 <strrev+0x18>
    28e8:	7c 91       	ld	r23, X
    28ea:	6d 93       	st	X+, r22
    28ec:	70 83       	st	Z, r23
    28ee:	62 91       	ld	r22, -Z
    28f0:	ae 17       	cp	r26, r30
    28f2:	bf 07       	cpc	r27, r31
    28f4:	c8 f3       	brcs	.-14     	; 0x28e8 <strrev+0x10>
    28f6:	08 95       	ret

000028f8 <_exit>:
    28f8:	f8 94       	cli

000028fa <__stop_program>:
    28fa:	ff cf       	rjmp	.-2      	; 0x28fa <__stop_program>
