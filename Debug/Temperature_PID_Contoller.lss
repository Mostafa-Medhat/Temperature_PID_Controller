
Temperature_PID_Contoller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000023ce  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000034  00800060  000023ce  00002462  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800094  00800094  00002496  2**0
                  ALLOC
  3 .stab         00002640  00000000  00000000  00002498  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001003  00000000  00000000  00004ad8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005adb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005c1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005d8b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000079d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000088bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000966c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000097cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009a59  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a227  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ec       	ldi	r30, 0xCE	; 206
      68:	f3 e2       	ldi	r31, 0x23	; 35
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 39       	cpi	r26, 0x94	; 148
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e9       	ldi	r26, 0x94	; 148
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 39       	cpi	r26, 0x97	; 151
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 61 0f 	call	0x1ec2	; 0x1ec2 <main>
      8a:	0c 94 e5 11 	jmp	0x23ca	; 0x23ca <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 7d 11 	jmp	0x22fa	; 0x22fa <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 99 11 	jmp	0x2332	; 0x2332 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 89 11 	jmp	0x2312	; 0x2312 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a5 11 	jmp	0x234a	; 0x234a <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 89 11 	jmp	0x2312	; 0x2312 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a5 11 	jmp	0x234a	; 0x234a <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 7d 11 	jmp	0x22fa	; 0x22fa <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 99 11 	jmp	0x2332	; 0x2332 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 89 11 	jmp	0x2312	; 0x2312 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 a5 11 	jmp	0x234a	; 0x234a <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 89 11 	jmp	0x2312	; 0x2312 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 a5 11 	jmp	0x234a	; 0x234a <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 89 11 	jmp	0x2312	; 0x2312 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 a5 11 	jmp	0x234a	; 0x234a <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 8d 11 	jmp	0x231a	; 0x231a <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 a9 11 	jmp	0x2352	; 0x2352 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Handle_data>:
 */
#include "PollingDataClient.h"
#include "lcd.h"

void Handle_data(unsigned char data)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	0f 92       	push	r0
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
     b50:	89 83       	std	Y+1, r24	; 0x01
	LCD_clearScreen();
     b52:	0e 94 57 0f 	call	0x1eae	; 0x1eae <LCD_clearScreen>
	LCD_intgerToString(data);
     b56:	89 81       	ldd	r24, Y+1	; 0x01
     b58:	88 2f       	mov	r24, r24
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	0e 94 34 0f 	call	0x1e68	; 0x1e68 <LCD_intgerToString>
}
     b60:	0f 90       	pop	r0
     b62:	cf 91       	pop	r28
     b64:	df 91       	pop	r29
     b66:	08 95       	ret

00000b68 <TC72_Init>:
#include "TC72.h"
#include "gpio.h"
#include "spi.h"

void TC72_Init(unsigned char  mode)
{
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	0f 92       	push	r0
     b6e:	cd b7       	in	r28, 0x3d	; 61
     b70:	de b7       	in	r29, 0x3e	; 62
     b72:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(PORTB_ID, PIN4_ID, LOGIC_HIGH);
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	64 e0       	ldi	r22, 0x04	; 4
     b78:	41 e0       	ldi	r20, 0x01	; 1
     b7a:	0e 94 fd 06 	call	0xdfa	; 0xdfa <GPIO_writePin>
	SPI_sendReceiveByte(0x80);
     b7e:	80 e8       	ldi	r24, 0x80	; 128
     b80:	0e 94 cf 10 	call	0x219e	; 0x219e <SPI_sendReceiveByte>
	SPI_sendReceiveByte(mode);
     b84:	89 81       	ldd	r24, Y+1	; 0x01
     b86:	0e 94 cf 10 	call	0x219e	; 0x219e <SPI_sendReceiveByte>
	GPIO_writePin(PORTB_ID, PIN4_ID, LOGIC_LOW);
     b8a:	81 e0       	ldi	r24, 0x01	; 1
     b8c:	64 e0       	ldi	r22, 0x04	; 4
     b8e:	40 e0       	ldi	r20, 0x00	; 0
     b90:	0e 94 fd 06 	call	0xdfa	; 0xdfa <GPIO_writePin>
}
     b94:	0f 90       	pop	r0
     b96:	cf 91       	pop	r28
     b98:	df 91       	pop	r29
     b9a:	08 95       	ret

00000b9c <TC72_ReadTemp>:

unsigned char TC72_ReadTemp(void)
{
     b9c:	df 93       	push	r29
     b9e:	cf 93       	push	r28
     ba0:	0f 92       	push	r0
     ba2:	cd b7       	in	r28, 0x3d	; 61
     ba4:	de b7       	in	r29, 0x3e	; 62
	unsigned char data;
	GPIO_writePin(PORTB_ID, PIN4_ID, LOGIC_HIGH);
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	64 e0       	ldi	r22, 0x04	; 4
     baa:	41 e0       	ldi	r20, 0x01	; 1
     bac:	0e 94 fd 06 	call	0xdfa	; 0xdfa <GPIO_writePin>
	SPI_sendReceiveByte(0x02);
     bb0:	82 e0       	ldi	r24, 0x02	; 2
     bb2:	0e 94 cf 10 	call	0x219e	; 0x219e <SPI_sendReceiveByte>
	data = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
     bb6:	8f ef       	ldi	r24, 0xFF	; 255
     bb8:	0e 94 cf 10 	call	0x219e	; 0x219e <SPI_sendReceiveByte>
     bbc:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(PORTB_ID, PIN4_ID, LOGIC_LOW);
     bbe:	81 e0       	ldi	r24, 0x01	; 1
     bc0:	64 e0       	ldi	r22, 0x04	; 4
     bc2:	40 e0       	ldi	r20, 0x00	; 0
     bc4:	0e 94 fd 06 	call	0xdfa	; 0xdfa <GPIO_writePin>
	return data;
     bc8:	89 81       	ldd	r24, Y+1	; 0x01
}
     bca:	0f 90       	pop	r0
     bcc:	cf 91       	pop	r28
     bce:	df 91       	pop	r29
     bd0:	08 95       	ret

00000bd2 <Timer2_Init_CTC_Mode>:
 */

#include "avr/io.h"

void Timer2_Init_CTC_Mode(unsigned char tick)
{
     bd2:	df 93       	push	r29
     bd4:	cf 93       	push	r28
     bd6:	0f 92       	push	r0
     bd8:	cd b7       	in	r28, 0x3d	; 61
     bda:	de b7       	in	r29, 0x3e	; 62
     bdc:	89 83       	std	Y+1, r24	; 0x01
	TCNT2 = 0;    // Set Timer initial value to 0
     bde:	e4 e4       	ldi	r30, 0x44	; 68
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	10 82       	st	Z, r1
	OCR2  = tick; // Set Compare Value
     be4:	e3 e4       	ldi	r30, 0x43	; 67
     be6:	f0 e0       	ldi	r31, 0x00	; 0
     be8:	89 81       	ldd	r24, Y+1	; 0x01
     bea:	80 83       	st	Z, r24
	TIMSK |= (1<<OCIE2); // Enable Timer2 Compare Interrupt
     bec:	a9 e5       	ldi	r26, 0x59	; 89
     bee:	b0 e0       	ldi	r27, 0x00	; 0
     bf0:	e9 e5       	ldi	r30, 0x59	; 89
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	80 81       	ld	r24, Z
     bf6:	80 68       	ori	r24, 0x80	; 128
     bf8:	8c 93       	st	X, r24
	 * 1. Non PWM mode FOC0=1
	 * 2. CTC Mode WGM01=1 & WGM00=0
	 * 3. No need for OC0 in this example so COM00=0 & COM01=0
	 * 4. clock = F_CPU/1024 CS00=1 CS01=0 CS02=1
	 */
	TCCR2 = (1<<FOC2) | (1<<WGM21) | (1<<CS22) | (1<<CS20);
     bfa:	e5 e4       	ldi	r30, 0x45	; 69
     bfc:	f0 e0       	ldi	r31, 0x00	; 0
     bfe:	8d e8       	ldi	r24, 0x8D	; 141
     c00:	80 83       	st	Z, r24
}
     c02:	0f 90       	pop	r0
     c04:	cf 91       	pop	r28
     c06:	df 91       	pop	r29
     c08:	08 95       	ret

00000c0a <Get_Data>:
#include "device.h"
#include "TC72.h"
unsigned char data;

unsigned char Get_Data(void)
{
     c0a:	df 93       	push	r29
     c0c:	cf 93       	push	r28
     c0e:	cd b7       	in	r28, 0x3d	; 61
     c10:	de b7       	in	r29, 0x3e	; 62
	data = TC72_ReadTemp();
     c12:	0e 94 ce 05 	call	0xb9c	; 0xb9c <TC72_ReadTemp>
     c16:	80 93 96 00 	sts	0x0096, r24
	return data;
     c1a:	80 91 96 00 	lds	r24, 0x0096
}
     c1e:	cf 91       	pop	r28
     c20:	df 91       	pop	r29
     c22:	08 95       	ret

00000c24 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
     c24:	df 93       	push	r29
     c26:	cf 93       	push	r28
     c28:	00 d0       	rcall	.+0      	; 0xc2a <GPIO_setupPinDirection+0x6>
     c2a:	00 d0       	rcall	.+0      	; 0xc2c <GPIO_setupPinDirection+0x8>
     c2c:	0f 92       	push	r0
     c2e:	cd b7       	in	r28, 0x3d	; 61
     c30:	de b7       	in	r29, 0x3e	; 62
     c32:	89 83       	std	Y+1, r24	; 0x01
     c34:	6a 83       	std	Y+2, r22	; 0x02
     c36:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     c38:	8a 81       	ldd	r24, Y+2	; 0x02
     c3a:	88 30       	cpi	r24, 0x08	; 8
     c3c:	08 f0       	brcs	.+2      	; 0xc40 <GPIO_setupPinDirection+0x1c>
     c3e:	d5 c0       	rjmp	.+426    	; 0xdea <GPIO_setupPinDirection+0x1c6>
     c40:	89 81       	ldd	r24, Y+1	; 0x01
     c42:	84 30       	cpi	r24, 0x04	; 4
     c44:	08 f0       	brcs	.+2      	; 0xc48 <GPIO_setupPinDirection+0x24>
     c46:	d1 c0       	rjmp	.+418    	; 0xdea <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
     c48:	89 81       	ldd	r24, Y+1	; 0x01
     c4a:	28 2f       	mov	r18, r24
     c4c:	30 e0       	ldi	r19, 0x00	; 0
     c4e:	3d 83       	std	Y+5, r19	; 0x05
     c50:	2c 83       	std	Y+4, r18	; 0x04
     c52:	8c 81       	ldd	r24, Y+4	; 0x04
     c54:	9d 81       	ldd	r25, Y+5	; 0x05
     c56:	81 30       	cpi	r24, 0x01	; 1
     c58:	91 05       	cpc	r25, r1
     c5a:	09 f4       	brne	.+2      	; 0xc5e <GPIO_setupPinDirection+0x3a>
     c5c:	43 c0       	rjmp	.+134    	; 0xce4 <GPIO_setupPinDirection+0xc0>
     c5e:	2c 81       	ldd	r18, Y+4	; 0x04
     c60:	3d 81       	ldd	r19, Y+5	; 0x05
     c62:	22 30       	cpi	r18, 0x02	; 2
     c64:	31 05       	cpc	r19, r1
     c66:	2c f4       	brge	.+10     	; 0xc72 <GPIO_setupPinDirection+0x4e>
     c68:	8c 81       	ldd	r24, Y+4	; 0x04
     c6a:	9d 81       	ldd	r25, Y+5	; 0x05
     c6c:	00 97       	sbiw	r24, 0x00	; 0
     c6e:	71 f0       	breq	.+28     	; 0xc8c <GPIO_setupPinDirection+0x68>
     c70:	bc c0       	rjmp	.+376    	; 0xdea <GPIO_setupPinDirection+0x1c6>
     c72:	2c 81       	ldd	r18, Y+4	; 0x04
     c74:	3d 81       	ldd	r19, Y+5	; 0x05
     c76:	22 30       	cpi	r18, 0x02	; 2
     c78:	31 05       	cpc	r19, r1
     c7a:	09 f4       	brne	.+2      	; 0xc7e <GPIO_setupPinDirection+0x5a>
     c7c:	5f c0       	rjmp	.+190    	; 0xd3c <GPIO_setupPinDirection+0x118>
     c7e:	8c 81       	ldd	r24, Y+4	; 0x04
     c80:	9d 81       	ldd	r25, Y+5	; 0x05
     c82:	83 30       	cpi	r24, 0x03	; 3
     c84:	91 05       	cpc	r25, r1
     c86:	09 f4       	brne	.+2      	; 0xc8a <GPIO_setupPinDirection+0x66>
     c88:	85 c0       	rjmp	.+266    	; 0xd94 <GPIO_setupPinDirection+0x170>
     c8a:	af c0       	rjmp	.+350    	; 0xdea <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
     c8c:	8b 81       	ldd	r24, Y+3	; 0x03
     c8e:	81 30       	cpi	r24, 0x01	; 1
     c90:	a1 f4       	brne	.+40     	; 0xcba <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
     c92:	aa e3       	ldi	r26, 0x3A	; 58
     c94:	b0 e0       	ldi	r27, 0x00	; 0
     c96:	ea e3       	ldi	r30, 0x3A	; 58
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	80 81       	ld	r24, Z
     c9c:	48 2f       	mov	r20, r24
     c9e:	8a 81       	ldd	r24, Y+2	; 0x02
     ca0:	28 2f       	mov	r18, r24
     ca2:	30 e0       	ldi	r19, 0x00	; 0
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	02 2e       	mov	r0, r18
     caa:	02 c0       	rjmp	.+4      	; 0xcb0 <GPIO_setupPinDirection+0x8c>
     cac:	88 0f       	add	r24, r24
     cae:	99 1f       	adc	r25, r25
     cb0:	0a 94       	dec	r0
     cb2:	e2 f7       	brpl	.-8      	; 0xcac <GPIO_setupPinDirection+0x88>
     cb4:	84 2b       	or	r24, r20
     cb6:	8c 93       	st	X, r24
     cb8:	98 c0       	rjmp	.+304    	; 0xdea <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
     cba:	aa e3       	ldi	r26, 0x3A	; 58
     cbc:	b0 e0       	ldi	r27, 0x00	; 0
     cbe:	ea e3       	ldi	r30, 0x3A	; 58
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	80 81       	ld	r24, Z
     cc4:	48 2f       	mov	r20, r24
     cc6:	8a 81       	ldd	r24, Y+2	; 0x02
     cc8:	28 2f       	mov	r18, r24
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	81 e0       	ldi	r24, 0x01	; 1
     cce:	90 e0       	ldi	r25, 0x00	; 0
     cd0:	02 2e       	mov	r0, r18
     cd2:	02 c0       	rjmp	.+4      	; 0xcd8 <GPIO_setupPinDirection+0xb4>
     cd4:	88 0f       	add	r24, r24
     cd6:	99 1f       	adc	r25, r25
     cd8:	0a 94       	dec	r0
     cda:	e2 f7       	brpl	.-8      	; 0xcd4 <GPIO_setupPinDirection+0xb0>
     cdc:	80 95       	com	r24
     cde:	84 23       	and	r24, r20
     ce0:	8c 93       	st	X, r24
     ce2:	83 c0       	rjmp	.+262    	; 0xdea <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
     ce4:	8b 81       	ldd	r24, Y+3	; 0x03
     ce6:	81 30       	cpi	r24, 0x01	; 1
     ce8:	a1 f4       	brne	.+40     	; 0xd12 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
     cea:	a7 e3       	ldi	r26, 0x37	; 55
     cec:	b0 e0       	ldi	r27, 0x00	; 0
     cee:	e7 e3       	ldi	r30, 0x37	; 55
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	80 81       	ld	r24, Z
     cf4:	48 2f       	mov	r20, r24
     cf6:	8a 81       	ldd	r24, Y+2	; 0x02
     cf8:	28 2f       	mov	r18, r24
     cfa:	30 e0       	ldi	r19, 0x00	; 0
     cfc:	81 e0       	ldi	r24, 0x01	; 1
     cfe:	90 e0       	ldi	r25, 0x00	; 0
     d00:	02 2e       	mov	r0, r18
     d02:	02 c0       	rjmp	.+4      	; 0xd08 <GPIO_setupPinDirection+0xe4>
     d04:	88 0f       	add	r24, r24
     d06:	99 1f       	adc	r25, r25
     d08:	0a 94       	dec	r0
     d0a:	e2 f7       	brpl	.-8      	; 0xd04 <GPIO_setupPinDirection+0xe0>
     d0c:	84 2b       	or	r24, r20
     d0e:	8c 93       	st	X, r24
     d10:	6c c0       	rjmp	.+216    	; 0xdea <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
     d12:	a7 e3       	ldi	r26, 0x37	; 55
     d14:	b0 e0       	ldi	r27, 0x00	; 0
     d16:	e7 e3       	ldi	r30, 0x37	; 55
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	80 81       	ld	r24, Z
     d1c:	48 2f       	mov	r20, r24
     d1e:	8a 81       	ldd	r24, Y+2	; 0x02
     d20:	28 2f       	mov	r18, r24
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	81 e0       	ldi	r24, 0x01	; 1
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	02 2e       	mov	r0, r18
     d2a:	02 c0       	rjmp	.+4      	; 0xd30 <GPIO_setupPinDirection+0x10c>
     d2c:	88 0f       	add	r24, r24
     d2e:	99 1f       	adc	r25, r25
     d30:	0a 94       	dec	r0
     d32:	e2 f7       	brpl	.-8      	; 0xd2c <GPIO_setupPinDirection+0x108>
     d34:	80 95       	com	r24
     d36:	84 23       	and	r24, r20
     d38:	8c 93       	st	X, r24
     d3a:	57 c0       	rjmp	.+174    	; 0xdea <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
     d3c:	8b 81       	ldd	r24, Y+3	; 0x03
     d3e:	81 30       	cpi	r24, 0x01	; 1
     d40:	a1 f4       	brne	.+40     	; 0xd6a <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
     d42:	a4 e3       	ldi	r26, 0x34	; 52
     d44:	b0 e0       	ldi	r27, 0x00	; 0
     d46:	e4 e3       	ldi	r30, 0x34	; 52
     d48:	f0 e0       	ldi	r31, 0x00	; 0
     d4a:	80 81       	ld	r24, Z
     d4c:	48 2f       	mov	r20, r24
     d4e:	8a 81       	ldd	r24, Y+2	; 0x02
     d50:	28 2f       	mov	r18, r24
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	81 e0       	ldi	r24, 0x01	; 1
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	02 2e       	mov	r0, r18
     d5a:	02 c0       	rjmp	.+4      	; 0xd60 <GPIO_setupPinDirection+0x13c>
     d5c:	88 0f       	add	r24, r24
     d5e:	99 1f       	adc	r25, r25
     d60:	0a 94       	dec	r0
     d62:	e2 f7       	brpl	.-8      	; 0xd5c <GPIO_setupPinDirection+0x138>
     d64:	84 2b       	or	r24, r20
     d66:	8c 93       	st	X, r24
     d68:	40 c0       	rjmp	.+128    	; 0xdea <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
     d6a:	a4 e3       	ldi	r26, 0x34	; 52
     d6c:	b0 e0       	ldi	r27, 0x00	; 0
     d6e:	e4 e3       	ldi	r30, 0x34	; 52
     d70:	f0 e0       	ldi	r31, 0x00	; 0
     d72:	80 81       	ld	r24, Z
     d74:	48 2f       	mov	r20, r24
     d76:	8a 81       	ldd	r24, Y+2	; 0x02
     d78:	28 2f       	mov	r18, r24
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	81 e0       	ldi	r24, 0x01	; 1
     d7e:	90 e0       	ldi	r25, 0x00	; 0
     d80:	02 2e       	mov	r0, r18
     d82:	02 c0       	rjmp	.+4      	; 0xd88 <GPIO_setupPinDirection+0x164>
     d84:	88 0f       	add	r24, r24
     d86:	99 1f       	adc	r25, r25
     d88:	0a 94       	dec	r0
     d8a:	e2 f7       	brpl	.-8      	; 0xd84 <GPIO_setupPinDirection+0x160>
     d8c:	80 95       	com	r24
     d8e:	84 23       	and	r24, r20
     d90:	8c 93       	st	X, r24
     d92:	2b c0       	rjmp	.+86     	; 0xdea <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
     d94:	8b 81       	ldd	r24, Y+3	; 0x03
     d96:	81 30       	cpi	r24, 0x01	; 1
     d98:	a1 f4       	brne	.+40     	; 0xdc2 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
     d9a:	a1 e3       	ldi	r26, 0x31	; 49
     d9c:	b0 e0       	ldi	r27, 0x00	; 0
     d9e:	e1 e3       	ldi	r30, 0x31	; 49
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	80 81       	ld	r24, Z
     da4:	48 2f       	mov	r20, r24
     da6:	8a 81       	ldd	r24, Y+2	; 0x02
     da8:	28 2f       	mov	r18, r24
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	81 e0       	ldi	r24, 0x01	; 1
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	02 2e       	mov	r0, r18
     db2:	02 c0       	rjmp	.+4      	; 0xdb8 <GPIO_setupPinDirection+0x194>
     db4:	88 0f       	add	r24, r24
     db6:	99 1f       	adc	r25, r25
     db8:	0a 94       	dec	r0
     dba:	e2 f7       	brpl	.-8      	; 0xdb4 <GPIO_setupPinDirection+0x190>
     dbc:	84 2b       	or	r24, r20
     dbe:	8c 93       	st	X, r24
     dc0:	14 c0       	rjmp	.+40     	; 0xdea <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
     dc2:	a1 e3       	ldi	r26, 0x31	; 49
     dc4:	b0 e0       	ldi	r27, 0x00	; 0
     dc6:	e1 e3       	ldi	r30, 0x31	; 49
     dc8:	f0 e0       	ldi	r31, 0x00	; 0
     dca:	80 81       	ld	r24, Z
     dcc:	48 2f       	mov	r20, r24
     dce:	8a 81       	ldd	r24, Y+2	; 0x02
     dd0:	28 2f       	mov	r18, r24
     dd2:	30 e0       	ldi	r19, 0x00	; 0
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	02 2e       	mov	r0, r18
     dda:	02 c0       	rjmp	.+4      	; 0xde0 <GPIO_setupPinDirection+0x1bc>
     ddc:	88 0f       	add	r24, r24
     dde:	99 1f       	adc	r25, r25
     de0:	0a 94       	dec	r0
     de2:	e2 f7       	brpl	.-8      	; 0xddc <GPIO_setupPinDirection+0x1b8>
     de4:	80 95       	com	r24
     de6:	84 23       	and	r24, r20
     de8:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     dea:	0f 90       	pop	r0
     dec:	0f 90       	pop	r0
     dee:	0f 90       	pop	r0
     df0:	0f 90       	pop	r0
     df2:	0f 90       	pop	r0
     df4:	cf 91       	pop	r28
     df6:	df 91       	pop	r29
     df8:	08 95       	ret

00000dfa <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
     dfa:	df 93       	push	r29
     dfc:	cf 93       	push	r28
     dfe:	00 d0       	rcall	.+0      	; 0xe00 <GPIO_writePin+0x6>
     e00:	00 d0       	rcall	.+0      	; 0xe02 <GPIO_writePin+0x8>
     e02:	0f 92       	push	r0
     e04:	cd b7       	in	r28, 0x3d	; 61
     e06:	de b7       	in	r29, 0x3e	; 62
     e08:	89 83       	std	Y+1, r24	; 0x01
     e0a:	6a 83       	std	Y+2, r22	; 0x02
     e0c:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     e0e:	8a 81       	ldd	r24, Y+2	; 0x02
     e10:	88 30       	cpi	r24, 0x08	; 8
     e12:	08 f0       	brcs	.+2      	; 0xe16 <GPIO_writePin+0x1c>
     e14:	d5 c0       	rjmp	.+426    	; 0xfc0 <GPIO_writePin+0x1c6>
     e16:	89 81       	ldd	r24, Y+1	; 0x01
     e18:	84 30       	cpi	r24, 0x04	; 4
     e1a:	08 f0       	brcs	.+2      	; 0xe1e <GPIO_writePin+0x24>
     e1c:	d1 c0       	rjmp	.+418    	; 0xfc0 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
     e1e:	89 81       	ldd	r24, Y+1	; 0x01
     e20:	28 2f       	mov	r18, r24
     e22:	30 e0       	ldi	r19, 0x00	; 0
     e24:	3d 83       	std	Y+5, r19	; 0x05
     e26:	2c 83       	std	Y+4, r18	; 0x04
     e28:	8c 81       	ldd	r24, Y+4	; 0x04
     e2a:	9d 81       	ldd	r25, Y+5	; 0x05
     e2c:	81 30       	cpi	r24, 0x01	; 1
     e2e:	91 05       	cpc	r25, r1
     e30:	09 f4       	brne	.+2      	; 0xe34 <GPIO_writePin+0x3a>
     e32:	43 c0       	rjmp	.+134    	; 0xeba <GPIO_writePin+0xc0>
     e34:	2c 81       	ldd	r18, Y+4	; 0x04
     e36:	3d 81       	ldd	r19, Y+5	; 0x05
     e38:	22 30       	cpi	r18, 0x02	; 2
     e3a:	31 05       	cpc	r19, r1
     e3c:	2c f4       	brge	.+10     	; 0xe48 <GPIO_writePin+0x4e>
     e3e:	8c 81       	ldd	r24, Y+4	; 0x04
     e40:	9d 81       	ldd	r25, Y+5	; 0x05
     e42:	00 97       	sbiw	r24, 0x00	; 0
     e44:	71 f0       	breq	.+28     	; 0xe62 <GPIO_writePin+0x68>
     e46:	bc c0       	rjmp	.+376    	; 0xfc0 <GPIO_writePin+0x1c6>
     e48:	2c 81       	ldd	r18, Y+4	; 0x04
     e4a:	3d 81       	ldd	r19, Y+5	; 0x05
     e4c:	22 30       	cpi	r18, 0x02	; 2
     e4e:	31 05       	cpc	r19, r1
     e50:	09 f4       	brne	.+2      	; 0xe54 <GPIO_writePin+0x5a>
     e52:	5f c0       	rjmp	.+190    	; 0xf12 <GPIO_writePin+0x118>
     e54:	8c 81       	ldd	r24, Y+4	; 0x04
     e56:	9d 81       	ldd	r25, Y+5	; 0x05
     e58:	83 30       	cpi	r24, 0x03	; 3
     e5a:	91 05       	cpc	r25, r1
     e5c:	09 f4       	brne	.+2      	; 0xe60 <GPIO_writePin+0x66>
     e5e:	85 c0       	rjmp	.+266    	; 0xf6a <GPIO_writePin+0x170>
     e60:	af c0       	rjmp	.+350    	; 0xfc0 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
     e62:	8b 81       	ldd	r24, Y+3	; 0x03
     e64:	81 30       	cpi	r24, 0x01	; 1
     e66:	a1 f4       	brne	.+40     	; 0xe90 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
     e68:	ab e3       	ldi	r26, 0x3B	; 59
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
     e6c:	eb e3       	ldi	r30, 0x3B	; 59
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	48 2f       	mov	r20, r24
     e74:	8a 81       	ldd	r24, Y+2	; 0x02
     e76:	28 2f       	mov	r18, r24
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	02 2e       	mov	r0, r18
     e80:	02 c0       	rjmp	.+4      	; 0xe86 <GPIO_writePin+0x8c>
     e82:	88 0f       	add	r24, r24
     e84:	99 1f       	adc	r25, r25
     e86:	0a 94       	dec	r0
     e88:	e2 f7       	brpl	.-8      	; 0xe82 <GPIO_writePin+0x88>
     e8a:	84 2b       	or	r24, r20
     e8c:	8c 93       	st	X, r24
     e8e:	98 c0       	rjmp	.+304    	; 0xfc0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
     e90:	ab e3       	ldi	r26, 0x3B	; 59
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	eb e3       	ldi	r30, 0x3B	; 59
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	48 2f       	mov	r20, r24
     e9c:	8a 81       	ldd	r24, Y+2	; 0x02
     e9e:	28 2f       	mov	r18, r24
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	81 e0       	ldi	r24, 0x01	; 1
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	02 2e       	mov	r0, r18
     ea8:	02 c0       	rjmp	.+4      	; 0xeae <GPIO_writePin+0xb4>
     eaa:	88 0f       	add	r24, r24
     eac:	99 1f       	adc	r25, r25
     eae:	0a 94       	dec	r0
     eb0:	e2 f7       	brpl	.-8      	; 0xeaa <GPIO_writePin+0xb0>
     eb2:	80 95       	com	r24
     eb4:	84 23       	and	r24, r20
     eb6:	8c 93       	st	X, r24
     eb8:	83 c0       	rjmp	.+262    	; 0xfc0 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
     eba:	8b 81       	ldd	r24, Y+3	; 0x03
     ebc:	81 30       	cpi	r24, 0x01	; 1
     ebe:	a1 f4       	brne	.+40     	; 0xee8 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
     ec0:	a8 e3       	ldi	r26, 0x38	; 56
     ec2:	b0 e0       	ldi	r27, 0x00	; 0
     ec4:	e8 e3       	ldi	r30, 0x38	; 56
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	80 81       	ld	r24, Z
     eca:	48 2f       	mov	r20, r24
     ecc:	8a 81       	ldd	r24, Y+2	; 0x02
     ece:	28 2f       	mov	r18, r24
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	02 2e       	mov	r0, r18
     ed8:	02 c0       	rjmp	.+4      	; 0xede <GPIO_writePin+0xe4>
     eda:	88 0f       	add	r24, r24
     edc:	99 1f       	adc	r25, r25
     ede:	0a 94       	dec	r0
     ee0:	e2 f7       	brpl	.-8      	; 0xeda <GPIO_writePin+0xe0>
     ee2:	84 2b       	or	r24, r20
     ee4:	8c 93       	st	X, r24
     ee6:	6c c0       	rjmp	.+216    	; 0xfc0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
     ee8:	a8 e3       	ldi	r26, 0x38	; 56
     eea:	b0 e0       	ldi	r27, 0x00	; 0
     eec:	e8 e3       	ldi	r30, 0x38	; 56
     eee:	f0 e0       	ldi	r31, 0x00	; 0
     ef0:	80 81       	ld	r24, Z
     ef2:	48 2f       	mov	r20, r24
     ef4:	8a 81       	ldd	r24, Y+2	; 0x02
     ef6:	28 2f       	mov	r18, r24
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	02 2e       	mov	r0, r18
     f00:	02 c0       	rjmp	.+4      	; 0xf06 <GPIO_writePin+0x10c>
     f02:	88 0f       	add	r24, r24
     f04:	99 1f       	adc	r25, r25
     f06:	0a 94       	dec	r0
     f08:	e2 f7       	brpl	.-8      	; 0xf02 <GPIO_writePin+0x108>
     f0a:	80 95       	com	r24
     f0c:	84 23       	and	r24, r20
     f0e:	8c 93       	st	X, r24
     f10:	57 c0       	rjmp	.+174    	; 0xfc0 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
     f12:	8b 81       	ldd	r24, Y+3	; 0x03
     f14:	81 30       	cpi	r24, 0x01	; 1
     f16:	a1 f4       	brne	.+40     	; 0xf40 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
     f18:	a5 e3       	ldi	r26, 0x35	; 53
     f1a:	b0 e0       	ldi	r27, 0x00	; 0
     f1c:	e5 e3       	ldi	r30, 0x35	; 53
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	80 81       	ld	r24, Z
     f22:	48 2f       	mov	r20, r24
     f24:	8a 81       	ldd	r24, Y+2	; 0x02
     f26:	28 2f       	mov	r18, r24
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	81 e0       	ldi	r24, 0x01	; 1
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	02 2e       	mov	r0, r18
     f30:	02 c0       	rjmp	.+4      	; 0xf36 <GPIO_writePin+0x13c>
     f32:	88 0f       	add	r24, r24
     f34:	99 1f       	adc	r25, r25
     f36:	0a 94       	dec	r0
     f38:	e2 f7       	brpl	.-8      	; 0xf32 <GPIO_writePin+0x138>
     f3a:	84 2b       	or	r24, r20
     f3c:	8c 93       	st	X, r24
     f3e:	40 c0       	rjmp	.+128    	; 0xfc0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
     f40:	a5 e3       	ldi	r26, 0x35	; 53
     f42:	b0 e0       	ldi	r27, 0x00	; 0
     f44:	e5 e3       	ldi	r30, 0x35	; 53
     f46:	f0 e0       	ldi	r31, 0x00	; 0
     f48:	80 81       	ld	r24, Z
     f4a:	48 2f       	mov	r20, r24
     f4c:	8a 81       	ldd	r24, Y+2	; 0x02
     f4e:	28 2f       	mov	r18, r24
     f50:	30 e0       	ldi	r19, 0x00	; 0
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	02 2e       	mov	r0, r18
     f58:	02 c0       	rjmp	.+4      	; 0xf5e <GPIO_writePin+0x164>
     f5a:	88 0f       	add	r24, r24
     f5c:	99 1f       	adc	r25, r25
     f5e:	0a 94       	dec	r0
     f60:	e2 f7       	brpl	.-8      	; 0xf5a <GPIO_writePin+0x160>
     f62:	80 95       	com	r24
     f64:	84 23       	and	r24, r20
     f66:	8c 93       	st	X, r24
     f68:	2b c0       	rjmp	.+86     	; 0xfc0 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
     f6a:	8b 81       	ldd	r24, Y+3	; 0x03
     f6c:	81 30       	cpi	r24, 0x01	; 1
     f6e:	a1 f4       	brne	.+40     	; 0xf98 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
     f70:	a2 e3       	ldi	r26, 0x32	; 50
     f72:	b0 e0       	ldi	r27, 0x00	; 0
     f74:	e2 e3       	ldi	r30, 0x32	; 50
     f76:	f0 e0       	ldi	r31, 0x00	; 0
     f78:	80 81       	ld	r24, Z
     f7a:	48 2f       	mov	r20, r24
     f7c:	8a 81       	ldd	r24, Y+2	; 0x02
     f7e:	28 2f       	mov	r18, r24
     f80:	30 e0       	ldi	r19, 0x00	; 0
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	02 2e       	mov	r0, r18
     f88:	02 c0       	rjmp	.+4      	; 0xf8e <GPIO_writePin+0x194>
     f8a:	88 0f       	add	r24, r24
     f8c:	99 1f       	adc	r25, r25
     f8e:	0a 94       	dec	r0
     f90:	e2 f7       	brpl	.-8      	; 0xf8a <GPIO_writePin+0x190>
     f92:	84 2b       	or	r24, r20
     f94:	8c 93       	st	X, r24
     f96:	14 c0       	rjmp	.+40     	; 0xfc0 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
     f98:	a2 e3       	ldi	r26, 0x32	; 50
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	e2 e3       	ldi	r30, 0x32	; 50
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	80 81       	ld	r24, Z
     fa2:	48 2f       	mov	r20, r24
     fa4:	8a 81       	ldd	r24, Y+2	; 0x02
     fa6:	28 2f       	mov	r18, r24
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	02 2e       	mov	r0, r18
     fb0:	02 c0       	rjmp	.+4      	; 0xfb6 <GPIO_writePin+0x1bc>
     fb2:	88 0f       	add	r24, r24
     fb4:	99 1f       	adc	r25, r25
     fb6:	0a 94       	dec	r0
     fb8:	e2 f7       	brpl	.-8      	; 0xfb2 <GPIO_writePin+0x1b8>
     fba:	80 95       	com	r24
     fbc:	84 23       	and	r24, r20
     fbe:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
     fc0:	0f 90       	pop	r0
     fc2:	0f 90       	pop	r0
     fc4:	0f 90       	pop	r0
     fc6:	0f 90       	pop	r0
     fc8:	0f 90       	pop	r0
     fca:	cf 91       	pop	r28
     fcc:	df 91       	pop	r29
     fce:	08 95       	ret

00000fd0 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
     fd0:	df 93       	push	r29
     fd2:	cf 93       	push	r28
     fd4:	00 d0       	rcall	.+0      	; 0xfd6 <GPIO_readPin+0x6>
     fd6:	00 d0       	rcall	.+0      	; 0xfd8 <GPIO_readPin+0x8>
     fd8:	0f 92       	push	r0
     fda:	cd b7       	in	r28, 0x3d	; 61
     fdc:	de b7       	in	r29, 0x3e	; 62
     fde:	8a 83       	std	Y+2, r24	; 0x02
     fe0:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
     fe2:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
     fe4:	8b 81       	ldd	r24, Y+3	; 0x03
     fe6:	88 30       	cpi	r24, 0x08	; 8
     fe8:	08 f0       	brcs	.+2      	; 0xfec <GPIO_readPin+0x1c>
     fea:	84 c0       	rjmp	.+264    	; 0x10f4 <GPIO_readPin+0x124>
     fec:	8a 81       	ldd	r24, Y+2	; 0x02
     fee:	84 30       	cpi	r24, 0x04	; 4
     ff0:	08 f0       	brcs	.+2      	; 0xff4 <GPIO_readPin+0x24>
     ff2:	80 c0       	rjmp	.+256    	; 0x10f4 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
     ff4:	8a 81       	ldd	r24, Y+2	; 0x02
     ff6:	28 2f       	mov	r18, r24
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	3d 83       	std	Y+5, r19	; 0x05
     ffc:	2c 83       	std	Y+4, r18	; 0x04
     ffe:	4c 81       	ldd	r20, Y+4	; 0x04
    1000:	5d 81       	ldd	r21, Y+5	; 0x05
    1002:	41 30       	cpi	r20, 0x01	; 1
    1004:	51 05       	cpc	r21, r1
    1006:	79 f1       	breq	.+94     	; 0x1066 <GPIO_readPin+0x96>
    1008:	8c 81       	ldd	r24, Y+4	; 0x04
    100a:	9d 81       	ldd	r25, Y+5	; 0x05
    100c:	82 30       	cpi	r24, 0x02	; 2
    100e:	91 05       	cpc	r25, r1
    1010:	34 f4       	brge	.+12     	; 0x101e <GPIO_readPin+0x4e>
    1012:	2c 81       	ldd	r18, Y+4	; 0x04
    1014:	3d 81       	ldd	r19, Y+5	; 0x05
    1016:	21 15       	cp	r18, r1
    1018:	31 05       	cpc	r19, r1
    101a:	69 f0       	breq	.+26     	; 0x1036 <GPIO_readPin+0x66>
    101c:	6b c0       	rjmp	.+214    	; 0x10f4 <GPIO_readPin+0x124>
    101e:	4c 81       	ldd	r20, Y+4	; 0x04
    1020:	5d 81       	ldd	r21, Y+5	; 0x05
    1022:	42 30       	cpi	r20, 0x02	; 2
    1024:	51 05       	cpc	r21, r1
    1026:	b9 f1       	breq	.+110    	; 0x1096 <GPIO_readPin+0xc6>
    1028:	8c 81       	ldd	r24, Y+4	; 0x04
    102a:	9d 81       	ldd	r25, Y+5	; 0x05
    102c:	83 30       	cpi	r24, 0x03	; 3
    102e:	91 05       	cpc	r25, r1
    1030:	09 f4       	brne	.+2      	; 0x1034 <GPIO_readPin+0x64>
    1032:	49 c0       	rjmp	.+146    	; 0x10c6 <GPIO_readPin+0xf6>
    1034:	5f c0       	rjmp	.+190    	; 0x10f4 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1036:	e9 e3       	ldi	r30, 0x39	; 57
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	28 2f       	mov	r18, r24
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	8b 81       	ldd	r24, Y+3	; 0x03
    1042:	88 2f       	mov	r24, r24
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	a9 01       	movw	r20, r18
    1048:	02 c0       	rjmp	.+4      	; 0x104e <GPIO_readPin+0x7e>
    104a:	55 95       	asr	r21
    104c:	47 95       	ror	r20
    104e:	8a 95       	dec	r24
    1050:	e2 f7       	brpl	.-8      	; 0x104a <GPIO_readPin+0x7a>
    1052:	ca 01       	movw	r24, r20
    1054:	81 70       	andi	r24, 0x01	; 1
    1056:	90 70       	andi	r25, 0x00	; 0
    1058:	88 23       	and	r24, r24
    105a:	19 f0       	breq	.+6      	; 0x1062 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	89 83       	std	Y+1, r24	; 0x01
    1060:	49 c0       	rjmp	.+146    	; 0x10f4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1062:	19 82       	std	Y+1, r1	; 0x01
    1064:	47 c0       	rjmp	.+142    	; 0x10f4 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1066:	e6 e3       	ldi	r30, 0x36	; 54
    1068:	f0 e0       	ldi	r31, 0x00	; 0
    106a:	80 81       	ld	r24, Z
    106c:	28 2f       	mov	r18, r24
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	8b 81       	ldd	r24, Y+3	; 0x03
    1072:	88 2f       	mov	r24, r24
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	a9 01       	movw	r20, r18
    1078:	02 c0       	rjmp	.+4      	; 0x107e <GPIO_readPin+0xae>
    107a:	55 95       	asr	r21
    107c:	47 95       	ror	r20
    107e:	8a 95       	dec	r24
    1080:	e2 f7       	brpl	.-8      	; 0x107a <GPIO_readPin+0xaa>
    1082:	ca 01       	movw	r24, r20
    1084:	81 70       	andi	r24, 0x01	; 1
    1086:	90 70       	andi	r25, 0x00	; 0
    1088:	88 23       	and	r24, r24
    108a:	19 f0       	breq	.+6      	; 0x1092 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    108c:	81 e0       	ldi	r24, 0x01	; 1
    108e:	89 83       	std	Y+1, r24	; 0x01
    1090:	31 c0       	rjmp	.+98     	; 0x10f4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1092:	19 82       	std	Y+1, r1	; 0x01
    1094:	2f c0       	rjmp	.+94     	; 0x10f4 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1096:	e3 e3       	ldi	r30, 0x33	; 51
    1098:	f0 e0       	ldi	r31, 0x00	; 0
    109a:	80 81       	ld	r24, Z
    109c:	28 2f       	mov	r18, r24
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	8b 81       	ldd	r24, Y+3	; 0x03
    10a2:	88 2f       	mov	r24, r24
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	a9 01       	movw	r20, r18
    10a8:	02 c0       	rjmp	.+4      	; 0x10ae <GPIO_readPin+0xde>
    10aa:	55 95       	asr	r21
    10ac:	47 95       	ror	r20
    10ae:	8a 95       	dec	r24
    10b0:	e2 f7       	brpl	.-8      	; 0x10aa <GPIO_readPin+0xda>
    10b2:	ca 01       	movw	r24, r20
    10b4:	81 70       	andi	r24, 0x01	; 1
    10b6:	90 70       	andi	r25, 0x00	; 0
    10b8:	88 23       	and	r24, r24
    10ba:	19 f0       	breq	.+6      	; 0x10c2 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	89 83       	std	Y+1, r24	; 0x01
    10c0:	19 c0       	rjmp	.+50     	; 0x10f4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    10c2:	19 82       	std	Y+1, r1	; 0x01
    10c4:	17 c0       	rjmp	.+46     	; 0x10f4 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    10c6:	e0 e3       	ldi	r30, 0x30	; 48
    10c8:	f0 e0       	ldi	r31, 0x00	; 0
    10ca:	80 81       	ld	r24, Z
    10cc:	28 2f       	mov	r18, r24
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	8b 81       	ldd	r24, Y+3	; 0x03
    10d2:	88 2f       	mov	r24, r24
    10d4:	90 e0       	ldi	r25, 0x00	; 0
    10d6:	a9 01       	movw	r20, r18
    10d8:	02 c0       	rjmp	.+4      	; 0x10de <GPIO_readPin+0x10e>
    10da:	55 95       	asr	r21
    10dc:	47 95       	ror	r20
    10de:	8a 95       	dec	r24
    10e0:	e2 f7       	brpl	.-8      	; 0x10da <GPIO_readPin+0x10a>
    10e2:	ca 01       	movw	r24, r20
    10e4:	81 70       	andi	r24, 0x01	; 1
    10e6:	90 70       	andi	r25, 0x00	; 0
    10e8:	88 23       	and	r24, r24
    10ea:	19 f0       	breq	.+6      	; 0x10f2 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    10ec:	81 e0       	ldi	r24, 0x01	; 1
    10ee:	89 83       	std	Y+1, r24	; 0x01
    10f0:	01 c0       	rjmp	.+2      	; 0x10f4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    10f2:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    10f4:	89 81       	ldd	r24, Y+1	; 0x01
}
    10f6:	0f 90       	pop	r0
    10f8:	0f 90       	pop	r0
    10fa:	0f 90       	pop	r0
    10fc:	0f 90       	pop	r0
    10fe:	0f 90       	pop	r0
    1100:	cf 91       	pop	r28
    1102:	df 91       	pop	r29
    1104:	08 95       	ret

00001106 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1106:	df 93       	push	r29
    1108:	cf 93       	push	r28
    110a:	00 d0       	rcall	.+0      	; 0x110c <GPIO_setupPortDirection+0x6>
    110c:	00 d0       	rcall	.+0      	; 0x110e <GPIO_setupPortDirection+0x8>
    110e:	cd b7       	in	r28, 0x3d	; 61
    1110:	de b7       	in	r29, 0x3e	; 62
    1112:	89 83       	std	Y+1, r24	; 0x01
    1114:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1116:	89 81       	ldd	r24, Y+1	; 0x01
    1118:	84 30       	cpi	r24, 0x04	; 4
    111a:	90 f5       	brcc	.+100    	; 0x1180 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    111c:	89 81       	ldd	r24, Y+1	; 0x01
    111e:	28 2f       	mov	r18, r24
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	3c 83       	std	Y+4, r19	; 0x04
    1124:	2b 83       	std	Y+3, r18	; 0x03
    1126:	8b 81       	ldd	r24, Y+3	; 0x03
    1128:	9c 81       	ldd	r25, Y+4	; 0x04
    112a:	81 30       	cpi	r24, 0x01	; 1
    112c:	91 05       	cpc	r25, r1
    112e:	d1 f0       	breq	.+52     	; 0x1164 <GPIO_setupPortDirection+0x5e>
    1130:	2b 81       	ldd	r18, Y+3	; 0x03
    1132:	3c 81       	ldd	r19, Y+4	; 0x04
    1134:	22 30       	cpi	r18, 0x02	; 2
    1136:	31 05       	cpc	r19, r1
    1138:	2c f4       	brge	.+10     	; 0x1144 <GPIO_setupPortDirection+0x3e>
    113a:	8b 81       	ldd	r24, Y+3	; 0x03
    113c:	9c 81       	ldd	r25, Y+4	; 0x04
    113e:	00 97       	sbiw	r24, 0x00	; 0
    1140:	61 f0       	breq	.+24     	; 0x115a <GPIO_setupPortDirection+0x54>
    1142:	1e c0       	rjmp	.+60     	; 0x1180 <GPIO_setupPortDirection+0x7a>
    1144:	2b 81       	ldd	r18, Y+3	; 0x03
    1146:	3c 81       	ldd	r19, Y+4	; 0x04
    1148:	22 30       	cpi	r18, 0x02	; 2
    114a:	31 05       	cpc	r19, r1
    114c:	81 f0       	breq	.+32     	; 0x116e <GPIO_setupPortDirection+0x68>
    114e:	8b 81       	ldd	r24, Y+3	; 0x03
    1150:	9c 81       	ldd	r25, Y+4	; 0x04
    1152:	83 30       	cpi	r24, 0x03	; 3
    1154:	91 05       	cpc	r25, r1
    1156:	81 f0       	breq	.+32     	; 0x1178 <GPIO_setupPortDirection+0x72>
    1158:	13 c0       	rjmp	.+38     	; 0x1180 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    115a:	ea e3       	ldi	r30, 0x3A	; 58
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	8a 81       	ldd	r24, Y+2	; 0x02
    1160:	80 83       	st	Z, r24
    1162:	0e c0       	rjmp	.+28     	; 0x1180 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1164:	e7 e3       	ldi	r30, 0x37	; 55
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	8a 81       	ldd	r24, Y+2	; 0x02
    116a:	80 83       	st	Z, r24
    116c:	09 c0       	rjmp	.+18     	; 0x1180 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    116e:	e4 e3       	ldi	r30, 0x34	; 52
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	8a 81       	ldd	r24, Y+2	; 0x02
    1174:	80 83       	st	Z, r24
    1176:	04 c0       	rjmp	.+8      	; 0x1180 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1178:	e1 e3       	ldi	r30, 0x31	; 49
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	8a 81       	ldd	r24, Y+2	; 0x02
    117e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1180:	0f 90       	pop	r0
    1182:	0f 90       	pop	r0
    1184:	0f 90       	pop	r0
    1186:	0f 90       	pop	r0
    1188:	cf 91       	pop	r28
    118a:	df 91       	pop	r29
    118c:	08 95       	ret

0000118e <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    118e:	df 93       	push	r29
    1190:	cf 93       	push	r28
    1192:	00 d0       	rcall	.+0      	; 0x1194 <GPIO_writePort+0x6>
    1194:	00 d0       	rcall	.+0      	; 0x1196 <GPIO_writePort+0x8>
    1196:	cd b7       	in	r28, 0x3d	; 61
    1198:	de b7       	in	r29, 0x3e	; 62
    119a:	89 83       	std	Y+1, r24	; 0x01
    119c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    119e:	89 81       	ldd	r24, Y+1	; 0x01
    11a0:	84 30       	cpi	r24, 0x04	; 4
    11a2:	90 f5       	brcc	.+100    	; 0x1208 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    11a4:	89 81       	ldd	r24, Y+1	; 0x01
    11a6:	28 2f       	mov	r18, r24
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	3c 83       	std	Y+4, r19	; 0x04
    11ac:	2b 83       	std	Y+3, r18	; 0x03
    11ae:	8b 81       	ldd	r24, Y+3	; 0x03
    11b0:	9c 81       	ldd	r25, Y+4	; 0x04
    11b2:	81 30       	cpi	r24, 0x01	; 1
    11b4:	91 05       	cpc	r25, r1
    11b6:	d1 f0       	breq	.+52     	; 0x11ec <GPIO_writePort+0x5e>
    11b8:	2b 81       	ldd	r18, Y+3	; 0x03
    11ba:	3c 81       	ldd	r19, Y+4	; 0x04
    11bc:	22 30       	cpi	r18, 0x02	; 2
    11be:	31 05       	cpc	r19, r1
    11c0:	2c f4       	brge	.+10     	; 0x11cc <GPIO_writePort+0x3e>
    11c2:	8b 81       	ldd	r24, Y+3	; 0x03
    11c4:	9c 81       	ldd	r25, Y+4	; 0x04
    11c6:	00 97       	sbiw	r24, 0x00	; 0
    11c8:	61 f0       	breq	.+24     	; 0x11e2 <GPIO_writePort+0x54>
    11ca:	1e c0       	rjmp	.+60     	; 0x1208 <GPIO_writePort+0x7a>
    11cc:	2b 81       	ldd	r18, Y+3	; 0x03
    11ce:	3c 81       	ldd	r19, Y+4	; 0x04
    11d0:	22 30       	cpi	r18, 0x02	; 2
    11d2:	31 05       	cpc	r19, r1
    11d4:	81 f0       	breq	.+32     	; 0x11f6 <GPIO_writePort+0x68>
    11d6:	8b 81       	ldd	r24, Y+3	; 0x03
    11d8:	9c 81       	ldd	r25, Y+4	; 0x04
    11da:	83 30       	cpi	r24, 0x03	; 3
    11dc:	91 05       	cpc	r25, r1
    11de:	81 f0       	breq	.+32     	; 0x1200 <GPIO_writePort+0x72>
    11e0:	13 c0       	rjmp	.+38     	; 0x1208 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    11e2:	eb e3       	ldi	r30, 0x3B	; 59
    11e4:	f0 e0       	ldi	r31, 0x00	; 0
    11e6:	8a 81       	ldd	r24, Y+2	; 0x02
    11e8:	80 83       	st	Z, r24
    11ea:	0e c0       	rjmp	.+28     	; 0x1208 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    11ec:	e8 e3       	ldi	r30, 0x38	; 56
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	8a 81       	ldd	r24, Y+2	; 0x02
    11f2:	80 83       	st	Z, r24
    11f4:	09 c0       	rjmp	.+18     	; 0x1208 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    11f6:	e5 e3       	ldi	r30, 0x35	; 53
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	8a 81       	ldd	r24, Y+2	; 0x02
    11fc:	80 83       	st	Z, r24
    11fe:	04 c0       	rjmp	.+8      	; 0x1208 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1200:	e2 e3       	ldi	r30, 0x32	; 50
    1202:	f0 e0       	ldi	r31, 0x00	; 0
    1204:	8a 81       	ldd	r24, Y+2	; 0x02
    1206:	80 83       	st	Z, r24
			break;
		}
	}
}
    1208:	0f 90       	pop	r0
    120a:	0f 90       	pop	r0
    120c:	0f 90       	pop	r0
    120e:	0f 90       	pop	r0
    1210:	cf 91       	pop	r28
    1212:	df 91       	pop	r29
    1214:	08 95       	ret

00001216 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1216:	df 93       	push	r29
    1218:	cf 93       	push	r28
    121a:	00 d0       	rcall	.+0      	; 0x121c <GPIO_readPort+0x6>
    121c:	00 d0       	rcall	.+0      	; 0x121e <GPIO_readPort+0x8>
    121e:	cd b7       	in	r28, 0x3d	; 61
    1220:	de b7       	in	r29, 0x3e	; 62
    1222:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1224:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1226:	8a 81       	ldd	r24, Y+2	; 0x02
    1228:	84 30       	cpi	r24, 0x04	; 4
    122a:	90 f5       	brcc	.+100    	; 0x1290 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    122c:	8a 81       	ldd	r24, Y+2	; 0x02
    122e:	28 2f       	mov	r18, r24
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	3c 83       	std	Y+4, r19	; 0x04
    1234:	2b 83       	std	Y+3, r18	; 0x03
    1236:	8b 81       	ldd	r24, Y+3	; 0x03
    1238:	9c 81       	ldd	r25, Y+4	; 0x04
    123a:	81 30       	cpi	r24, 0x01	; 1
    123c:	91 05       	cpc	r25, r1
    123e:	d1 f0       	breq	.+52     	; 0x1274 <GPIO_readPort+0x5e>
    1240:	2b 81       	ldd	r18, Y+3	; 0x03
    1242:	3c 81       	ldd	r19, Y+4	; 0x04
    1244:	22 30       	cpi	r18, 0x02	; 2
    1246:	31 05       	cpc	r19, r1
    1248:	2c f4       	brge	.+10     	; 0x1254 <GPIO_readPort+0x3e>
    124a:	8b 81       	ldd	r24, Y+3	; 0x03
    124c:	9c 81       	ldd	r25, Y+4	; 0x04
    124e:	00 97       	sbiw	r24, 0x00	; 0
    1250:	61 f0       	breq	.+24     	; 0x126a <GPIO_readPort+0x54>
    1252:	1e c0       	rjmp	.+60     	; 0x1290 <GPIO_readPort+0x7a>
    1254:	2b 81       	ldd	r18, Y+3	; 0x03
    1256:	3c 81       	ldd	r19, Y+4	; 0x04
    1258:	22 30       	cpi	r18, 0x02	; 2
    125a:	31 05       	cpc	r19, r1
    125c:	81 f0       	breq	.+32     	; 0x127e <GPIO_readPort+0x68>
    125e:	8b 81       	ldd	r24, Y+3	; 0x03
    1260:	9c 81       	ldd	r25, Y+4	; 0x04
    1262:	83 30       	cpi	r24, 0x03	; 3
    1264:	91 05       	cpc	r25, r1
    1266:	81 f0       	breq	.+32     	; 0x1288 <GPIO_readPort+0x72>
    1268:	13 c0       	rjmp	.+38     	; 0x1290 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    126a:	e9 e3       	ldi	r30, 0x39	; 57
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	80 81       	ld	r24, Z
    1270:	89 83       	std	Y+1, r24	; 0x01
    1272:	0e c0       	rjmp	.+28     	; 0x1290 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1274:	e6 e3       	ldi	r30, 0x36	; 54
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	80 81       	ld	r24, Z
    127a:	89 83       	std	Y+1, r24	; 0x01
    127c:	09 c0       	rjmp	.+18     	; 0x1290 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    127e:	e3 e3       	ldi	r30, 0x33	; 51
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	80 81       	ld	r24, Z
    1284:	89 83       	std	Y+1, r24	; 0x01
    1286:	04 c0       	rjmp	.+8      	; 0x1290 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1288:	e0 e3       	ldi	r30, 0x30	; 48
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	80 81       	ld	r24, Z
    128e:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1290:	89 81       	ldd	r24, Y+1	; 0x01
}
    1292:	0f 90       	pop	r0
    1294:	0f 90       	pop	r0
    1296:	0f 90       	pop	r0
    1298:	0f 90       	pop	r0
    129a:	cf 91       	pop	r28
    129c:	df 91       	pop	r29
    129e:	08 95       	ret

000012a0 <DIO_init>:


void DIO_init(void)
{
    12a0:	df 93       	push	r29
    12a2:	cf 93       	push	r28
    12a4:	00 d0       	rcall	.+0      	; 0x12a6 <DIO_init+0x6>
    12a6:	00 d0       	rcall	.+0      	; 0x12a8 <DIO_init+0x8>
    12a8:	cd b7       	in	r28, 0x3d	; 61
    12aa:	de b7       	in	r29, 0x3e	; 62
	uint8_t loop;
	for(loop=0u; loop < DIO_NUM_OF_CHANNELS ; loop++ ){
    12ac:	1c 82       	std	Y+4, r1	; 0x04
    12ae:	2f c0       	rjmp	.+94     	; 0x130e <DIO_init+0x6e>
		uint8_t portid=dio_config_array[loop].port_id;
    12b0:	8c 81       	ldd	r24, Y+4	; 0x04
    12b2:	28 2f       	mov	r18, r24
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	c9 01       	movw	r24, r18
    12b8:	88 0f       	add	r24, r24
    12ba:	99 1f       	adc	r25, r25
    12bc:	82 0f       	add	r24, r18
    12be:	93 1f       	adc	r25, r19
    12c0:	fc 01       	movw	r30, r24
    12c2:	e4 59       	subi	r30, 0x94	; 148
    12c4:	ff 4f       	sbci	r31, 0xFF	; 255
    12c6:	80 81       	ld	r24, Z
    12c8:	8b 83       	std	Y+3, r24	; 0x03
		uint8_t pin_num=dio_config_array[loop].pin_num;
    12ca:	8c 81       	ldd	r24, Y+4	; 0x04
    12cc:	28 2f       	mov	r18, r24
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	c9 01       	movw	r24, r18
    12d2:	88 0f       	add	r24, r24
    12d4:	99 1f       	adc	r25, r25
    12d6:	82 0f       	add	r24, r18
    12d8:	93 1f       	adc	r25, r19
    12da:	fc 01       	movw	r30, r24
    12dc:	e3 59       	subi	r30, 0x93	; 147
    12de:	ff 4f       	sbci	r31, 0xFF	; 255
    12e0:	80 81       	ld	r24, Z
    12e2:	8a 83       	std	Y+2, r24	; 0x02
		uint8_t direction=dio_config_array[loop].direction;
    12e4:	8c 81       	ldd	r24, Y+4	; 0x04
    12e6:	28 2f       	mov	r18, r24
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	c9 01       	movw	r24, r18
    12ec:	88 0f       	add	r24, r24
    12ee:	99 1f       	adc	r25, r25
    12f0:	82 0f       	add	r24, r18
    12f2:	93 1f       	adc	r25, r19
    12f4:	fc 01       	movw	r30, r24
    12f6:	e2 59       	subi	r30, 0x92	; 146
    12f8:	ff 4f       	sbci	r31, 0xFF	; 255
    12fa:	80 81       	ld	r24, Z
    12fc:	89 83       	std	Y+1, r24	; 0x01
		GPIO_setupPinDirection(portid,pin_num,direction);
    12fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1300:	6a 81       	ldd	r22, Y+2	; 0x02
    1302:	49 81       	ldd	r20, Y+1	; 0x01
    1304:	0e 94 12 06 	call	0xc24	; 0xc24 <GPIO_setupPinDirection>


void DIO_init(void)
{
	uint8_t loop;
	for(loop=0u; loop < DIO_NUM_OF_CHANNELS ; loop++ ){
    1308:	8c 81       	ldd	r24, Y+4	; 0x04
    130a:	8f 5f       	subi	r24, 0xFF	; 255
    130c:	8c 83       	std	Y+4, r24	; 0x04
    130e:	8c 81       	ldd	r24, Y+4	; 0x04
    1310:	85 30       	cpi	r24, 0x05	; 5
    1312:	70 f2       	brcs	.-100    	; 0x12b0 <DIO_init+0x10>
		uint8_t portid=dio_config_array[loop].port_id;
		uint8_t pin_num=dio_config_array[loop].pin_num;
		uint8_t direction=dio_config_array[loop].direction;
		GPIO_setupPinDirection(portid,pin_num,direction);
	}
}
    1314:	0f 90       	pop	r0
    1316:	0f 90       	pop	r0
    1318:	0f 90       	pop	r0
    131a:	0f 90       	pop	r0
    131c:	cf 91       	pop	r28
    131e:	df 91       	pop	r29
    1320:	08 95       	ret

00001322 <DIO_ChannelGroupWrite>:


void DIO_ChannelGroupWrite(ChannelGroupType channel_group_variabe , uint8_t data)
{
    1322:	cf 92       	push	r12
    1324:	ef 92       	push	r14
    1326:	ff 92       	push	r15
    1328:	0f 93       	push	r16
    132a:	1f 93       	push	r17
    132c:	df 93       	push	r29
    132e:	cf 93       	push	r28
    1330:	cd b7       	in	r28, 0x3d	; 61
    1332:	de b7       	in	r29, 0x3e	; 62
    1334:	63 97       	sbiw	r28, 0x13	; 19
    1336:	0f b6       	in	r0, 0x3f	; 63
    1338:	f8 94       	cli
    133a:	de bf       	out	0x3e, r29	; 62
    133c:	0f be       	out	0x3f, r0	; 63
    133e:	cd bf       	out	0x3d, r28	; 61
    1340:	ef 82       	std	Y+7, r14	; 0x07
    1342:	f8 86       	std	Y+8, r15	; 0x08
    1344:	09 87       	std	Y+9, r16	; 0x09
    1346:	1a 87       	std	Y+10, r17	; 0x0a
    1348:	2b 87       	std	Y+11, r18	; 0x0b
    134a:	3c 87       	std	Y+12, r19	; 0x0c
    134c:	4d 87       	std	Y+13, r20	; 0x0d
    134e:	5e 87       	std	Y+14, r21	; 0x0e
    1350:	6f 87       	std	Y+15, r22	; 0x0f
    1352:	78 8b       	std	Y+16, r23	; 0x10
    1354:	89 8b       	std	Y+17, r24	; 0x11
    1356:	9a 8b       	std	Y+18, r25	; 0x12
    1358:	cb 8a       	std	Y+19, r12	; 0x13
	uint8_t loop;
	uint8_t to=channel_group_variabe.no_of_channels;
    135a:	8f 81       	ldd	r24, Y+7	; 0x07
    135c:	98 85       	ldd	r25, Y+8	; 0x08
    135e:	8d 83       	std	Y+5, r24	; 0x05

	for(loop=0u; loop <to ; loop++ ){
    1360:	1e 82       	std	Y+6, r1	; 0x06
    1362:	4c c0       	rjmp	.+152    	; 0x13fc <DIO_ChannelGroupWrite+0xda>
		uint8_t channel_id=channel_group_variabe.group_ids[loop];
    1364:	8e 81       	ldd	r24, Y+6	; 0x06
    1366:	88 2f       	mov	r24, r24
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	01 96       	adiw	r24, 0x01	; 1
    136c:	9c 01       	movw	r18, r24
    136e:	22 0f       	add	r18, r18
    1370:	33 1f       	adc	r19, r19
    1372:	ce 01       	movw	r24, r28
    1374:	01 96       	adiw	r24, 0x01	; 1
    1376:	82 0f       	add	r24, r18
    1378:	93 1f       	adc	r25, r19
    137a:	fc 01       	movw	r30, r24
    137c:	36 96       	adiw	r30, 0x06	; 6
    137e:	80 81       	ld	r24, Z
    1380:	91 81       	ldd	r25, Z+1	; 0x01
    1382:	8c 83       	std	Y+4, r24	; 0x04
		uint8_t portid=dio_config_array[channel_id].port_id;
    1384:	8c 81       	ldd	r24, Y+4	; 0x04
    1386:	28 2f       	mov	r18, r24
    1388:	30 e0       	ldi	r19, 0x00	; 0
    138a:	c9 01       	movw	r24, r18
    138c:	88 0f       	add	r24, r24
    138e:	99 1f       	adc	r25, r25
    1390:	82 0f       	add	r24, r18
    1392:	93 1f       	adc	r25, r19
    1394:	fc 01       	movw	r30, r24
    1396:	e4 59       	subi	r30, 0x94	; 148
    1398:	ff 4f       	sbci	r31, 0xFF	; 255
    139a:	80 81       	ld	r24, Z
    139c:	8b 83       	std	Y+3, r24	; 0x03
		uint8_t pin_num=dio_config_array[channel_id].pin_num;
    139e:	8c 81       	ldd	r24, Y+4	; 0x04
    13a0:	28 2f       	mov	r18, r24
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	c9 01       	movw	r24, r18
    13a6:	88 0f       	add	r24, r24
    13a8:	99 1f       	adc	r25, r25
    13aa:	82 0f       	add	r24, r18
    13ac:	93 1f       	adc	r25, r19
    13ae:	fc 01       	movw	r30, r24
    13b0:	e3 59       	subi	r30, 0x93	; 147
    13b2:	ff 4f       	sbci	r31, 0xFF	; 255
    13b4:	80 81       	ld	r24, Z
    13b6:	8a 83       	std	Y+2, r24	; 0x02
		uint8_t bit_data=READ_BIT(data,loop);
    13b8:	8e 81       	ldd	r24, Y+6	; 0x06
    13ba:	28 2f       	mov	r18, r24
    13bc:	30 e0       	ldi	r19, 0x00	; 0
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	02 c0       	rjmp	.+4      	; 0x13c8 <DIO_ChannelGroupWrite+0xa6>
    13c4:	88 0f       	add	r24, r24
    13c6:	99 1f       	adc	r25, r25
    13c8:	2a 95       	dec	r18
    13ca:	e2 f7       	brpl	.-8      	; 0x13c4 <DIO_ChannelGroupWrite+0xa2>
    13cc:	98 2f       	mov	r25, r24
    13ce:	8b 89       	ldd	r24, Y+19	; 0x13
    13d0:	89 23       	and	r24, r25
    13d2:	28 2f       	mov	r18, r24
    13d4:	30 e0       	ldi	r19, 0x00	; 0
    13d6:	8e 81       	ldd	r24, Y+6	; 0x06
    13d8:	88 2f       	mov	r24, r24
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	a9 01       	movw	r20, r18
    13de:	02 c0       	rjmp	.+4      	; 0x13e4 <DIO_ChannelGroupWrite+0xc2>
    13e0:	55 95       	asr	r21
    13e2:	47 95       	ror	r20
    13e4:	8a 95       	dec	r24
    13e6:	e2 f7       	brpl	.-8      	; 0x13e0 <DIO_ChannelGroupWrite+0xbe>
    13e8:	ca 01       	movw	r24, r20
    13ea:	89 83       	std	Y+1, r24	; 0x01
		GPIO_writePin(portid,pin_num,bit_data);
    13ec:	8b 81       	ldd	r24, Y+3	; 0x03
    13ee:	6a 81       	ldd	r22, Y+2	; 0x02
    13f0:	49 81       	ldd	r20, Y+1	; 0x01
    13f2:	0e 94 fd 06 	call	0xdfa	; 0xdfa <GPIO_writePin>
void DIO_ChannelGroupWrite(ChannelGroupType channel_group_variabe , uint8_t data)
{
	uint8_t loop;
	uint8_t to=channel_group_variabe.no_of_channels;

	for(loop=0u; loop <to ; loop++ ){
    13f6:	8e 81       	ldd	r24, Y+6	; 0x06
    13f8:	8f 5f       	subi	r24, 0xFF	; 255
    13fa:	8e 83       	std	Y+6, r24	; 0x06
    13fc:	9e 81       	ldd	r25, Y+6	; 0x06
    13fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1400:	98 17       	cp	r25, r24
    1402:	08 f4       	brcc	.+2      	; 0x1406 <DIO_ChannelGroupWrite+0xe4>
    1404:	af cf       	rjmp	.-162    	; 0x1364 <DIO_ChannelGroupWrite+0x42>
		GPIO_writePin(portid,pin_num,bit_data);

	}


}
    1406:	63 96       	adiw	r28, 0x13	; 19
    1408:	0f b6       	in	r0, 0x3f	; 63
    140a:	f8 94       	cli
    140c:	de bf       	out	0x3e, r29	; 62
    140e:	0f be       	out	0x3f, r0	; 63
    1410:	cd bf       	out	0x3d, r28	; 61
    1412:	cf 91       	pop	r28
    1414:	df 91       	pop	r29
    1416:	1f 91       	pop	r17
    1418:	0f 91       	pop	r16
    141a:	ff 90       	pop	r15
    141c:	ef 90       	pop	r14
    141e:	cf 90       	pop	r12
    1420:	08 95       	ret

00001422 <DIO_ChannelGroupRead>:


void DIO_ChannelGroupRead(ChannelGroupType channel_group_variabe ,uint8_t * data_ptr)
{
    1422:	cf 92       	push	r12
    1424:	df 92       	push	r13
    1426:	ef 92       	push	r14
    1428:	ff 92       	push	r15
    142a:	0f 93       	push	r16
    142c:	1f 93       	push	r17
    142e:	df 93       	push	r29
    1430:	cf 93       	push	r28
    1432:	cd b7       	in	r28, 0x3d	; 61
    1434:	de b7       	in	r29, 0x3e	; 62
    1436:	64 97       	sbiw	r28, 0x14	; 20
    1438:	0f b6       	in	r0, 0x3f	; 63
    143a:	f8 94       	cli
    143c:	de bf       	out	0x3e, r29	; 62
    143e:	0f be       	out	0x3f, r0	; 63
    1440:	cd bf       	out	0x3d, r28	; 61
    1442:	ef 82       	std	Y+7, r14	; 0x07
    1444:	f8 86       	std	Y+8, r15	; 0x08
    1446:	09 87       	std	Y+9, r16	; 0x09
    1448:	1a 87       	std	Y+10, r17	; 0x0a
    144a:	2b 87       	std	Y+11, r18	; 0x0b
    144c:	3c 87       	std	Y+12, r19	; 0x0c
    144e:	4d 87       	std	Y+13, r20	; 0x0d
    1450:	5e 87       	std	Y+14, r21	; 0x0e
    1452:	6f 87       	std	Y+15, r22	; 0x0f
    1454:	78 8b       	std	Y+16, r23	; 0x10
    1456:	89 8b       	std	Y+17, r24	; 0x11
    1458:	9a 8b       	std	Y+18, r25	; 0x12
    145a:	dc 8a       	std	Y+20, r13	; 0x14
    145c:	cb 8a       	std	Y+19, r12	; 0x13

	uint8_t loop;
	uint8_t to=channel_group_variabe.no_of_channels;
    145e:	8f 81       	ldd	r24, Y+7	; 0x07
    1460:	98 85       	ldd	r25, Y+8	; 0x08
    1462:	8d 83       	std	Y+5, r24	; 0x05

	for(loop=0u; loop <to ; loop++ ){
    1464:	1e 82       	std	Y+6, r1	; 0x06
    1466:	5d c0       	rjmp	.+186    	; 0x1522 <DIO_ChannelGroupRead+0x100>
		uint8_t channel_id=channel_group_variabe.group_ids[loop];
    1468:	8e 81       	ldd	r24, Y+6	; 0x06
    146a:	88 2f       	mov	r24, r24
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	01 96       	adiw	r24, 0x01	; 1
    1470:	9c 01       	movw	r18, r24
    1472:	22 0f       	add	r18, r18
    1474:	33 1f       	adc	r19, r19
    1476:	ce 01       	movw	r24, r28
    1478:	01 96       	adiw	r24, 0x01	; 1
    147a:	82 0f       	add	r24, r18
    147c:	93 1f       	adc	r25, r19
    147e:	fc 01       	movw	r30, r24
    1480:	36 96       	adiw	r30, 0x06	; 6
    1482:	80 81       	ld	r24, Z
    1484:	91 81       	ldd	r25, Z+1	; 0x01
    1486:	8c 83       	std	Y+4, r24	; 0x04
		uint8_t portid=dio_config_array[channel_id].port_id;
    1488:	8c 81       	ldd	r24, Y+4	; 0x04
    148a:	28 2f       	mov	r18, r24
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	c9 01       	movw	r24, r18
    1490:	88 0f       	add	r24, r24
    1492:	99 1f       	adc	r25, r25
    1494:	82 0f       	add	r24, r18
    1496:	93 1f       	adc	r25, r19
    1498:	fc 01       	movw	r30, r24
    149a:	e4 59       	subi	r30, 0x94	; 148
    149c:	ff 4f       	sbci	r31, 0xFF	; 255
    149e:	80 81       	ld	r24, Z
    14a0:	8b 83       	std	Y+3, r24	; 0x03
		uint8_t pin_num=dio_config_array[channel_id].pin_num;
    14a2:	8c 81       	ldd	r24, Y+4	; 0x04
    14a4:	28 2f       	mov	r18, r24
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	c9 01       	movw	r24, r18
    14aa:	88 0f       	add	r24, r24
    14ac:	99 1f       	adc	r25, r25
    14ae:	82 0f       	add	r24, r18
    14b0:	93 1f       	adc	r25, r19
    14b2:	fc 01       	movw	r30, r24
    14b4:	e3 59       	subi	r30, 0x93	; 147
    14b6:	ff 4f       	sbci	r31, 0xFF	; 255
    14b8:	80 81       	ld	r24, Z
    14ba:	8a 83       	std	Y+2, r24	; 0x02
		uint8_t data = GPIO_readPin(portid, pin_num);
    14bc:	8b 81       	ldd	r24, Y+3	; 0x03
    14be:	6a 81       	ldd	r22, Y+2	; 0x02
    14c0:	0e 94 e8 07 	call	0xfd0	; 0xfd0 <GPIO_readPin>
    14c4:	89 83       	std	Y+1, r24	; 0x01
		if(data == LOGIC_HIGH){
    14c6:	89 81       	ldd	r24, Y+1	; 0x01
    14c8:	81 30       	cpi	r24, 0x01	; 1
    14ca:	a1 f4       	brne	.+40     	; 0x14f4 <DIO_ChannelGroupRead+0xd2>
			SET_BIT(* data_ptr,loop);
    14cc:	eb 89       	ldd	r30, Y+19	; 0x13
    14ce:	fc 89       	ldd	r31, Y+20	; 0x14
    14d0:	80 81       	ld	r24, Z
    14d2:	48 2f       	mov	r20, r24
    14d4:	8e 81       	ldd	r24, Y+6	; 0x06
    14d6:	28 2f       	mov	r18, r24
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	81 e0       	ldi	r24, 0x01	; 1
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	02 2e       	mov	r0, r18
    14e0:	02 c0       	rjmp	.+4      	; 0x14e6 <DIO_ChannelGroupRead+0xc4>
    14e2:	88 0f       	add	r24, r24
    14e4:	99 1f       	adc	r25, r25
    14e6:	0a 94       	dec	r0
    14e8:	e2 f7       	brpl	.-8      	; 0x14e2 <DIO_ChannelGroupRead+0xc0>
    14ea:	84 2b       	or	r24, r20
    14ec:	eb 89       	ldd	r30, Y+19	; 0x13
    14ee:	fc 89       	ldd	r31, Y+20	; 0x14
    14f0:	80 83       	st	Z, r24
    14f2:	14 c0       	rjmp	.+40     	; 0x151c <DIO_ChannelGroupRead+0xfa>
		}else{
			CLEAR_BIT(* data_ptr,loop);
    14f4:	eb 89       	ldd	r30, Y+19	; 0x13
    14f6:	fc 89       	ldd	r31, Y+20	; 0x14
    14f8:	80 81       	ld	r24, Z
    14fa:	48 2f       	mov	r20, r24
    14fc:	8e 81       	ldd	r24, Y+6	; 0x06
    14fe:	28 2f       	mov	r18, r24
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	02 2e       	mov	r0, r18
    1508:	02 c0       	rjmp	.+4      	; 0x150e <DIO_ChannelGroupRead+0xec>
    150a:	88 0f       	add	r24, r24
    150c:	99 1f       	adc	r25, r25
    150e:	0a 94       	dec	r0
    1510:	e2 f7       	brpl	.-8      	; 0x150a <DIO_ChannelGroupRead+0xe8>
    1512:	80 95       	com	r24
    1514:	84 23       	and	r24, r20
    1516:	eb 89       	ldd	r30, Y+19	; 0x13
    1518:	fc 89       	ldd	r31, Y+20	; 0x14
    151a:	80 83       	st	Z, r24
{

	uint8_t loop;
	uint8_t to=channel_group_variabe.no_of_channels;

	for(loop=0u; loop <to ; loop++ ){
    151c:	8e 81       	ldd	r24, Y+6	; 0x06
    151e:	8f 5f       	subi	r24, 0xFF	; 255
    1520:	8e 83       	std	Y+6, r24	; 0x06
    1522:	9e 81       	ldd	r25, Y+6	; 0x06
    1524:	8d 81       	ldd	r24, Y+5	; 0x05
    1526:	98 17       	cp	r25, r24
    1528:	08 f4       	brcc	.+2      	; 0x152c <DIO_ChannelGroupRead+0x10a>
    152a:	9e cf       	rjmp	.-196    	; 0x1468 <DIO_ChannelGroupRead+0x46>
		}else{
			CLEAR_BIT(* data_ptr,loop);
		}
	}

}
    152c:	64 96       	adiw	r28, 0x14	; 20
    152e:	0f b6       	in	r0, 0x3f	; 63
    1530:	f8 94       	cli
    1532:	de bf       	out	0x3e, r29	; 62
    1534:	0f be       	out	0x3f, r0	; 63
    1536:	cd bf       	out	0x3d, r28	; 61
    1538:	cf 91       	pop	r28
    153a:	df 91       	pop	r29
    153c:	1f 91       	pop	r17
    153e:	0f 91       	pop	r16
    1540:	ff 90       	pop	r15
    1542:	ef 90       	pop	r14
    1544:	df 90       	pop	r13
    1546:	cf 90       	pop	r12
    1548:	08 95       	ret

0000154a <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    154a:	df 93       	push	r29
    154c:	cf 93       	push	r28
    154e:	cd b7       	in	r28, 0x3d	; 61
    1550:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1552:	83 e0       	ldi	r24, 0x03	; 3
    1554:	60 e0       	ldi	r22, 0x00	; 0
    1556:	41 e0       	ldi	r20, 0x01	; 1
    1558:	0e 94 12 06 	call	0xc24	; 0xc24 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    155c:	83 e0       	ldi	r24, 0x03	; 3
    155e:	61 e0       	ldi	r22, 0x01	; 1
    1560:	41 e0       	ldi	r20, 0x01	; 1
    1562:	0e 94 12 06 	call	0xc24	; 0xc24 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1566:	83 e0       	ldi	r24, 0x03	; 3
    1568:	62 e0       	ldi	r22, 0x02	; 2
    156a:	41 e0       	ldi	r20, 0x01	; 1
    156c:	0e 94 12 06 	call	0xc24	; 0xc24 <GPIO_setupPinDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1570:	82 e0       	ldi	r24, 0x02	; 2
    1572:	6f ef       	ldi	r22, 0xFF	; 255
    1574:	0e 94 83 08 	call	0x1106	; 0x1106 <GPIO_setupPortDirection>

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1578:	88 e3       	ldi	r24, 0x38	; 56
    157a:	0e 94 c8 0a 	call	0x1590	; 0x1590 <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    157e:	8c e0       	ldi	r24, 0x0C	; 12
    1580:	0e 94 c8 0a 	call	0x1590	; 0x1590 <LCD_sendCommand>
	
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1584:	81 e0       	ldi	r24, 0x01	; 1
    1586:	0e 94 c8 0a 	call	0x1590	; 0x1590 <LCD_sendCommand>
}
    158a:	cf 91       	pop	r28
    158c:	df 91       	pop	r29
    158e:	08 95       	ret

00001590 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1590:	df 93       	push	r29
    1592:	cf 93       	push	r28
    1594:	cd b7       	in	r28, 0x3d	; 61
    1596:	de b7       	in	r29, 0x3e	; 62
    1598:	e9 97       	sbiw	r28, 0x39	; 57
    159a:	0f b6       	in	r0, 0x3f	; 63
    159c:	f8 94       	cli
    159e:	de bf       	out	0x3e, r29	; 62
    15a0:	0f be       	out	0x3f, r0	; 63
    15a2:	cd bf       	out	0x3d, r28	; 61
    15a4:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    15a6:	83 e0       	ldi	r24, 0x03	; 3
    15a8:	60 e0       	ldi	r22, 0x00	; 0
    15aa:	40 e0       	ldi	r20, 0x00	; 0
    15ac:	0e 94 fd 06 	call	0xdfa	; 0xdfa <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    15b0:	83 e0       	ldi	r24, 0x03	; 3
    15b2:	61 e0       	ldi	r22, 0x01	; 1
    15b4:	40 e0       	ldi	r20, 0x00	; 0
    15b6:	0e 94 fd 06 	call	0xdfa	; 0xdfa <GPIO_writePin>
    15ba:	80 e0       	ldi	r24, 0x00	; 0
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	a0 e8       	ldi	r26, 0x80	; 128
    15c0:	bf e3       	ldi	r27, 0x3F	; 63
    15c2:	8d ab       	std	Y+53, r24	; 0x35
    15c4:	9e ab       	std	Y+54, r25	; 0x36
    15c6:	af ab       	std	Y+55, r26	; 0x37
    15c8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15ca:	6d a9       	ldd	r22, Y+53	; 0x35
    15cc:	7e a9       	ldd	r23, Y+54	; 0x36
    15ce:	8f a9       	ldd	r24, Y+55	; 0x37
    15d0:	98 ad       	ldd	r25, Y+56	; 0x38
    15d2:	20 e0       	ldi	r18, 0x00	; 0
    15d4:	30 e0       	ldi	r19, 0x00	; 0
    15d6:	4a e7       	ldi	r20, 0x7A	; 122
    15d8:	53 e4       	ldi	r21, 0x43	; 67
    15da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15de:	dc 01       	movw	r26, r24
    15e0:	cb 01       	movw	r24, r22
    15e2:	89 ab       	std	Y+49, r24	; 0x31
    15e4:	9a ab       	std	Y+50, r25	; 0x32
    15e6:	ab ab       	std	Y+51, r26	; 0x33
    15e8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    15ea:	69 a9       	ldd	r22, Y+49	; 0x31
    15ec:	7a a9       	ldd	r23, Y+50	; 0x32
    15ee:	8b a9       	ldd	r24, Y+51	; 0x33
    15f0:	9c a9       	ldd	r25, Y+52	; 0x34
    15f2:	20 e0       	ldi	r18, 0x00	; 0
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	40 e8       	ldi	r20, 0x80	; 128
    15f8:	5f e3       	ldi	r21, 0x3F	; 63
    15fa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15fe:	88 23       	and	r24, r24
    1600:	2c f4       	brge	.+10     	; 0x160c <LCD_sendCommand+0x7c>
		__ticks = 1;
    1602:	81 e0       	ldi	r24, 0x01	; 1
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	98 ab       	std	Y+48, r25	; 0x30
    1608:	8f a7       	std	Y+47, r24	; 0x2f
    160a:	3f c0       	rjmp	.+126    	; 0x168a <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    160c:	69 a9       	ldd	r22, Y+49	; 0x31
    160e:	7a a9       	ldd	r23, Y+50	; 0x32
    1610:	8b a9       	ldd	r24, Y+51	; 0x33
    1612:	9c a9       	ldd	r25, Y+52	; 0x34
    1614:	20 e0       	ldi	r18, 0x00	; 0
    1616:	3f ef       	ldi	r19, 0xFF	; 255
    1618:	4f e7       	ldi	r20, 0x7F	; 127
    161a:	57 e4       	ldi	r21, 0x47	; 71
    161c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1620:	18 16       	cp	r1, r24
    1622:	4c f5       	brge	.+82     	; 0x1676 <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1624:	6d a9       	ldd	r22, Y+53	; 0x35
    1626:	7e a9       	ldd	r23, Y+54	; 0x36
    1628:	8f a9       	ldd	r24, Y+55	; 0x37
    162a:	98 ad       	ldd	r25, Y+56	; 0x38
    162c:	20 e0       	ldi	r18, 0x00	; 0
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	40 e2       	ldi	r20, 0x20	; 32
    1632:	51 e4       	ldi	r21, 0x41	; 65
    1634:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1638:	dc 01       	movw	r26, r24
    163a:	cb 01       	movw	r24, r22
    163c:	bc 01       	movw	r22, r24
    163e:	cd 01       	movw	r24, r26
    1640:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1644:	dc 01       	movw	r26, r24
    1646:	cb 01       	movw	r24, r22
    1648:	98 ab       	std	Y+48, r25	; 0x30
    164a:	8f a7       	std	Y+47, r24	; 0x2f
    164c:	0f c0       	rjmp	.+30     	; 0x166c <LCD_sendCommand+0xdc>
    164e:	89 e1       	ldi	r24, 0x19	; 25
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	9e a7       	std	Y+46, r25	; 0x2e
    1654:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1656:	8d a5       	ldd	r24, Y+45	; 0x2d
    1658:	9e a5       	ldd	r25, Y+46	; 0x2e
    165a:	01 97       	sbiw	r24, 0x01	; 1
    165c:	f1 f7       	brne	.-4      	; 0x165a <LCD_sendCommand+0xca>
    165e:	9e a7       	std	Y+46, r25	; 0x2e
    1660:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1662:	8f a5       	ldd	r24, Y+47	; 0x2f
    1664:	98 a9       	ldd	r25, Y+48	; 0x30
    1666:	01 97       	sbiw	r24, 0x01	; 1
    1668:	98 ab       	std	Y+48, r25	; 0x30
    166a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    166c:	8f a5       	ldd	r24, Y+47	; 0x2f
    166e:	98 a9       	ldd	r25, Y+48	; 0x30
    1670:	00 97       	sbiw	r24, 0x00	; 0
    1672:	69 f7       	brne	.-38     	; 0x164e <LCD_sendCommand+0xbe>
    1674:	14 c0       	rjmp	.+40     	; 0x169e <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1676:	69 a9       	ldd	r22, Y+49	; 0x31
    1678:	7a a9       	ldd	r23, Y+50	; 0x32
    167a:	8b a9       	ldd	r24, Y+51	; 0x33
    167c:	9c a9       	ldd	r25, Y+52	; 0x34
    167e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1682:	dc 01       	movw	r26, r24
    1684:	cb 01       	movw	r24, r22
    1686:	98 ab       	std	Y+48, r25	; 0x30
    1688:	8f a7       	std	Y+47, r24	; 0x2f
    168a:	8f a5       	ldd	r24, Y+47	; 0x2f
    168c:	98 a9       	ldd	r25, Y+48	; 0x30
    168e:	9c a7       	std	Y+44, r25	; 0x2c
    1690:	8b a7       	std	Y+43, r24	; 0x2b
    1692:	8b a5       	ldd	r24, Y+43	; 0x2b
    1694:	9c a5       	ldd	r25, Y+44	; 0x2c
    1696:	01 97       	sbiw	r24, 0x01	; 1
    1698:	f1 f7       	brne	.-4      	; 0x1696 <LCD_sendCommand+0x106>
    169a:	9c a7       	std	Y+44, r25	; 0x2c
    169c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    169e:	83 e0       	ldi	r24, 0x03	; 3
    16a0:	62 e0       	ldi	r22, 0x02	; 2
    16a2:	41 e0       	ldi	r20, 0x01	; 1
    16a4:	0e 94 fd 06 	call	0xdfa	; 0xdfa <GPIO_writePin>
    16a8:	80 e0       	ldi	r24, 0x00	; 0
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	a0 e8       	ldi	r26, 0x80	; 128
    16ae:	bf e3       	ldi	r27, 0x3F	; 63
    16b0:	8f a3       	std	Y+39, r24	; 0x27
    16b2:	98 a7       	std	Y+40, r25	; 0x28
    16b4:	a9 a7       	std	Y+41, r26	; 0x29
    16b6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16b8:	6f a1       	ldd	r22, Y+39	; 0x27
    16ba:	78 a5       	ldd	r23, Y+40	; 0x28
    16bc:	89 a5       	ldd	r24, Y+41	; 0x29
    16be:	9a a5       	ldd	r25, Y+42	; 0x2a
    16c0:	20 e0       	ldi	r18, 0x00	; 0
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	4a e7       	ldi	r20, 0x7A	; 122
    16c6:	53 e4       	ldi	r21, 0x43	; 67
    16c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16cc:	dc 01       	movw	r26, r24
    16ce:	cb 01       	movw	r24, r22
    16d0:	8b a3       	std	Y+35, r24	; 0x23
    16d2:	9c a3       	std	Y+36, r25	; 0x24
    16d4:	ad a3       	std	Y+37, r26	; 0x25
    16d6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    16d8:	6b a1       	ldd	r22, Y+35	; 0x23
    16da:	7c a1       	ldd	r23, Y+36	; 0x24
    16dc:	8d a1       	ldd	r24, Y+37	; 0x25
    16de:	9e a1       	ldd	r25, Y+38	; 0x26
    16e0:	20 e0       	ldi	r18, 0x00	; 0
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	40 e8       	ldi	r20, 0x80	; 128
    16e6:	5f e3       	ldi	r21, 0x3F	; 63
    16e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16ec:	88 23       	and	r24, r24
    16ee:	2c f4       	brge	.+10     	; 0x16fa <LCD_sendCommand+0x16a>
		__ticks = 1;
    16f0:	81 e0       	ldi	r24, 0x01	; 1
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	9a a3       	std	Y+34, r25	; 0x22
    16f6:	89 a3       	std	Y+33, r24	; 0x21
    16f8:	3f c0       	rjmp	.+126    	; 0x1778 <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    16fa:	6b a1       	ldd	r22, Y+35	; 0x23
    16fc:	7c a1       	ldd	r23, Y+36	; 0x24
    16fe:	8d a1       	ldd	r24, Y+37	; 0x25
    1700:	9e a1       	ldd	r25, Y+38	; 0x26
    1702:	20 e0       	ldi	r18, 0x00	; 0
    1704:	3f ef       	ldi	r19, 0xFF	; 255
    1706:	4f e7       	ldi	r20, 0x7F	; 127
    1708:	57 e4       	ldi	r21, 0x47	; 71
    170a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    170e:	18 16       	cp	r1, r24
    1710:	4c f5       	brge	.+82     	; 0x1764 <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1712:	6f a1       	ldd	r22, Y+39	; 0x27
    1714:	78 a5       	ldd	r23, Y+40	; 0x28
    1716:	89 a5       	ldd	r24, Y+41	; 0x29
    1718:	9a a5       	ldd	r25, Y+42	; 0x2a
    171a:	20 e0       	ldi	r18, 0x00	; 0
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	40 e2       	ldi	r20, 0x20	; 32
    1720:	51 e4       	ldi	r21, 0x41	; 65
    1722:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1726:	dc 01       	movw	r26, r24
    1728:	cb 01       	movw	r24, r22
    172a:	bc 01       	movw	r22, r24
    172c:	cd 01       	movw	r24, r26
    172e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1732:	dc 01       	movw	r26, r24
    1734:	cb 01       	movw	r24, r22
    1736:	9a a3       	std	Y+34, r25	; 0x22
    1738:	89 a3       	std	Y+33, r24	; 0x21
    173a:	0f c0       	rjmp	.+30     	; 0x175a <LCD_sendCommand+0x1ca>
    173c:	89 e1       	ldi	r24, 0x19	; 25
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	98 a3       	std	Y+32, r25	; 0x20
    1742:	8f 8f       	std	Y+31, r24	; 0x1f
    1744:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1746:	98 a1       	ldd	r25, Y+32	; 0x20
    1748:	01 97       	sbiw	r24, 0x01	; 1
    174a:	f1 f7       	brne	.-4      	; 0x1748 <LCD_sendCommand+0x1b8>
    174c:	98 a3       	std	Y+32, r25	; 0x20
    174e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1750:	89 a1       	ldd	r24, Y+33	; 0x21
    1752:	9a a1       	ldd	r25, Y+34	; 0x22
    1754:	01 97       	sbiw	r24, 0x01	; 1
    1756:	9a a3       	std	Y+34, r25	; 0x22
    1758:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    175a:	89 a1       	ldd	r24, Y+33	; 0x21
    175c:	9a a1       	ldd	r25, Y+34	; 0x22
    175e:	00 97       	sbiw	r24, 0x00	; 0
    1760:	69 f7       	brne	.-38     	; 0x173c <LCD_sendCommand+0x1ac>
    1762:	14 c0       	rjmp	.+40     	; 0x178c <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1764:	6b a1       	ldd	r22, Y+35	; 0x23
    1766:	7c a1       	ldd	r23, Y+36	; 0x24
    1768:	8d a1       	ldd	r24, Y+37	; 0x25
    176a:	9e a1       	ldd	r25, Y+38	; 0x26
    176c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1770:	dc 01       	movw	r26, r24
    1772:	cb 01       	movw	r24, r22
    1774:	9a a3       	std	Y+34, r25	; 0x22
    1776:	89 a3       	std	Y+33, r24	; 0x21
    1778:	89 a1       	ldd	r24, Y+33	; 0x21
    177a:	9a a1       	ldd	r25, Y+34	; 0x22
    177c:	9e 8f       	std	Y+30, r25	; 0x1e
    177e:	8d 8f       	std	Y+29, r24	; 0x1d
    1780:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1782:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1784:	01 97       	sbiw	r24, 0x01	; 1
    1786:	f1 f7       	brne	.-4      	; 0x1784 <LCD_sendCommand+0x1f4>
    1788:	9e 8f       	std	Y+30, r25	; 0x1e
    178a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    178c:	82 e0       	ldi	r24, 0x02	; 2
    178e:	69 ad       	ldd	r22, Y+57	; 0x39
    1790:	0e 94 c7 08 	call	0x118e	; 0x118e <GPIO_writePort>
    1794:	80 e0       	ldi	r24, 0x00	; 0
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	a0 e8       	ldi	r26, 0x80	; 128
    179a:	bf e3       	ldi	r27, 0x3F	; 63
    179c:	89 8f       	std	Y+25, r24	; 0x19
    179e:	9a 8f       	std	Y+26, r25	; 0x1a
    17a0:	ab 8f       	std	Y+27, r26	; 0x1b
    17a2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17a4:	69 8d       	ldd	r22, Y+25	; 0x19
    17a6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17a8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17aa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17ac:	20 e0       	ldi	r18, 0x00	; 0
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	4a e7       	ldi	r20, 0x7A	; 122
    17b2:	53 e4       	ldi	r21, 0x43	; 67
    17b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17b8:	dc 01       	movw	r26, r24
    17ba:	cb 01       	movw	r24, r22
    17bc:	8d 8b       	std	Y+21, r24	; 0x15
    17be:	9e 8b       	std	Y+22, r25	; 0x16
    17c0:	af 8b       	std	Y+23, r26	; 0x17
    17c2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    17c4:	6d 89       	ldd	r22, Y+21	; 0x15
    17c6:	7e 89       	ldd	r23, Y+22	; 0x16
    17c8:	8f 89       	ldd	r24, Y+23	; 0x17
    17ca:	98 8d       	ldd	r25, Y+24	; 0x18
    17cc:	20 e0       	ldi	r18, 0x00	; 0
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	40 e8       	ldi	r20, 0x80	; 128
    17d2:	5f e3       	ldi	r21, 0x3F	; 63
    17d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17d8:	88 23       	and	r24, r24
    17da:	2c f4       	brge	.+10     	; 0x17e6 <LCD_sendCommand+0x256>
		__ticks = 1;
    17dc:	81 e0       	ldi	r24, 0x01	; 1
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	9c 8b       	std	Y+20, r25	; 0x14
    17e2:	8b 8b       	std	Y+19, r24	; 0x13
    17e4:	3f c0       	rjmp	.+126    	; 0x1864 <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    17e6:	6d 89       	ldd	r22, Y+21	; 0x15
    17e8:	7e 89       	ldd	r23, Y+22	; 0x16
    17ea:	8f 89       	ldd	r24, Y+23	; 0x17
    17ec:	98 8d       	ldd	r25, Y+24	; 0x18
    17ee:	20 e0       	ldi	r18, 0x00	; 0
    17f0:	3f ef       	ldi	r19, 0xFF	; 255
    17f2:	4f e7       	ldi	r20, 0x7F	; 127
    17f4:	57 e4       	ldi	r21, 0x47	; 71
    17f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17fa:	18 16       	cp	r1, r24
    17fc:	4c f5       	brge	.+82     	; 0x1850 <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17fe:	69 8d       	ldd	r22, Y+25	; 0x19
    1800:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1802:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1804:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1806:	20 e0       	ldi	r18, 0x00	; 0
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	40 e2       	ldi	r20, 0x20	; 32
    180c:	51 e4       	ldi	r21, 0x41	; 65
    180e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1812:	dc 01       	movw	r26, r24
    1814:	cb 01       	movw	r24, r22
    1816:	bc 01       	movw	r22, r24
    1818:	cd 01       	movw	r24, r26
    181a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    181e:	dc 01       	movw	r26, r24
    1820:	cb 01       	movw	r24, r22
    1822:	9c 8b       	std	Y+20, r25	; 0x14
    1824:	8b 8b       	std	Y+19, r24	; 0x13
    1826:	0f c0       	rjmp	.+30     	; 0x1846 <LCD_sendCommand+0x2b6>
    1828:	89 e1       	ldi	r24, 0x19	; 25
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	9a 8b       	std	Y+18, r25	; 0x12
    182e:	89 8b       	std	Y+17, r24	; 0x11
    1830:	89 89       	ldd	r24, Y+17	; 0x11
    1832:	9a 89       	ldd	r25, Y+18	; 0x12
    1834:	01 97       	sbiw	r24, 0x01	; 1
    1836:	f1 f7       	brne	.-4      	; 0x1834 <LCD_sendCommand+0x2a4>
    1838:	9a 8b       	std	Y+18, r25	; 0x12
    183a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    183c:	8b 89       	ldd	r24, Y+19	; 0x13
    183e:	9c 89       	ldd	r25, Y+20	; 0x14
    1840:	01 97       	sbiw	r24, 0x01	; 1
    1842:	9c 8b       	std	Y+20, r25	; 0x14
    1844:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1846:	8b 89       	ldd	r24, Y+19	; 0x13
    1848:	9c 89       	ldd	r25, Y+20	; 0x14
    184a:	00 97       	sbiw	r24, 0x00	; 0
    184c:	69 f7       	brne	.-38     	; 0x1828 <LCD_sendCommand+0x298>
    184e:	14 c0       	rjmp	.+40     	; 0x1878 <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1850:	6d 89       	ldd	r22, Y+21	; 0x15
    1852:	7e 89       	ldd	r23, Y+22	; 0x16
    1854:	8f 89       	ldd	r24, Y+23	; 0x17
    1856:	98 8d       	ldd	r25, Y+24	; 0x18
    1858:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    185c:	dc 01       	movw	r26, r24
    185e:	cb 01       	movw	r24, r22
    1860:	9c 8b       	std	Y+20, r25	; 0x14
    1862:	8b 8b       	std	Y+19, r24	; 0x13
    1864:	8b 89       	ldd	r24, Y+19	; 0x13
    1866:	9c 89       	ldd	r25, Y+20	; 0x14
    1868:	98 8b       	std	Y+16, r25	; 0x10
    186a:	8f 87       	std	Y+15, r24	; 0x0f
    186c:	8f 85       	ldd	r24, Y+15	; 0x0f
    186e:	98 89       	ldd	r25, Y+16	; 0x10
    1870:	01 97       	sbiw	r24, 0x01	; 1
    1872:	f1 f7       	brne	.-4      	; 0x1870 <LCD_sendCommand+0x2e0>
    1874:	98 8b       	std	Y+16, r25	; 0x10
    1876:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1878:	83 e0       	ldi	r24, 0x03	; 3
    187a:	62 e0       	ldi	r22, 0x02	; 2
    187c:	40 e0       	ldi	r20, 0x00	; 0
    187e:	0e 94 fd 06 	call	0xdfa	; 0xdfa <GPIO_writePin>
    1882:	80 e0       	ldi	r24, 0x00	; 0
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	a0 e8       	ldi	r26, 0x80	; 128
    1888:	bf e3       	ldi	r27, 0x3F	; 63
    188a:	8b 87       	std	Y+11, r24	; 0x0b
    188c:	9c 87       	std	Y+12, r25	; 0x0c
    188e:	ad 87       	std	Y+13, r26	; 0x0d
    1890:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1892:	6b 85       	ldd	r22, Y+11	; 0x0b
    1894:	7c 85       	ldd	r23, Y+12	; 0x0c
    1896:	8d 85       	ldd	r24, Y+13	; 0x0d
    1898:	9e 85       	ldd	r25, Y+14	; 0x0e
    189a:	20 e0       	ldi	r18, 0x00	; 0
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	4a e7       	ldi	r20, 0x7A	; 122
    18a0:	53 e4       	ldi	r21, 0x43	; 67
    18a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18a6:	dc 01       	movw	r26, r24
    18a8:	cb 01       	movw	r24, r22
    18aa:	8f 83       	std	Y+7, r24	; 0x07
    18ac:	98 87       	std	Y+8, r25	; 0x08
    18ae:	a9 87       	std	Y+9, r26	; 0x09
    18b0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18b2:	6f 81       	ldd	r22, Y+7	; 0x07
    18b4:	78 85       	ldd	r23, Y+8	; 0x08
    18b6:	89 85       	ldd	r24, Y+9	; 0x09
    18b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    18ba:	20 e0       	ldi	r18, 0x00	; 0
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	40 e8       	ldi	r20, 0x80	; 128
    18c0:	5f e3       	ldi	r21, 0x3F	; 63
    18c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18c6:	88 23       	and	r24, r24
    18c8:	2c f4       	brge	.+10     	; 0x18d4 <LCD_sendCommand+0x344>
		__ticks = 1;
    18ca:	81 e0       	ldi	r24, 0x01	; 1
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	9e 83       	std	Y+6, r25	; 0x06
    18d0:	8d 83       	std	Y+5, r24	; 0x05
    18d2:	3f c0       	rjmp	.+126    	; 0x1952 <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    18d4:	6f 81       	ldd	r22, Y+7	; 0x07
    18d6:	78 85       	ldd	r23, Y+8	; 0x08
    18d8:	89 85       	ldd	r24, Y+9	; 0x09
    18da:	9a 85       	ldd	r25, Y+10	; 0x0a
    18dc:	20 e0       	ldi	r18, 0x00	; 0
    18de:	3f ef       	ldi	r19, 0xFF	; 255
    18e0:	4f e7       	ldi	r20, 0x7F	; 127
    18e2:	57 e4       	ldi	r21, 0x47	; 71
    18e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18e8:	18 16       	cp	r1, r24
    18ea:	4c f5       	brge	.+82     	; 0x193e <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    18ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    18f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    18f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    18f4:	20 e0       	ldi	r18, 0x00	; 0
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	40 e2       	ldi	r20, 0x20	; 32
    18fa:	51 e4       	ldi	r21, 0x41	; 65
    18fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1900:	dc 01       	movw	r26, r24
    1902:	cb 01       	movw	r24, r22
    1904:	bc 01       	movw	r22, r24
    1906:	cd 01       	movw	r24, r26
    1908:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    190c:	dc 01       	movw	r26, r24
    190e:	cb 01       	movw	r24, r22
    1910:	9e 83       	std	Y+6, r25	; 0x06
    1912:	8d 83       	std	Y+5, r24	; 0x05
    1914:	0f c0       	rjmp	.+30     	; 0x1934 <LCD_sendCommand+0x3a4>
    1916:	89 e1       	ldi	r24, 0x19	; 25
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	9c 83       	std	Y+4, r25	; 0x04
    191c:	8b 83       	std	Y+3, r24	; 0x03
    191e:	8b 81       	ldd	r24, Y+3	; 0x03
    1920:	9c 81       	ldd	r25, Y+4	; 0x04
    1922:	01 97       	sbiw	r24, 0x01	; 1
    1924:	f1 f7       	brne	.-4      	; 0x1922 <LCD_sendCommand+0x392>
    1926:	9c 83       	std	Y+4, r25	; 0x04
    1928:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    192a:	8d 81       	ldd	r24, Y+5	; 0x05
    192c:	9e 81       	ldd	r25, Y+6	; 0x06
    192e:	01 97       	sbiw	r24, 0x01	; 1
    1930:	9e 83       	std	Y+6, r25	; 0x06
    1932:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1934:	8d 81       	ldd	r24, Y+5	; 0x05
    1936:	9e 81       	ldd	r25, Y+6	; 0x06
    1938:	00 97       	sbiw	r24, 0x00	; 0
    193a:	69 f7       	brne	.-38     	; 0x1916 <LCD_sendCommand+0x386>
    193c:	14 c0       	rjmp	.+40     	; 0x1966 <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    193e:	6f 81       	ldd	r22, Y+7	; 0x07
    1940:	78 85       	ldd	r23, Y+8	; 0x08
    1942:	89 85       	ldd	r24, Y+9	; 0x09
    1944:	9a 85       	ldd	r25, Y+10	; 0x0a
    1946:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    194a:	dc 01       	movw	r26, r24
    194c:	cb 01       	movw	r24, r22
    194e:	9e 83       	std	Y+6, r25	; 0x06
    1950:	8d 83       	std	Y+5, r24	; 0x05
    1952:	8d 81       	ldd	r24, Y+5	; 0x05
    1954:	9e 81       	ldd	r25, Y+6	; 0x06
    1956:	9a 83       	std	Y+2, r25	; 0x02
    1958:	89 83       	std	Y+1, r24	; 0x01
    195a:	89 81       	ldd	r24, Y+1	; 0x01
    195c:	9a 81       	ldd	r25, Y+2	; 0x02
    195e:	01 97       	sbiw	r24, 0x01	; 1
    1960:	f1 f7       	brne	.-4      	; 0x195e <LCD_sendCommand+0x3ce>
    1962:	9a 83       	std	Y+2, r25	; 0x02
    1964:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    1966:	e9 96       	adiw	r28, 0x39	; 57
    1968:	0f b6       	in	r0, 0x3f	; 63
    196a:	f8 94       	cli
    196c:	de bf       	out	0x3e, r29	; 62
    196e:	0f be       	out	0x3f, r0	; 63
    1970:	cd bf       	out	0x3d, r28	; 61
    1972:	cf 91       	pop	r28
    1974:	df 91       	pop	r29
    1976:	08 95       	ret

00001978 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1978:	df 93       	push	r29
    197a:	cf 93       	push	r28
    197c:	cd b7       	in	r28, 0x3d	; 61
    197e:	de b7       	in	r29, 0x3e	; 62
    1980:	e9 97       	sbiw	r28, 0x39	; 57
    1982:	0f b6       	in	r0, 0x3f	; 63
    1984:	f8 94       	cli
    1986:	de bf       	out	0x3e, r29	; 62
    1988:	0f be       	out	0x3f, r0	; 63
    198a:	cd bf       	out	0x3d, r28	; 61
    198c:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    198e:	83 e0       	ldi	r24, 0x03	; 3
    1990:	60 e0       	ldi	r22, 0x00	; 0
    1992:	41 e0       	ldi	r20, 0x01	; 1
    1994:	0e 94 fd 06 	call	0xdfa	; 0xdfa <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1998:	83 e0       	ldi	r24, 0x03	; 3
    199a:	61 e0       	ldi	r22, 0x01	; 1
    199c:	40 e0       	ldi	r20, 0x00	; 0
    199e:	0e 94 fd 06 	call	0xdfa	; 0xdfa <GPIO_writePin>
    19a2:	80 e0       	ldi	r24, 0x00	; 0
    19a4:	90 e0       	ldi	r25, 0x00	; 0
    19a6:	a0 e8       	ldi	r26, 0x80	; 128
    19a8:	bf e3       	ldi	r27, 0x3F	; 63
    19aa:	8d ab       	std	Y+53, r24	; 0x35
    19ac:	9e ab       	std	Y+54, r25	; 0x36
    19ae:	af ab       	std	Y+55, r26	; 0x37
    19b0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19b2:	6d a9       	ldd	r22, Y+53	; 0x35
    19b4:	7e a9       	ldd	r23, Y+54	; 0x36
    19b6:	8f a9       	ldd	r24, Y+55	; 0x37
    19b8:	98 ad       	ldd	r25, Y+56	; 0x38
    19ba:	20 e0       	ldi	r18, 0x00	; 0
    19bc:	30 e0       	ldi	r19, 0x00	; 0
    19be:	4a e7       	ldi	r20, 0x7A	; 122
    19c0:	53 e4       	ldi	r21, 0x43	; 67
    19c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19c6:	dc 01       	movw	r26, r24
    19c8:	cb 01       	movw	r24, r22
    19ca:	89 ab       	std	Y+49, r24	; 0x31
    19cc:	9a ab       	std	Y+50, r25	; 0x32
    19ce:	ab ab       	std	Y+51, r26	; 0x33
    19d0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    19d2:	69 a9       	ldd	r22, Y+49	; 0x31
    19d4:	7a a9       	ldd	r23, Y+50	; 0x32
    19d6:	8b a9       	ldd	r24, Y+51	; 0x33
    19d8:	9c a9       	ldd	r25, Y+52	; 0x34
    19da:	20 e0       	ldi	r18, 0x00	; 0
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	40 e8       	ldi	r20, 0x80	; 128
    19e0:	5f e3       	ldi	r21, 0x3F	; 63
    19e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19e6:	88 23       	and	r24, r24
    19e8:	2c f4       	brge	.+10     	; 0x19f4 <LCD_displayCharacter+0x7c>
		__ticks = 1;
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	98 ab       	std	Y+48, r25	; 0x30
    19f0:	8f a7       	std	Y+47, r24	; 0x2f
    19f2:	3f c0       	rjmp	.+126    	; 0x1a72 <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    19f4:	69 a9       	ldd	r22, Y+49	; 0x31
    19f6:	7a a9       	ldd	r23, Y+50	; 0x32
    19f8:	8b a9       	ldd	r24, Y+51	; 0x33
    19fa:	9c a9       	ldd	r25, Y+52	; 0x34
    19fc:	20 e0       	ldi	r18, 0x00	; 0
    19fe:	3f ef       	ldi	r19, 0xFF	; 255
    1a00:	4f e7       	ldi	r20, 0x7F	; 127
    1a02:	57 e4       	ldi	r21, 0x47	; 71
    1a04:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a08:	18 16       	cp	r1, r24
    1a0a:	4c f5       	brge	.+82     	; 0x1a5e <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a0c:	6d a9       	ldd	r22, Y+53	; 0x35
    1a0e:	7e a9       	ldd	r23, Y+54	; 0x36
    1a10:	8f a9       	ldd	r24, Y+55	; 0x37
    1a12:	98 ad       	ldd	r25, Y+56	; 0x38
    1a14:	20 e0       	ldi	r18, 0x00	; 0
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	40 e2       	ldi	r20, 0x20	; 32
    1a1a:	51 e4       	ldi	r21, 0x41	; 65
    1a1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a20:	dc 01       	movw	r26, r24
    1a22:	cb 01       	movw	r24, r22
    1a24:	bc 01       	movw	r22, r24
    1a26:	cd 01       	movw	r24, r26
    1a28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a2c:	dc 01       	movw	r26, r24
    1a2e:	cb 01       	movw	r24, r22
    1a30:	98 ab       	std	Y+48, r25	; 0x30
    1a32:	8f a7       	std	Y+47, r24	; 0x2f
    1a34:	0f c0       	rjmp	.+30     	; 0x1a54 <LCD_displayCharacter+0xdc>
    1a36:	89 e1       	ldi	r24, 0x19	; 25
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	9e a7       	std	Y+46, r25	; 0x2e
    1a3c:	8d a7       	std	Y+45, r24	; 0x2d
    1a3e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a40:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a42:	01 97       	sbiw	r24, 0x01	; 1
    1a44:	f1 f7       	brne	.-4      	; 0x1a42 <LCD_displayCharacter+0xca>
    1a46:	9e a7       	std	Y+46, r25	; 0x2e
    1a48:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a4a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a4c:	98 a9       	ldd	r25, Y+48	; 0x30
    1a4e:	01 97       	sbiw	r24, 0x01	; 1
    1a50:	98 ab       	std	Y+48, r25	; 0x30
    1a52:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a54:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a56:	98 a9       	ldd	r25, Y+48	; 0x30
    1a58:	00 97       	sbiw	r24, 0x00	; 0
    1a5a:	69 f7       	brne	.-38     	; 0x1a36 <LCD_displayCharacter+0xbe>
    1a5c:	14 c0       	rjmp	.+40     	; 0x1a86 <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a5e:	69 a9       	ldd	r22, Y+49	; 0x31
    1a60:	7a a9       	ldd	r23, Y+50	; 0x32
    1a62:	8b a9       	ldd	r24, Y+51	; 0x33
    1a64:	9c a9       	ldd	r25, Y+52	; 0x34
    1a66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a6a:	dc 01       	movw	r26, r24
    1a6c:	cb 01       	movw	r24, r22
    1a6e:	98 ab       	std	Y+48, r25	; 0x30
    1a70:	8f a7       	std	Y+47, r24	; 0x2f
    1a72:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a74:	98 a9       	ldd	r25, Y+48	; 0x30
    1a76:	9c a7       	std	Y+44, r25	; 0x2c
    1a78:	8b a7       	std	Y+43, r24	; 0x2b
    1a7a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a7c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a7e:	01 97       	sbiw	r24, 0x01	; 1
    1a80:	f1 f7       	brne	.-4      	; 0x1a7e <LCD_displayCharacter+0x106>
    1a82:	9c a7       	std	Y+44, r25	; 0x2c
    1a84:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1a86:	83 e0       	ldi	r24, 0x03	; 3
    1a88:	62 e0       	ldi	r22, 0x02	; 2
    1a8a:	41 e0       	ldi	r20, 0x01	; 1
    1a8c:	0e 94 fd 06 	call	0xdfa	; 0xdfa <GPIO_writePin>
    1a90:	80 e0       	ldi	r24, 0x00	; 0
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	a0 e8       	ldi	r26, 0x80	; 128
    1a96:	bf e3       	ldi	r27, 0x3F	; 63
    1a98:	8f a3       	std	Y+39, r24	; 0x27
    1a9a:	98 a7       	std	Y+40, r25	; 0x28
    1a9c:	a9 a7       	std	Y+41, r26	; 0x29
    1a9e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1aa0:	6f a1       	ldd	r22, Y+39	; 0x27
    1aa2:	78 a5       	ldd	r23, Y+40	; 0x28
    1aa4:	89 a5       	ldd	r24, Y+41	; 0x29
    1aa6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1aa8:	20 e0       	ldi	r18, 0x00	; 0
    1aaa:	30 e0       	ldi	r19, 0x00	; 0
    1aac:	4a e7       	ldi	r20, 0x7A	; 122
    1aae:	53 e4       	ldi	r21, 0x43	; 67
    1ab0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ab4:	dc 01       	movw	r26, r24
    1ab6:	cb 01       	movw	r24, r22
    1ab8:	8b a3       	std	Y+35, r24	; 0x23
    1aba:	9c a3       	std	Y+36, r25	; 0x24
    1abc:	ad a3       	std	Y+37, r26	; 0x25
    1abe:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1ac0:	6b a1       	ldd	r22, Y+35	; 0x23
    1ac2:	7c a1       	ldd	r23, Y+36	; 0x24
    1ac4:	8d a1       	ldd	r24, Y+37	; 0x25
    1ac6:	9e a1       	ldd	r25, Y+38	; 0x26
    1ac8:	20 e0       	ldi	r18, 0x00	; 0
    1aca:	30 e0       	ldi	r19, 0x00	; 0
    1acc:	40 e8       	ldi	r20, 0x80	; 128
    1ace:	5f e3       	ldi	r21, 0x3F	; 63
    1ad0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ad4:	88 23       	and	r24, r24
    1ad6:	2c f4       	brge	.+10     	; 0x1ae2 <LCD_displayCharacter+0x16a>
		__ticks = 1;
    1ad8:	81 e0       	ldi	r24, 0x01	; 1
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	9a a3       	std	Y+34, r25	; 0x22
    1ade:	89 a3       	std	Y+33, r24	; 0x21
    1ae0:	3f c0       	rjmp	.+126    	; 0x1b60 <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    1ae2:	6b a1       	ldd	r22, Y+35	; 0x23
    1ae4:	7c a1       	ldd	r23, Y+36	; 0x24
    1ae6:	8d a1       	ldd	r24, Y+37	; 0x25
    1ae8:	9e a1       	ldd	r25, Y+38	; 0x26
    1aea:	20 e0       	ldi	r18, 0x00	; 0
    1aec:	3f ef       	ldi	r19, 0xFF	; 255
    1aee:	4f e7       	ldi	r20, 0x7F	; 127
    1af0:	57 e4       	ldi	r21, 0x47	; 71
    1af2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1af6:	18 16       	cp	r1, r24
    1af8:	4c f5       	brge	.+82     	; 0x1b4c <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1afa:	6f a1       	ldd	r22, Y+39	; 0x27
    1afc:	78 a5       	ldd	r23, Y+40	; 0x28
    1afe:	89 a5       	ldd	r24, Y+41	; 0x29
    1b00:	9a a5       	ldd	r25, Y+42	; 0x2a
    1b02:	20 e0       	ldi	r18, 0x00	; 0
    1b04:	30 e0       	ldi	r19, 0x00	; 0
    1b06:	40 e2       	ldi	r20, 0x20	; 32
    1b08:	51 e4       	ldi	r21, 0x41	; 65
    1b0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b0e:	dc 01       	movw	r26, r24
    1b10:	cb 01       	movw	r24, r22
    1b12:	bc 01       	movw	r22, r24
    1b14:	cd 01       	movw	r24, r26
    1b16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b1a:	dc 01       	movw	r26, r24
    1b1c:	cb 01       	movw	r24, r22
    1b1e:	9a a3       	std	Y+34, r25	; 0x22
    1b20:	89 a3       	std	Y+33, r24	; 0x21
    1b22:	0f c0       	rjmp	.+30     	; 0x1b42 <LCD_displayCharacter+0x1ca>
    1b24:	89 e1       	ldi	r24, 0x19	; 25
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	98 a3       	std	Y+32, r25	; 0x20
    1b2a:	8f 8f       	std	Y+31, r24	; 0x1f
    1b2c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b2e:	98 a1       	ldd	r25, Y+32	; 0x20
    1b30:	01 97       	sbiw	r24, 0x01	; 1
    1b32:	f1 f7       	brne	.-4      	; 0x1b30 <LCD_displayCharacter+0x1b8>
    1b34:	98 a3       	std	Y+32, r25	; 0x20
    1b36:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b38:	89 a1       	ldd	r24, Y+33	; 0x21
    1b3a:	9a a1       	ldd	r25, Y+34	; 0x22
    1b3c:	01 97       	sbiw	r24, 0x01	; 1
    1b3e:	9a a3       	std	Y+34, r25	; 0x22
    1b40:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b42:	89 a1       	ldd	r24, Y+33	; 0x21
    1b44:	9a a1       	ldd	r25, Y+34	; 0x22
    1b46:	00 97       	sbiw	r24, 0x00	; 0
    1b48:	69 f7       	brne	.-38     	; 0x1b24 <LCD_displayCharacter+0x1ac>
    1b4a:	14 c0       	rjmp	.+40     	; 0x1b74 <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b4c:	6b a1       	ldd	r22, Y+35	; 0x23
    1b4e:	7c a1       	ldd	r23, Y+36	; 0x24
    1b50:	8d a1       	ldd	r24, Y+37	; 0x25
    1b52:	9e a1       	ldd	r25, Y+38	; 0x26
    1b54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b58:	dc 01       	movw	r26, r24
    1b5a:	cb 01       	movw	r24, r22
    1b5c:	9a a3       	std	Y+34, r25	; 0x22
    1b5e:	89 a3       	std	Y+33, r24	; 0x21
    1b60:	89 a1       	ldd	r24, Y+33	; 0x21
    1b62:	9a a1       	ldd	r25, Y+34	; 0x22
    1b64:	9e 8f       	std	Y+30, r25	; 0x1e
    1b66:	8d 8f       	std	Y+29, r24	; 0x1d
    1b68:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b6a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b6c:	01 97       	sbiw	r24, 0x01	; 1
    1b6e:	f1 f7       	brne	.-4      	; 0x1b6c <LCD_displayCharacter+0x1f4>
    1b70:	9e 8f       	std	Y+30, r25	; 0x1e
    1b72:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    1b74:	82 e0       	ldi	r24, 0x02	; 2
    1b76:	69 ad       	ldd	r22, Y+57	; 0x39
    1b78:	0e 94 c7 08 	call	0x118e	; 0x118e <GPIO_writePort>
    1b7c:	80 e0       	ldi	r24, 0x00	; 0
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	a0 e8       	ldi	r26, 0x80	; 128
    1b82:	bf e3       	ldi	r27, 0x3F	; 63
    1b84:	89 8f       	std	Y+25, r24	; 0x19
    1b86:	9a 8f       	std	Y+26, r25	; 0x1a
    1b88:	ab 8f       	std	Y+27, r26	; 0x1b
    1b8a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b8c:	69 8d       	ldd	r22, Y+25	; 0x19
    1b8e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b90:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b92:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b94:	20 e0       	ldi	r18, 0x00	; 0
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	4a e7       	ldi	r20, 0x7A	; 122
    1b9a:	53 e4       	ldi	r21, 0x43	; 67
    1b9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ba0:	dc 01       	movw	r26, r24
    1ba2:	cb 01       	movw	r24, r22
    1ba4:	8d 8b       	std	Y+21, r24	; 0x15
    1ba6:	9e 8b       	std	Y+22, r25	; 0x16
    1ba8:	af 8b       	std	Y+23, r26	; 0x17
    1baa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1bac:	6d 89       	ldd	r22, Y+21	; 0x15
    1bae:	7e 89       	ldd	r23, Y+22	; 0x16
    1bb0:	8f 89       	ldd	r24, Y+23	; 0x17
    1bb2:	98 8d       	ldd	r25, Y+24	; 0x18
    1bb4:	20 e0       	ldi	r18, 0x00	; 0
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	40 e8       	ldi	r20, 0x80	; 128
    1bba:	5f e3       	ldi	r21, 0x3F	; 63
    1bbc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bc0:	88 23       	and	r24, r24
    1bc2:	2c f4       	brge	.+10     	; 0x1bce <LCD_displayCharacter+0x256>
		__ticks = 1;
    1bc4:	81 e0       	ldi	r24, 0x01	; 1
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	9c 8b       	std	Y+20, r25	; 0x14
    1bca:	8b 8b       	std	Y+19, r24	; 0x13
    1bcc:	3f c0       	rjmp	.+126    	; 0x1c4c <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    1bce:	6d 89       	ldd	r22, Y+21	; 0x15
    1bd0:	7e 89       	ldd	r23, Y+22	; 0x16
    1bd2:	8f 89       	ldd	r24, Y+23	; 0x17
    1bd4:	98 8d       	ldd	r25, Y+24	; 0x18
    1bd6:	20 e0       	ldi	r18, 0x00	; 0
    1bd8:	3f ef       	ldi	r19, 0xFF	; 255
    1bda:	4f e7       	ldi	r20, 0x7F	; 127
    1bdc:	57 e4       	ldi	r21, 0x47	; 71
    1bde:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1be2:	18 16       	cp	r1, r24
    1be4:	4c f5       	brge	.+82     	; 0x1c38 <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1be6:	69 8d       	ldd	r22, Y+25	; 0x19
    1be8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bee:	20 e0       	ldi	r18, 0x00	; 0
    1bf0:	30 e0       	ldi	r19, 0x00	; 0
    1bf2:	40 e2       	ldi	r20, 0x20	; 32
    1bf4:	51 e4       	ldi	r21, 0x41	; 65
    1bf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bfa:	dc 01       	movw	r26, r24
    1bfc:	cb 01       	movw	r24, r22
    1bfe:	bc 01       	movw	r22, r24
    1c00:	cd 01       	movw	r24, r26
    1c02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c06:	dc 01       	movw	r26, r24
    1c08:	cb 01       	movw	r24, r22
    1c0a:	9c 8b       	std	Y+20, r25	; 0x14
    1c0c:	8b 8b       	std	Y+19, r24	; 0x13
    1c0e:	0f c0       	rjmp	.+30     	; 0x1c2e <LCD_displayCharacter+0x2b6>
    1c10:	89 e1       	ldi	r24, 0x19	; 25
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	9a 8b       	std	Y+18, r25	; 0x12
    1c16:	89 8b       	std	Y+17, r24	; 0x11
    1c18:	89 89       	ldd	r24, Y+17	; 0x11
    1c1a:	9a 89       	ldd	r25, Y+18	; 0x12
    1c1c:	01 97       	sbiw	r24, 0x01	; 1
    1c1e:	f1 f7       	brne	.-4      	; 0x1c1c <LCD_displayCharacter+0x2a4>
    1c20:	9a 8b       	std	Y+18, r25	; 0x12
    1c22:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c24:	8b 89       	ldd	r24, Y+19	; 0x13
    1c26:	9c 89       	ldd	r25, Y+20	; 0x14
    1c28:	01 97       	sbiw	r24, 0x01	; 1
    1c2a:	9c 8b       	std	Y+20, r25	; 0x14
    1c2c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c2e:	8b 89       	ldd	r24, Y+19	; 0x13
    1c30:	9c 89       	ldd	r25, Y+20	; 0x14
    1c32:	00 97       	sbiw	r24, 0x00	; 0
    1c34:	69 f7       	brne	.-38     	; 0x1c10 <LCD_displayCharacter+0x298>
    1c36:	14 c0       	rjmp	.+40     	; 0x1c60 <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c38:	6d 89       	ldd	r22, Y+21	; 0x15
    1c3a:	7e 89       	ldd	r23, Y+22	; 0x16
    1c3c:	8f 89       	ldd	r24, Y+23	; 0x17
    1c3e:	98 8d       	ldd	r25, Y+24	; 0x18
    1c40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c44:	dc 01       	movw	r26, r24
    1c46:	cb 01       	movw	r24, r22
    1c48:	9c 8b       	std	Y+20, r25	; 0x14
    1c4a:	8b 8b       	std	Y+19, r24	; 0x13
    1c4c:	8b 89       	ldd	r24, Y+19	; 0x13
    1c4e:	9c 89       	ldd	r25, Y+20	; 0x14
    1c50:	98 8b       	std	Y+16, r25	; 0x10
    1c52:	8f 87       	std	Y+15, r24	; 0x0f
    1c54:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c56:	98 89       	ldd	r25, Y+16	; 0x10
    1c58:	01 97       	sbiw	r24, 0x01	; 1
    1c5a:	f1 f7       	brne	.-4      	; 0x1c58 <LCD_displayCharacter+0x2e0>
    1c5c:	98 8b       	std	Y+16, r25	; 0x10
    1c5e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1c60:	83 e0       	ldi	r24, 0x03	; 3
    1c62:	62 e0       	ldi	r22, 0x02	; 2
    1c64:	40 e0       	ldi	r20, 0x00	; 0
    1c66:	0e 94 fd 06 	call	0xdfa	; 0xdfa <GPIO_writePin>
    1c6a:	80 e0       	ldi	r24, 0x00	; 0
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	a0 e8       	ldi	r26, 0x80	; 128
    1c70:	bf e3       	ldi	r27, 0x3F	; 63
    1c72:	8b 87       	std	Y+11, r24	; 0x0b
    1c74:	9c 87       	std	Y+12, r25	; 0x0c
    1c76:	ad 87       	std	Y+13, r26	; 0x0d
    1c78:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c80:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c82:	20 e0       	ldi	r18, 0x00	; 0
    1c84:	30 e0       	ldi	r19, 0x00	; 0
    1c86:	4a e7       	ldi	r20, 0x7A	; 122
    1c88:	53 e4       	ldi	r21, 0x43	; 67
    1c8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c8e:	dc 01       	movw	r26, r24
    1c90:	cb 01       	movw	r24, r22
    1c92:	8f 83       	std	Y+7, r24	; 0x07
    1c94:	98 87       	std	Y+8, r25	; 0x08
    1c96:	a9 87       	std	Y+9, r26	; 0x09
    1c98:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c9a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c9c:	78 85       	ldd	r23, Y+8	; 0x08
    1c9e:	89 85       	ldd	r24, Y+9	; 0x09
    1ca0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ca2:	20 e0       	ldi	r18, 0x00	; 0
    1ca4:	30 e0       	ldi	r19, 0x00	; 0
    1ca6:	40 e8       	ldi	r20, 0x80	; 128
    1ca8:	5f e3       	ldi	r21, 0x3F	; 63
    1caa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cae:	88 23       	and	r24, r24
    1cb0:	2c f4       	brge	.+10     	; 0x1cbc <LCD_displayCharacter+0x344>
		__ticks = 1;
    1cb2:	81 e0       	ldi	r24, 0x01	; 1
    1cb4:	90 e0       	ldi	r25, 0x00	; 0
    1cb6:	9e 83       	std	Y+6, r25	; 0x06
    1cb8:	8d 83       	std	Y+5, r24	; 0x05
    1cba:	3f c0       	rjmp	.+126    	; 0x1d3a <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    1cbc:	6f 81       	ldd	r22, Y+7	; 0x07
    1cbe:	78 85       	ldd	r23, Y+8	; 0x08
    1cc0:	89 85       	ldd	r24, Y+9	; 0x09
    1cc2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cc4:	20 e0       	ldi	r18, 0x00	; 0
    1cc6:	3f ef       	ldi	r19, 0xFF	; 255
    1cc8:	4f e7       	ldi	r20, 0x7F	; 127
    1cca:	57 e4       	ldi	r21, 0x47	; 71
    1ccc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cd0:	18 16       	cp	r1, r24
    1cd2:	4c f5       	brge	.+82     	; 0x1d26 <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cd4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cd6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cd8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cda:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cdc:	20 e0       	ldi	r18, 0x00	; 0
    1cde:	30 e0       	ldi	r19, 0x00	; 0
    1ce0:	40 e2       	ldi	r20, 0x20	; 32
    1ce2:	51 e4       	ldi	r21, 0x41	; 65
    1ce4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ce8:	dc 01       	movw	r26, r24
    1cea:	cb 01       	movw	r24, r22
    1cec:	bc 01       	movw	r22, r24
    1cee:	cd 01       	movw	r24, r26
    1cf0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cf4:	dc 01       	movw	r26, r24
    1cf6:	cb 01       	movw	r24, r22
    1cf8:	9e 83       	std	Y+6, r25	; 0x06
    1cfa:	8d 83       	std	Y+5, r24	; 0x05
    1cfc:	0f c0       	rjmp	.+30     	; 0x1d1c <LCD_displayCharacter+0x3a4>
    1cfe:	89 e1       	ldi	r24, 0x19	; 25
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	9c 83       	std	Y+4, r25	; 0x04
    1d04:	8b 83       	std	Y+3, r24	; 0x03
    1d06:	8b 81       	ldd	r24, Y+3	; 0x03
    1d08:	9c 81       	ldd	r25, Y+4	; 0x04
    1d0a:	01 97       	sbiw	r24, 0x01	; 1
    1d0c:	f1 f7       	brne	.-4      	; 0x1d0a <LCD_displayCharacter+0x392>
    1d0e:	9c 83       	std	Y+4, r25	; 0x04
    1d10:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d12:	8d 81       	ldd	r24, Y+5	; 0x05
    1d14:	9e 81       	ldd	r25, Y+6	; 0x06
    1d16:	01 97       	sbiw	r24, 0x01	; 1
    1d18:	9e 83       	std	Y+6, r25	; 0x06
    1d1a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d1c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d1e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d20:	00 97       	sbiw	r24, 0x00	; 0
    1d22:	69 f7       	brne	.-38     	; 0x1cfe <LCD_displayCharacter+0x386>
    1d24:	14 c0       	rjmp	.+40     	; 0x1d4e <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d26:	6f 81       	ldd	r22, Y+7	; 0x07
    1d28:	78 85       	ldd	r23, Y+8	; 0x08
    1d2a:	89 85       	ldd	r24, Y+9	; 0x09
    1d2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d32:	dc 01       	movw	r26, r24
    1d34:	cb 01       	movw	r24, r22
    1d36:	9e 83       	std	Y+6, r25	; 0x06
    1d38:	8d 83       	std	Y+5, r24	; 0x05
    1d3a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d3c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d3e:	9a 83       	std	Y+2, r25	; 0x02
    1d40:	89 83       	std	Y+1, r24	; 0x01
    1d42:	89 81       	ldd	r24, Y+1	; 0x01
    1d44:	9a 81       	ldd	r25, Y+2	; 0x02
    1d46:	01 97       	sbiw	r24, 0x01	; 1
    1d48:	f1 f7       	brne	.-4      	; 0x1d46 <LCD_displayCharacter+0x3ce>
    1d4a:	9a 83       	std	Y+2, r25	; 0x02
    1d4c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    1d4e:	e9 96       	adiw	r28, 0x39	; 57
    1d50:	0f b6       	in	r0, 0x3f	; 63
    1d52:	f8 94       	cli
    1d54:	de bf       	out	0x3e, r29	; 62
    1d56:	0f be       	out	0x3f, r0	; 63
    1d58:	cd bf       	out	0x3d, r28	; 61
    1d5a:	cf 91       	pop	r28
    1d5c:	df 91       	pop	r29
    1d5e:	08 95       	ret

00001d60 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    1d60:	df 93       	push	r29
    1d62:	cf 93       	push	r28
    1d64:	00 d0       	rcall	.+0      	; 0x1d66 <LCD_displayString+0x6>
    1d66:	0f 92       	push	r0
    1d68:	cd b7       	in	r28, 0x3d	; 61
    1d6a:	de b7       	in	r29, 0x3e	; 62
    1d6c:	9b 83       	std	Y+3, r25	; 0x03
    1d6e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1d70:	19 82       	std	Y+1, r1	; 0x01
    1d72:	0e c0       	rjmp	.+28     	; 0x1d90 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1d74:	89 81       	ldd	r24, Y+1	; 0x01
    1d76:	28 2f       	mov	r18, r24
    1d78:	30 e0       	ldi	r19, 0x00	; 0
    1d7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7c:	9b 81       	ldd	r25, Y+3	; 0x03
    1d7e:	fc 01       	movw	r30, r24
    1d80:	e2 0f       	add	r30, r18
    1d82:	f3 1f       	adc	r31, r19
    1d84:	80 81       	ld	r24, Z
    1d86:	0e 94 bc 0c 	call	0x1978	; 0x1978 <LCD_displayCharacter>
		i++;
    1d8a:	89 81       	ldd	r24, Y+1	; 0x01
    1d8c:	8f 5f       	subi	r24, 0xFF	; 255
    1d8e:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1d90:	89 81       	ldd	r24, Y+1	; 0x01
    1d92:	28 2f       	mov	r18, r24
    1d94:	30 e0       	ldi	r19, 0x00	; 0
    1d96:	8a 81       	ldd	r24, Y+2	; 0x02
    1d98:	9b 81       	ldd	r25, Y+3	; 0x03
    1d9a:	fc 01       	movw	r30, r24
    1d9c:	e2 0f       	add	r30, r18
    1d9e:	f3 1f       	adc	r31, r19
    1da0:	80 81       	ld	r24, Z
    1da2:	88 23       	and	r24, r24
    1da4:	39 f7       	brne	.-50     	; 0x1d74 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    1da6:	0f 90       	pop	r0
    1da8:	0f 90       	pop	r0
    1daa:	0f 90       	pop	r0
    1dac:	cf 91       	pop	r28
    1dae:	df 91       	pop	r29
    1db0:	08 95       	ret

00001db2 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    1db2:	df 93       	push	r29
    1db4:	cf 93       	push	r28
    1db6:	00 d0       	rcall	.+0      	; 0x1db8 <LCD_moveCursor+0x6>
    1db8:	00 d0       	rcall	.+0      	; 0x1dba <LCD_moveCursor+0x8>
    1dba:	0f 92       	push	r0
    1dbc:	cd b7       	in	r28, 0x3d	; 61
    1dbe:	de b7       	in	r29, 0x3e	; 62
    1dc0:	8a 83       	std	Y+2, r24	; 0x02
    1dc2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    1dc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc6:	28 2f       	mov	r18, r24
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	3d 83       	std	Y+5, r19	; 0x05
    1dcc:	2c 83       	std	Y+4, r18	; 0x04
    1dce:	8c 81       	ldd	r24, Y+4	; 0x04
    1dd0:	9d 81       	ldd	r25, Y+5	; 0x05
    1dd2:	81 30       	cpi	r24, 0x01	; 1
    1dd4:	91 05       	cpc	r25, r1
    1dd6:	c1 f0       	breq	.+48     	; 0x1e08 <LCD_moveCursor+0x56>
    1dd8:	2c 81       	ldd	r18, Y+4	; 0x04
    1dda:	3d 81       	ldd	r19, Y+5	; 0x05
    1ddc:	22 30       	cpi	r18, 0x02	; 2
    1dde:	31 05       	cpc	r19, r1
    1de0:	2c f4       	brge	.+10     	; 0x1dec <LCD_moveCursor+0x3a>
    1de2:	8c 81       	ldd	r24, Y+4	; 0x04
    1de4:	9d 81       	ldd	r25, Y+5	; 0x05
    1de6:	00 97       	sbiw	r24, 0x00	; 0
    1de8:	61 f0       	breq	.+24     	; 0x1e02 <LCD_moveCursor+0x50>
    1dea:	19 c0       	rjmp	.+50     	; 0x1e1e <LCD_moveCursor+0x6c>
    1dec:	2c 81       	ldd	r18, Y+4	; 0x04
    1dee:	3d 81       	ldd	r19, Y+5	; 0x05
    1df0:	22 30       	cpi	r18, 0x02	; 2
    1df2:	31 05       	cpc	r19, r1
    1df4:	69 f0       	breq	.+26     	; 0x1e10 <LCD_moveCursor+0x5e>
    1df6:	8c 81       	ldd	r24, Y+4	; 0x04
    1df8:	9d 81       	ldd	r25, Y+5	; 0x05
    1dfa:	83 30       	cpi	r24, 0x03	; 3
    1dfc:	91 05       	cpc	r25, r1
    1dfe:	61 f0       	breq	.+24     	; 0x1e18 <LCD_moveCursor+0x66>
    1e00:	0e c0       	rjmp	.+28     	; 0x1e1e <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    1e02:	8b 81       	ldd	r24, Y+3	; 0x03
    1e04:	89 83       	std	Y+1, r24	; 0x01
    1e06:	0b c0       	rjmp	.+22     	; 0x1e1e <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    1e08:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0a:	80 5c       	subi	r24, 0xC0	; 192
    1e0c:	89 83       	std	Y+1, r24	; 0x01
    1e0e:	07 c0       	rjmp	.+14     	; 0x1e1e <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    1e10:	8b 81       	ldd	r24, Y+3	; 0x03
    1e12:	80 5f       	subi	r24, 0xF0	; 240
    1e14:	89 83       	std	Y+1, r24	; 0x01
    1e16:	03 c0       	rjmp	.+6      	; 0x1e1e <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    1e18:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1a:	80 5b       	subi	r24, 0xB0	; 176
    1e1c:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    1e1e:	89 81       	ldd	r24, Y+1	; 0x01
    1e20:	80 68       	ori	r24, 0x80	; 128
    1e22:	0e 94 c8 0a 	call	0x1590	; 0x1590 <LCD_sendCommand>
}
    1e26:	0f 90       	pop	r0
    1e28:	0f 90       	pop	r0
    1e2a:	0f 90       	pop	r0
    1e2c:	0f 90       	pop	r0
    1e2e:	0f 90       	pop	r0
    1e30:	cf 91       	pop	r28
    1e32:	df 91       	pop	r29
    1e34:	08 95       	ret

00001e36 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    1e36:	df 93       	push	r29
    1e38:	cf 93       	push	r28
    1e3a:	00 d0       	rcall	.+0      	; 0x1e3c <LCD_displayStringRowColumn+0x6>
    1e3c:	00 d0       	rcall	.+0      	; 0x1e3e <LCD_displayStringRowColumn+0x8>
    1e3e:	cd b7       	in	r28, 0x3d	; 61
    1e40:	de b7       	in	r29, 0x3e	; 62
    1e42:	89 83       	std	Y+1, r24	; 0x01
    1e44:	6a 83       	std	Y+2, r22	; 0x02
    1e46:	5c 83       	std	Y+4, r21	; 0x04
    1e48:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    1e4a:	89 81       	ldd	r24, Y+1	; 0x01
    1e4c:	6a 81       	ldd	r22, Y+2	; 0x02
    1e4e:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    1e52:	8b 81       	ldd	r24, Y+3	; 0x03
    1e54:	9c 81       	ldd	r25, Y+4	; 0x04
    1e56:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <LCD_displayString>
}
    1e5a:	0f 90       	pop	r0
    1e5c:	0f 90       	pop	r0
    1e5e:	0f 90       	pop	r0
    1e60:	0f 90       	pop	r0
    1e62:	cf 91       	pop	r28
    1e64:	df 91       	pop	r29
    1e66:	08 95       	ret

00001e68 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    1e68:	df 93       	push	r29
    1e6a:	cf 93       	push	r28
    1e6c:	cd b7       	in	r28, 0x3d	; 61
    1e6e:	de b7       	in	r29, 0x3e	; 62
    1e70:	62 97       	sbiw	r28, 0x12	; 18
    1e72:	0f b6       	in	r0, 0x3f	; 63
    1e74:	f8 94       	cli
    1e76:	de bf       	out	0x3e, r29	; 62
    1e78:	0f be       	out	0x3f, r0	; 63
    1e7a:	cd bf       	out	0x3d, r28	; 61
    1e7c:	9a 8b       	std	Y+18, r25	; 0x12
    1e7e:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    1e80:	89 89       	ldd	r24, Y+17	; 0x11
    1e82:	9a 89       	ldd	r25, Y+18	; 0x12
    1e84:	9e 01       	movw	r18, r28
    1e86:	2f 5f       	subi	r18, 0xFF	; 255
    1e88:	3f 4f       	sbci	r19, 0xFF	; 255
    1e8a:	b9 01       	movw	r22, r18
    1e8c:	4a e0       	ldi	r20, 0x0A	; 10
    1e8e:	50 e0       	ldi	r21, 0x00	; 0
    1e90:	0e 94 b4 11 	call	0x2368	; 0x2368 <itoa>
   LCD_displayString(buff); /* Display the string */
    1e94:	ce 01       	movw	r24, r28
    1e96:	01 96       	adiw	r24, 0x01	; 1
    1e98:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <LCD_displayString>
}
    1e9c:	62 96       	adiw	r28, 0x12	; 18
    1e9e:	0f b6       	in	r0, 0x3f	; 63
    1ea0:	f8 94       	cli
    1ea2:	de bf       	out	0x3e, r29	; 62
    1ea4:	0f be       	out	0x3f, r0	; 63
    1ea6:	cd bf       	out	0x3d, r28	; 61
    1ea8:	cf 91       	pop	r28
    1eaa:	df 91       	pop	r29
    1eac:	08 95       	ret

00001eae <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    1eae:	df 93       	push	r29
    1eb0:	cf 93       	push	r28
    1eb2:	cd b7       	in	r28, 0x3d	; 61
    1eb4:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    1eb6:	81 e0       	ldi	r24, 0x01	; 1
    1eb8:	0e 94 c8 0a 	call	0x1590	; 0x1590 <LCD_sendCommand>
}
    1ebc:	cf 91       	pop	r28
    1ebe:	df 91       	pop	r29
    1ec0:	08 95       	ret

00001ec2 <main>:
#include "TC72.h"
#include "TimerCompareMode.h"
#include "util/delay.h"

int main(void)
{
    1ec2:	df 93       	push	r29
    1ec4:	cf 93       	push	r28
    1ec6:	cd b7       	in	r28, 0x3d	; 61
    1ec8:	de b7       	in	r29, 0x3e	; 62
    1eca:	2e 97       	sbiw	r28, 0x0e	; 14
    1ecc:	0f b6       	in	r0, 0x3f	; 63
    1ece:	f8 94       	cli
    1ed0:	de bf       	out	0x3e, r29	; 62
    1ed2:	0f be       	out	0x3f, r0	; 63
    1ed4:	cd bf       	out	0x3d, r28	; 61
	SPI_initMaster();
    1ed6:	0e 94 83 10 	call	0x2106	; 0x2106 <SPI_initMaster>
	TC72_Init(CONTINUOUS_MODE);
    1eda:	84 e0       	ldi	r24, 0x04	; 4
    1edc:	0e 94 b4 05 	call	0xb68	; 0xb68 <TC72_Init>
	LCD_init();
    1ee0:	0e 94 a5 0a 	call	0x154a	; 0x154a <LCD_init>
	SetPollingTime(500);
    1ee4:	84 ef       	ldi	r24, 0xF4	; 244
    1ee6:	91 e0       	ldi	r25, 0x01	; 1
    1ee8:	0e 94 39 10 	call	0x2072	; 0x2072 <SetPollingTime>
	Timer2_Init_CTC_Mode(250);
    1eec:	8a ef       	ldi	r24, 0xFA	; 250
    1eee:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <Timer2_Init_CTC_Mode>
	while(1)
	{
		Poll();
    1ef2:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <Poll>
    1ef6:	80 e0       	ldi	r24, 0x00	; 0
    1ef8:	90 e0       	ldi	r25, 0x00	; 0
    1efa:	aa ef       	ldi	r26, 0xFA	; 250
    1efc:	b3 e4       	ldi	r27, 0x43	; 67
    1efe:	8b 87       	std	Y+11, r24	; 0x0b
    1f00:	9c 87       	std	Y+12, r25	; 0x0c
    1f02:	ad 87       	std	Y+13, r26	; 0x0d
    1f04:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f06:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f08:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f0a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f0c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f0e:	20 e0       	ldi	r18, 0x00	; 0
    1f10:	30 e0       	ldi	r19, 0x00	; 0
    1f12:	4a e7       	ldi	r20, 0x7A	; 122
    1f14:	53 e4       	ldi	r21, 0x43	; 67
    1f16:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f1a:	dc 01       	movw	r26, r24
    1f1c:	cb 01       	movw	r24, r22
    1f1e:	8f 83       	std	Y+7, r24	; 0x07
    1f20:	98 87       	std	Y+8, r25	; 0x08
    1f22:	a9 87       	std	Y+9, r26	; 0x09
    1f24:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f26:	6f 81       	ldd	r22, Y+7	; 0x07
    1f28:	78 85       	ldd	r23, Y+8	; 0x08
    1f2a:	89 85       	ldd	r24, Y+9	; 0x09
    1f2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f2e:	20 e0       	ldi	r18, 0x00	; 0
    1f30:	30 e0       	ldi	r19, 0x00	; 0
    1f32:	40 e8       	ldi	r20, 0x80	; 128
    1f34:	5f e3       	ldi	r21, 0x3F	; 63
    1f36:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f3a:	88 23       	and	r24, r24
    1f3c:	2c f4       	brge	.+10     	; 0x1f48 <main+0x86>
		__ticks = 1;
    1f3e:	81 e0       	ldi	r24, 0x01	; 1
    1f40:	90 e0       	ldi	r25, 0x00	; 0
    1f42:	9e 83       	std	Y+6, r25	; 0x06
    1f44:	8d 83       	std	Y+5, r24	; 0x05
    1f46:	3f c0       	rjmp	.+126    	; 0x1fc6 <main+0x104>
	else if (__tmp > 65535)
    1f48:	6f 81       	ldd	r22, Y+7	; 0x07
    1f4a:	78 85       	ldd	r23, Y+8	; 0x08
    1f4c:	89 85       	ldd	r24, Y+9	; 0x09
    1f4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f50:	20 e0       	ldi	r18, 0x00	; 0
    1f52:	3f ef       	ldi	r19, 0xFF	; 255
    1f54:	4f e7       	ldi	r20, 0x7F	; 127
    1f56:	57 e4       	ldi	r21, 0x47	; 71
    1f58:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f5c:	18 16       	cp	r1, r24
    1f5e:	4c f5       	brge	.+82     	; 0x1fb2 <main+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f60:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f62:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f64:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f66:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f68:	20 e0       	ldi	r18, 0x00	; 0
    1f6a:	30 e0       	ldi	r19, 0x00	; 0
    1f6c:	40 e2       	ldi	r20, 0x20	; 32
    1f6e:	51 e4       	ldi	r21, 0x41	; 65
    1f70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f74:	dc 01       	movw	r26, r24
    1f76:	cb 01       	movw	r24, r22
    1f78:	bc 01       	movw	r22, r24
    1f7a:	cd 01       	movw	r24, r26
    1f7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f80:	dc 01       	movw	r26, r24
    1f82:	cb 01       	movw	r24, r22
    1f84:	9e 83       	std	Y+6, r25	; 0x06
    1f86:	8d 83       	std	Y+5, r24	; 0x05
    1f88:	0f c0       	rjmp	.+30     	; 0x1fa8 <main+0xe6>
    1f8a:	89 e1       	ldi	r24, 0x19	; 25
    1f8c:	90 e0       	ldi	r25, 0x00	; 0
    1f8e:	9c 83       	std	Y+4, r25	; 0x04
    1f90:	8b 83       	std	Y+3, r24	; 0x03
    1f92:	8b 81       	ldd	r24, Y+3	; 0x03
    1f94:	9c 81       	ldd	r25, Y+4	; 0x04
    1f96:	01 97       	sbiw	r24, 0x01	; 1
    1f98:	f1 f7       	brne	.-4      	; 0x1f96 <main+0xd4>
    1f9a:	9c 83       	std	Y+4, r25	; 0x04
    1f9c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1fa0:	9e 81       	ldd	r25, Y+6	; 0x06
    1fa2:	01 97       	sbiw	r24, 0x01	; 1
    1fa4:	9e 83       	std	Y+6, r25	; 0x06
    1fa6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fa8:	8d 81       	ldd	r24, Y+5	; 0x05
    1faa:	9e 81       	ldd	r25, Y+6	; 0x06
    1fac:	00 97       	sbiw	r24, 0x00	; 0
    1fae:	69 f7       	brne	.-38     	; 0x1f8a <main+0xc8>
    1fb0:	a0 cf       	rjmp	.-192    	; 0x1ef2 <main+0x30>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fb2:	6f 81       	ldd	r22, Y+7	; 0x07
    1fb4:	78 85       	ldd	r23, Y+8	; 0x08
    1fb6:	89 85       	ldd	r24, Y+9	; 0x09
    1fb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fbe:	dc 01       	movw	r26, r24
    1fc0:	cb 01       	movw	r24, r22
    1fc2:	9e 83       	std	Y+6, r25	; 0x06
    1fc4:	8d 83       	std	Y+5, r24	; 0x05
    1fc6:	8d 81       	ldd	r24, Y+5	; 0x05
    1fc8:	9e 81       	ldd	r25, Y+6	; 0x06
    1fca:	9a 83       	std	Y+2, r25	; 0x02
    1fcc:	89 83       	std	Y+1, r24	; 0x01
    1fce:	89 81       	ldd	r24, Y+1	; 0x01
    1fd0:	9a 81       	ldd	r25, Y+2	; 0x02
    1fd2:	01 97       	sbiw	r24, 0x01	; 1
    1fd4:	f1 f7       	brne	.-4      	; 0x1fd2 <main+0x110>
    1fd6:	9a 83       	std	Y+2, r25	; 0x02
    1fd8:	89 83       	std	Y+1, r24	; 0x01
    1fda:	8b cf       	rjmp	.-234    	; 0x1ef2 <main+0x30>

00001fdc <Poll>:
int polling_enabled= 1;
int polling_counter= 1;
int counter = 0 ;

void Poll(void)
{
    1fdc:	df 93       	push	r29
    1fde:	cf 93       	push	r28
    1fe0:	0f 92       	push	r0
    1fe2:	cd b7       	in	r28, 0x3d	; 61
    1fe4:	de b7       	in	r29, 0x3e	; 62
	if(polling_enabled && (!counter))
    1fe6:	80 91 68 00 	lds	r24, 0x0068
    1fea:	90 91 69 00 	lds	r25, 0x0069
    1fee:	00 97       	sbiw	r24, 0x00	; 0
    1ff0:	61 f0       	breq	.+24     	; 0x200a <Poll+0x2e>
    1ff2:	80 91 94 00 	lds	r24, 0x0094
    1ff6:	90 91 95 00 	lds	r25, 0x0095
    1ffa:	00 97       	sbiw	r24, 0x00	; 0
    1ffc:	31 f4       	brne	.+12     	; 0x200a <Poll+0x2e>
	{
		unsigned char data;
		data = Get_Data();
    1ffe:	0e 94 05 06 	call	0xc0a	; 0xc0a <Get_Data>
    2002:	89 83       	std	Y+1, r24	; 0x01
		Handle_data(data);
    2004:	89 81       	ldd	r24, Y+1	; 0x01
    2006:	0e 94 a3 05 	call	0xb46	; 0xb46 <Handle_data>

	}
	counter++;
    200a:	80 91 94 00 	lds	r24, 0x0094
    200e:	90 91 95 00 	lds	r25, 0x0095
    2012:	01 96       	adiw	r24, 0x01	; 1
    2014:	90 93 95 00 	sts	0x0095, r25
    2018:	80 93 94 00 	sts	0x0094, r24
	counter = counter%polling_counter;
    201c:	80 91 94 00 	lds	r24, 0x0094
    2020:	90 91 95 00 	lds	r25, 0x0095
    2024:	20 91 6a 00 	lds	r18, 0x006A
    2028:	30 91 6b 00 	lds	r19, 0x006B
    202c:	b9 01       	movw	r22, r18
    202e:	0e 94 56 11 	call	0x22ac	; 0x22ac <__divmodhi4>
    2032:	90 93 95 00 	sts	0x0095, r25
    2036:	80 93 94 00 	sts	0x0094, r24
}
    203a:	0f 90       	pop	r0
    203c:	cf 91       	pop	r28
    203e:	df 91       	pop	r29
    2040:	08 95       	ret

00002042 <StartPolling>:

void StartPolling(void)
{
    2042:	df 93       	push	r29
    2044:	cf 93       	push	r28
    2046:	cd b7       	in	r28, 0x3d	; 61
    2048:	de b7       	in	r29, 0x3e	; 62
	polling_enabled=1;
    204a:	81 e0       	ldi	r24, 0x01	; 1
    204c:	90 e0       	ldi	r25, 0x00	; 0
    204e:	90 93 69 00 	sts	0x0069, r25
    2052:	80 93 68 00 	sts	0x0068, r24
}
    2056:	cf 91       	pop	r28
    2058:	df 91       	pop	r29
    205a:	08 95       	ret

0000205c <StopPolling>:

void StopPolling(void)
{
    205c:	df 93       	push	r29
    205e:	cf 93       	push	r28
    2060:	cd b7       	in	r28, 0x3d	; 61
    2062:	de b7       	in	r29, 0x3e	; 62
	polling_enabled=0;
    2064:	10 92 69 00 	sts	0x0069, r1
    2068:	10 92 68 00 	sts	0x0068, r1
}
    206c:	cf 91       	pop	r28
    206e:	df 91       	pop	r29
    2070:	08 95       	ret

00002072 <SetPollingTime>:

void SetPollingTime(int polling_time)
{
    2072:	df 93       	push	r29
    2074:	cf 93       	push	r28
    2076:	00 d0       	rcall	.+0      	; 0x2078 <SetPollingTime+0x6>
    2078:	cd b7       	in	r28, 0x3d	; 61
    207a:	de b7       	in	r29, 0x3e	; 62
    207c:	9a 83       	std	Y+2, r25	; 0x02
    207e:	89 83       	std	Y+1, r24	; 0x01
	polling_counter = polling_time/250;
    2080:	89 81       	ldd	r24, Y+1	; 0x01
    2082:	9a 81       	ldd	r25, Y+2	; 0x02
    2084:	2a ef       	ldi	r18, 0xFA	; 250
    2086:	30 e0       	ldi	r19, 0x00	; 0
    2088:	b9 01       	movw	r22, r18
    208a:	0e 94 56 11 	call	0x22ac	; 0x22ac <__divmodhi4>
    208e:	cb 01       	movw	r24, r22
    2090:	90 93 6b 00 	sts	0x006B, r25
    2094:	80 93 6a 00 	sts	0x006A, r24
}
    2098:	0f 90       	pop	r0
    209a:	0f 90       	pop	r0
    209c:	cf 91       	pop	r28
    209e:	df 91       	pop	r29
    20a0:	08 95       	ret

000020a2 <PWM_Timer0_Start>:
#include "gpio.h"
#include "common_macros.h"
#include <avr/io.h>

void PWM_Timer0_Start(uint8_t duty_cycle)
{
    20a2:	df 93       	push	r29
    20a4:	cf 93       	push	r28
    20a6:	0f 92       	push	r0
    20a8:	cd b7       	in	r28, 0x3d	; 61
    20aa:	de b7       	in	r29, 0x3e	; 62
    20ac:	89 83       	std	Y+1, r24	; 0x01
	/*	The function responsible for trigger the Timer0 with the PWM Mode. */

	TCNT0 = 0; //Set Timer Initial value
    20ae:	e2 e5       	ldi	r30, 0x52	; 82
    20b0:	f0 e0       	ldi	r31, 0x00	; 0
    20b2:	10 82       	st	Z, r1
	OCR0 = duty_cycle; // Set Compare Value
    20b4:	ec e5       	ldi	r30, 0x5C	; 92
    20b6:	f0 e0       	ldi	r31, 0x00	; 0
    20b8:	89 81       	ldd	r24, Y+1	; 0x01
    20ba:	80 83       	st	Z, r24
	GPIO_setupPinDirection(PWM_PORT_ID, PWM_PIN_ID, PIN_OUTPUT); //Setup the PWM pin as Output pin
    20bc:	81 e0       	ldi	r24, 0x01	; 1
    20be:	63 e0       	ldi	r22, 0x03	; 3
    20c0:	41 e0       	ldi	r20, 0x01	; 1
    20c2:	0e 94 12 06 	call	0xc24	; 0xc24 <GPIO_setupPinDirection>
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 = (500Hz) .. CS00=0 CS01=1 CS02=0
	 */
	SET_BIT(TCCR0,WGM00);
    20c6:	a3 e5       	ldi	r26, 0x53	; 83
    20c8:	b0 e0       	ldi	r27, 0x00	; 0
    20ca:	e3 e5       	ldi	r30, 0x53	; 83
    20cc:	f0 e0       	ldi	r31, 0x00	; 0
    20ce:	80 81       	ld	r24, Z
    20d0:	80 64       	ori	r24, 0x40	; 64
    20d2:	8c 93       	st	X, r24
	SET_BIT(TCCR0,WGM01);
    20d4:	a3 e5       	ldi	r26, 0x53	; 83
    20d6:	b0 e0       	ldi	r27, 0x00	; 0
    20d8:	e3 e5       	ldi	r30, 0x53	; 83
    20da:	f0 e0       	ldi	r31, 0x00	; 0
    20dc:	80 81       	ld	r24, Z
    20de:	88 60       	ori	r24, 0x08	; 8
    20e0:	8c 93       	st	X, r24
	SET_BIT(TCCR0,COM01);
    20e2:	a3 e5       	ldi	r26, 0x53	; 83
    20e4:	b0 e0       	ldi	r27, 0x00	; 0
    20e6:	e3 e5       	ldi	r30, 0x53	; 83
    20e8:	f0 e0       	ldi	r31, 0x00	; 0
    20ea:	80 81       	ld	r24, Z
    20ec:	80 62       	ori	r24, 0x20	; 32
    20ee:	8c 93       	st	X, r24
	SET_BIT(TCCR0,CS01);
    20f0:	a3 e5       	ldi	r26, 0x53	; 83
    20f2:	b0 e0       	ldi	r27, 0x00	; 0
    20f4:	e3 e5       	ldi	r30, 0x53	; 83
    20f6:	f0 e0       	ldi	r31, 0x00	; 0
    20f8:	80 81       	ld	r24, Z
    20fa:	82 60       	ori	r24, 0x02	; 2
    20fc:	8c 93       	st	X, r24
}
    20fe:	0f 90       	pop	r0
    2100:	cf 91       	pop	r28
    2102:	df 91       	pop	r29
    2104:	08 95       	ret

00002106 <SPI_initMaster>:
/*
 * Description :
 * Initialize the SPI device as Master.
 */
void SPI_initMaster(void) 
{
    2106:	df 93       	push	r29
    2108:	cf 93       	push	r28
    210a:	cd b7       	in	r28, 0x3d	; 61
    210c:	de b7       	in	r29, 0x3e	; 62
	 * SS(PB4)   --> Output
	 * MOSI(PB5) --> Output 
	 * MISO(PB6) --> Input
	 * SCK(PB7) --> Output
	 ********************************************/
	GPIO_setupPinDirection(PORTB_ID,PIN4_ID,PIN_OUTPUT);
    210e:	81 e0       	ldi	r24, 0x01	; 1
    2110:	64 e0       	ldi	r22, 0x04	; 4
    2112:	41 e0       	ldi	r20, 0x01	; 1
    2114:	0e 94 12 06 	call	0xc24	; 0xc24 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN5_ID,PIN_OUTPUT);
    2118:	81 e0       	ldi	r24, 0x01	; 1
    211a:	65 e0       	ldi	r22, 0x05	; 5
    211c:	41 e0       	ldi	r20, 0x01	; 1
    211e:	0e 94 12 06 	call	0xc24	; 0xc24 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN6_ID,PIN_INPUT);
    2122:	81 e0       	ldi	r24, 0x01	; 1
    2124:	66 e0       	ldi	r22, 0x06	; 6
    2126:	40 e0       	ldi	r20, 0x00	; 0
    2128:	0e 94 12 06 	call	0xc24	; 0xc24 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN7_ID,PIN_OUTPUT);
    212c:	81 e0       	ldi	r24, 0x01	; 1
    212e:	67 e0       	ldi	r22, 0x07	; 7
    2130:	41 e0       	ldi	r20, 0x01	; 1
    2132:	0e 94 12 06 	call	0xc24	; 0xc24 <GPIO_setupPinDirection>
     * MSTR    = 1 Enable Master
     * CPOL    = 0 SCK is low when idle
     * CPHA    = 1 Sample Data with the falling edge
     * SPR1:0  = 00 Choose SPI clock = Fosc/4
     ***********************************************************************/
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<CPHA);
    2136:	ed e2       	ldi	r30, 0x2D	; 45
    2138:	f0 e0       	ldi	r31, 0x00	; 0
    213a:	84 e5       	ldi	r24, 0x54	; 84
    213c:	80 83       	st	Z, r24

	/* Clear the SPI2X bit in SPSR to Choose SPI clock = Fosc/4 */
	SPSR &= ~(1<<SPI2X);
    213e:	ae e2       	ldi	r26, 0x2E	; 46
    2140:	b0 e0       	ldi	r27, 0x00	; 0
    2142:	ee e2       	ldi	r30, 0x2E	; 46
    2144:	f0 e0       	ldi	r31, 0x00	; 0
    2146:	80 81       	ld	r24, Z
    2148:	8e 7f       	andi	r24, 0xFE	; 254
    214a:	8c 93       	st	X, r24
//	SPSR |= (1<<SPR0);		//FOSC/16


}
    214c:	cf 91       	pop	r28
    214e:	df 91       	pop	r29
    2150:	08 95       	ret

00002152 <SPI_initSlave>:
/*
 * Description :
 * Initialize the SPI device as Slave.
 */
void SPI_initSlave(void)
{ 
    2152:	df 93       	push	r29
    2154:	cf 93       	push	r28
    2156:	cd b7       	in	r28, 0x3d	; 61
    2158:	de b7       	in	r29, 0x3e	; 62
	 * SS(PB4)   --> Input
	 * MOSI(PB5) --> Input
	 * MISO(PB6) --> Output
	 * SCK(PB7) --> Input
	 ********************************************/
	GPIO_setupPinDirection(PORTB_ID,PIN4_ID,PIN_INPUT);
    215a:	81 e0       	ldi	r24, 0x01	; 1
    215c:	64 e0       	ldi	r22, 0x04	; 4
    215e:	40 e0       	ldi	r20, 0x00	; 0
    2160:	0e 94 12 06 	call	0xc24	; 0xc24 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN5_ID,PIN_INPUT);
    2164:	81 e0       	ldi	r24, 0x01	; 1
    2166:	65 e0       	ldi	r22, 0x05	; 5
    2168:	40 e0       	ldi	r20, 0x00	; 0
    216a:	0e 94 12 06 	call	0xc24	; 0xc24 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN6_ID,PIN_OUTPUT);
    216e:	81 e0       	ldi	r24, 0x01	; 1
    2170:	66 e0       	ldi	r22, 0x06	; 6
    2172:	41 e0       	ldi	r20, 0x01	; 1
    2174:	0e 94 12 06 	call	0xc24	; 0xc24 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(PORTB_ID,PIN7_ID,PIN_INPUT);
    2178:	81 e0       	ldi	r24, 0x01	; 1
    217a:	67 e0       	ldi	r22, 0x07	; 7
    217c:	40 e0       	ldi	r20, 0x00	; 0
    217e:	0e 94 12 06 	call	0xc24	; 0xc24 <GPIO_setupPinDirection>
	 * MSTR    = 0 Disable Master
	 * CPOL    = 0 SCK is low when idle
	 * CPHA    = 0 Sample Data with the raising edge
	 * SPR1:0  = 00 Choose SPI clock = Fosc/4
	 ***********************************************************************/
	SPCR = (1<<SPE);
    2182:	ed e2       	ldi	r30, 0x2D	; 45
    2184:	f0 e0       	ldi	r31, 0x00	; 0
    2186:	80 e4       	ldi	r24, 0x40	; 64
    2188:	80 83       	st	Z, r24

	/* Clear the SPI2X bit in SPSR to Choose SPI clock = Fosc/4 */
	SPSR &= ~(1<<SPI2X);
    218a:	ae e2       	ldi	r26, 0x2E	; 46
    218c:	b0 e0       	ldi	r27, 0x00	; 0
    218e:	ee e2       	ldi	r30, 0x2E	; 46
    2190:	f0 e0       	ldi	r31, 0x00	; 0
    2192:	80 81       	ld	r24, Z
    2194:	8e 7f       	andi	r24, 0xFE	; 254
    2196:	8c 93       	st	X, r24
}
    2198:	cf 91       	pop	r28
    219a:	df 91       	pop	r29
    219c:	08 95       	ret

0000219e <SPI_sendReceiveByte>:
 * Description :
 * Send the required data through SPI to the other SPI device.
 * In the same time data will be received from the other device.
 */
uint8 SPI_sendReceiveByte(uint8 data)
{
    219e:	df 93       	push	r29
    21a0:	cf 93       	push	r28
    21a2:	0f 92       	push	r0
    21a4:	cd b7       	in	r28, 0x3d	; 61
    21a6:	de b7       	in	r29, 0x3e	; 62
    21a8:	89 83       	std	Y+1, r24	; 0x01
	/* Initiate the communication and send data by SPI */
	SPDR = data;
    21aa:	ef e2       	ldi	r30, 0x2F	; 47
    21ac:	f0 e0       	ldi	r31, 0x00	; 0
    21ae:	89 81       	ldd	r24, Y+1	; 0x01
    21b0:	80 83       	st	Z, r24

	/* Wait until SPI interrupt flag SPIF = 1 (data has been sent/received correctly) */
	while(BIT_IS_CLEAR(SPSR,SPIF)){}
    21b2:	ee e2       	ldi	r30, 0x2E	; 46
    21b4:	f0 e0       	ldi	r31, 0x00	; 0
    21b6:	80 81       	ld	r24, Z
    21b8:	88 23       	and	r24, r24
    21ba:	dc f7       	brge	.-10     	; 0x21b2 <SPI_sendReceiveByte+0x14>

	/*
	 * Note: SPIF flag is cleared by first reading SPSR (with SPIF set) which is done in the previous step.
	 * and then accessing SPDR like the below line.
	 */
	return SPDR;
    21bc:	ef e2       	ldi	r30, 0x2F	; 47
    21be:	f0 e0       	ldi	r31, 0x00	; 0
    21c0:	80 81       	ld	r24, Z
}
    21c2:	0f 90       	pop	r0
    21c4:	cf 91       	pop	r28
    21c6:	df 91       	pop	r29
    21c8:	08 95       	ret

000021ca <SPI_sendString>:
/*
 * Description :
 * Send the required string through SPI to the other SPI device.
 */
void SPI_sendString(const uint8 *str)
{
    21ca:	df 93       	push	r29
    21cc:	cf 93       	push	r28
    21ce:	00 d0       	rcall	.+0      	; 0x21d0 <SPI_sendString+0x6>
    21d0:	00 d0       	rcall	.+0      	; 0x21d2 <SPI_sendString+0x8>
    21d2:	cd b7       	in	r28, 0x3d	; 61
    21d4:	de b7       	in	r29, 0x3e	; 62
    21d6:	9c 83       	std	Y+4, r25	; 0x04
    21d8:	8b 83       	std	Y+3, r24	; 0x03
	uint8 i = 0;
    21da:	1a 82       	std	Y+2, r1	; 0x02
	uint8 received_data = 0;
    21dc:	19 82       	std	Y+1, r1	; 0x01
    21de:	0f c0       	rjmp	.+30     	; 0x21fe <SPI_sendString+0x34>
	{
		/*
		 * received_data contains the received data from the other device.
		 * It is a dummy data variable as we just need to send the string to other device.
		 */
		received_data = SPI_sendReceiveByte(str[i]);
    21e0:	8a 81       	ldd	r24, Y+2	; 0x02
    21e2:	28 2f       	mov	r18, r24
    21e4:	30 e0       	ldi	r19, 0x00	; 0
    21e6:	8b 81       	ldd	r24, Y+3	; 0x03
    21e8:	9c 81       	ldd	r25, Y+4	; 0x04
    21ea:	fc 01       	movw	r30, r24
    21ec:	e2 0f       	add	r30, r18
    21ee:	f3 1f       	adc	r31, r19
    21f0:	80 81       	ld	r24, Z
    21f2:	0e 94 cf 10 	call	0x219e	; 0x219e <SPI_sendReceiveByte>
    21f6:	89 83       	std	Y+1, r24	; 0x01
		i++;
    21f8:	8a 81       	ldd	r24, Y+2	; 0x02
    21fa:	8f 5f       	subi	r24, 0xFF	; 255
    21fc:	8a 83       	std	Y+2, r24	; 0x02
{
	uint8 i = 0;
	uint8 received_data = 0;

	/* Send the whole string */
	while(str[i] != '\0')
    21fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2200:	28 2f       	mov	r18, r24
    2202:	30 e0       	ldi	r19, 0x00	; 0
    2204:	8b 81       	ldd	r24, Y+3	; 0x03
    2206:	9c 81       	ldd	r25, Y+4	; 0x04
    2208:	fc 01       	movw	r30, r24
    220a:	e2 0f       	add	r30, r18
    220c:	f3 1f       	adc	r31, r19
    220e:	80 81       	ld	r24, Z
    2210:	88 23       	and	r24, r24
    2212:	31 f7       	brne	.-52     	; 0x21e0 <SPI_sendString+0x16>
		 * It is a dummy data variable as we just need to send the string to other device.
		 */
		received_data = SPI_sendReceiveByte(str[i]);
		i++;
	}
}
    2214:	0f 90       	pop	r0
    2216:	0f 90       	pop	r0
    2218:	0f 90       	pop	r0
    221a:	0f 90       	pop	r0
    221c:	cf 91       	pop	r28
    221e:	df 91       	pop	r29
    2220:	08 95       	ret

00002222 <SPI_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through SPI from the other SPI device.
 */
void SPI_receiveString(uint8 *str)
{
    2222:	0f 93       	push	r16
    2224:	1f 93       	push	r17
    2226:	df 93       	push	r29
    2228:	cf 93       	push	r28
    222a:	00 d0       	rcall	.+0      	; 0x222c <SPI_receiveString+0xa>
    222c:	0f 92       	push	r0
    222e:	cd b7       	in	r28, 0x3d	; 61
    2230:	de b7       	in	r29, 0x3e	; 62
    2232:	9b 83       	std	Y+3, r25	; 0x03
    2234:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2236:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	str[i] = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
    2238:	89 81       	ldd	r24, Y+1	; 0x01
    223a:	28 2f       	mov	r18, r24
    223c:	30 e0       	ldi	r19, 0x00	; 0
    223e:	8a 81       	ldd	r24, Y+2	; 0x02
    2240:	9b 81       	ldd	r25, Y+3	; 0x03
    2242:	8c 01       	movw	r16, r24
    2244:	02 0f       	add	r16, r18
    2246:	13 1f       	adc	r17, r19
    2248:	8f ef       	ldi	r24, 0xFF	; 255
    224a:	0e 94 cf 10 	call	0x219e	; 0x219e <SPI_sendReceiveByte>
    224e:	f8 01       	movw	r30, r16
    2250:	80 83       	st	Z, r24
    2252:	10 c0       	rjmp	.+32     	; 0x2274 <SPI_receiveString+0x52>

	/* Receive the whole string until the '#' */
	while(str[i] != '#')
	{
		i++;
    2254:	89 81       	ldd	r24, Y+1	; 0x01
    2256:	8f 5f       	subi	r24, 0xFF	; 255
    2258:	89 83       	std	Y+1, r24	; 0x01
		str[i] = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
    225a:	89 81       	ldd	r24, Y+1	; 0x01
    225c:	28 2f       	mov	r18, r24
    225e:	30 e0       	ldi	r19, 0x00	; 0
    2260:	8a 81       	ldd	r24, Y+2	; 0x02
    2262:	9b 81       	ldd	r25, Y+3	; 0x03
    2264:	8c 01       	movw	r16, r24
    2266:	02 0f       	add	r16, r18
    2268:	13 1f       	adc	r17, r19
    226a:	8f ef       	ldi	r24, 0xFF	; 255
    226c:	0e 94 cf 10 	call	0x219e	; 0x219e <SPI_sendReceiveByte>
    2270:	f8 01       	movw	r30, r16
    2272:	80 83       	st	Z, r24

	/* Receive the first byte */
	str[i] = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);

	/* Receive the whole string until the '#' */
	while(str[i] != '#')
    2274:	89 81       	ldd	r24, Y+1	; 0x01
    2276:	28 2f       	mov	r18, r24
    2278:	30 e0       	ldi	r19, 0x00	; 0
    227a:	8a 81       	ldd	r24, Y+2	; 0x02
    227c:	9b 81       	ldd	r25, Y+3	; 0x03
    227e:	fc 01       	movw	r30, r24
    2280:	e2 0f       	add	r30, r18
    2282:	f3 1f       	adc	r31, r19
    2284:	80 81       	ld	r24, Z
    2286:	83 32       	cpi	r24, 0x23	; 35
    2288:	29 f7       	brne	.-54     	; 0x2254 <SPI_receiveString+0x32>
		i++;
		str[i] = SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	str[i] = '\0';
    228a:	89 81       	ldd	r24, Y+1	; 0x01
    228c:	28 2f       	mov	r18, r24
    228e:	30 e0       	ldi	r19, 0x00	; 0
    2290:	8a 81       	ldd	r24, Y+2	; 0x02
    2292:	9b 81       	ldd	r25, Y+3	; 0x03
    2294:	fc 01       	movw	r30, r24
    2296:	e2 0f       	add	r30, r18
    2298:	f3 1f       	adc	r31, r19
    229a:	10 82       	st	Z, r1
}
    229c:	0f 90       	pop	r0
    229e:	0f 90       	pop	r0
    22a0:	0f 90       	pop	r0
    22a2:	cf 91       	pop	r28
    22a4:	df 91       	pop	r29
    22a6:	1f 91       	pop	r17
    22a8:	0f 91       	pop	r16
    22aa:	08 95       	ret

000022ac <__divmodhi4>:
    22ac:	97 fb       	bst	r25, 7
    22ae:	09 2e       	mov	r0, r25
    22b0:	07 26       	eor	r0, r23
    22b2:	0a d0       	rcall	.+20     	; 0x22c8 <__divmodhi4_neg1>
    22b4:	77 fd       	sbrc	r23, 7
    22b6:	04 d0       	rcall	.+8      	; 0x22c0 <__divmodhi4_neg2>
    22b8:	0c d0       	rcall	.+24     	; 0x22d2 <__udivmodhi4>
    22ba:	06 d0       	rcall	.+12     	; 0x22c8 <__divmodhi4_neg1>
    22bc:	00 20       	and	r0, r0
    22be:	1a f4       	brpl	.+6      	; 0x22c6 <__divmodhi4_exit>

000022c0 <__divmodhi4_neg2>:
    22c0:	70 95       	com	r23
    22c2:	61 95       	neg	r22
    22c4:	7f 4f       	sbci	r23, 0xFF	; 255

000022c6 <__divmodhi4_exit>:
    22c6:	08 95       	ret

000022c8 <__divmodhi4_neg1>:
    22c8:	f6 f7       	brtc	.-4      	; 0x22c6 <__divmodhi4_exit>
    22ca:	90 95       	com	r25
    22cc:	81 95       	neg	r24
    22ce:	9f 4f       	sbci	r25, 0xFF	; 255
    22d0:	08 95       	ret

000022d2 <__udivmodhi4>:
    22d2:	aa 1b       	sub	r26, r26
    22d4:	bb 1b       	sub	r27, r27
    22d6:	51 e1       	ldi	r21, 0x11	; 17
    22d8:	07 c0       	rjmp	.+14     	; 0x22e8 <__udivmodhi4_ep>

000022da <__udivmodhi4_loop>:
    22da:	aa 1f       	adc	r26, r26
    22dc:	bb 1f       	adc	r27, r27
    22de:	a6 17       	cp	r26, r22
    22e0:	b7 07       	cpc	r27, r23
    22e2:	10 f0       	brcs	.+4      	; 0x22e8 <__udivmodhi4_ep>
    22e4:	a6 1b       	sub	r26, r22
    22e6:	b7 0b       	sbc	r27, r23

000022e8 <__udivmodhi4_ep>:
    22e8:	88 1f       	adc	r24, r24
    22ea:	99 1f       	adc	r25, r25
    22ec:	5a 95       	dec	r21
    22ee:	a9 f7       	brne	.-22     	; 0x22da <__udivmodhi4_loop>
    22f0:	80 95       	com	r24
    22f2:	90 95       	com	r25
    22f4:	bc 01       	movw	r22, r24
    22f6:	cd 01       	movw	r24, r26
    22f8:	08 95       	ret

000022fa <__prologue_saves__>:
    22fa:	2f 92       	push	r2
    22fc:	3f 92       	push	r3
    22fe:	4f 92       	push	r4
    2300:	5f 92       	push	r5
    2302:	6f 92       	push	r6
    2304:	7f 92       	push	r7
    2306:	8f 92       	push	r8
    2308:	9f 92       	push	r9
    230a:	af 92       	push	r10
    230c:	bf 92       	push	r11
    230e:	cf 92       	push	r12
    2310:	df 92       	push	r13
    2312:	ef 92       	push	r14
    2314:	ff 92       	push	r15
    2316:	0f 93       	push	r16
    2318:	1f 93       	push	r17
    231a:	cf 93       	push	r28
    231c:	df 93       	push	r29
    231e:	cd b7       	in	r28, 0x3d	; 61
    2320:	de b7       	in	r29, 0x3e	; 62
    2322:	ca 1b       	sub	r28, r26
    2324:	db 0b       	sbc	r29, r27
    2326:	0f b6       	in	r0, 0x3f	; 63
    2328:	f8 94       	cli
    232a:	de bf       	out	0x3e, r29	; 62
    232c:	0f be       	out	0x3f, r0	; 63
    232e:	cd bf       	out	0x3d, r28	; 61
    2330:	09 94       	ijmp

00002332 <__epilogue_restores__>:
    2332:	2a 88       	ldd	r2, Y+18	; 0x12
    2334:	39 88       	ldd	r3, Y+17	; 0x11
    2336:	48 88       	ldd	r4, Y+16	; 0x10
    2338:	5f 84       	ldd	r5, Y+15	; 0x0f
    233a:	6e 84       	ldd	r6, Y+14	; 0x0e
    233c:	7d 84       	ldd	r7, Y+13	; 0x0d
    233e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2340:	9b 84       	ldd	r9, Y+11	; 0x0b
    2342:	aa 84       	ldd	r10, Y+10	; 0x0a
    2344:	b9 84       	ldd	r11, Y+9	; 0x09
    2346:	c8 84       	ldd	r12, Y+8	; 0x08
    2348:	df 80       	ldd	r13, Y+7	; 0x07
    234a:	ee 80       	ldd	r14, Y+6	; 0x06
    234c:	fd 80       	ldd	r15, Y+5	; 0x05
    234e:	0c 81       	ldd	r16, Y+4	; 0x04
    2350:	1b 81       	ldd	r17, Y+3	; 0x03
    2352:	aa 81       	ldd	r26, Y+2	; 0x02
    2354:	b9 81       	ldd	r27, Y+1	; 0x01
    2356:	ce 0f       	add	r28, r30
    2358:	d1 1d       	adc	r29, r1
    235a:	0f b6       	in	r0, 0x3f	; 63
    235c:	f8 94       	cli
    235e:	de bf       	out	0x3e, r29	; 62
    2360:	0f be       	out	0x3f, r0	; 63
    2362:	cd bf       	out	0x3d, r28	; 61
    2364:	ed 01       	movw	r28, r26
    2366:	08 95       	ret

00002368 <itoa>:
    2368:	fb 01       	movw	r30, r22
    236a:	9f 01       	movw	r18, r30
    236c:	e8 94       	clt
    236e:	42 30       	cpi	r20, 0x02	; 2
    2370:	c4 f0       	brlt	.+48     	; 0x23a2 <itoa+0x3a>
    2372:	45 32       	cpi	r20, 0x25	; 37
    2374:	b4 f4       	brge	.+44     	; 0x23a2 <itoa+0x3a>
    2376:	4a 30       	cpi	r20, 0x0A	; 10
    2378:	29 f4       	brne	.+10     	; 0x2384 <itoa+0x1c>
    237a:	97 fb       	bst	r25, 7
    237c:	1e f4       	brtc	.+6      	; 0x2384 <itoa+0x1c>
    237e:	90 95       	com	r25
    2380:	81 95       	neg	r24
    2382:	9f 4f       	sbci	r25, 0xFF	; 255
    2384:	64 2f       	mov	r22, r20
    2386:	77 27       	eor	r23, r23
    2388:	0e 94 69 11 	call	0x22d2	; 0x22d2 <__udivmodhi4>
    238c:	80 5d       	subi	r24, 0xD0	; 208
    238e:	8a 33       	cpi	r24, 0x3A	; 58
    2390:	0c f0       	brlt	.+2      	; 0x2394 <itoa+0x2c>
    2392:	89 5d       	subi	r24, 0xD9	; 217
    2394:	81 93       	st	Z+, r24
    2396:	cb 01       	movw	r24, r22
    2398:	00 97       	sbiw	r24, 0x00	; 0
    239a:	a1 f7       	brne	.-24     	; 0x2384 <itoa+0x1c>
    239c:	16 f4       	brtc	.+4      	; 0x23a2 <itoa+0x3a>
    239e:	5d e2       	ldi	r21, 0x2D	; 45
    23a0:	51 93       	st	Z+, r21
    23a2:	10 82       	st	Z, r1
    23a4:	c9 01       	movw	r24, r18
    23a6:	0c 94 d5 11 	jmp	0x23aa	; 0x23aa <strrev>

000023aa <strrev>:
    23aa:	dc 01       	movw	r26, r24
    23ac:	fc 01       	movw	r30, r24
    23ae:	67 2f       	mov	r22, r23
    23b0:	71 91       	ld	r23, Z+
    23b2:	77 23       	and	r23, r23
    23b4:	e1 f7       	brne	.-8      	; 0x23ae <strrev+0x4>
    23b6:	32 97       	sbiw	r30, 0x02	; 2
    23b8:	04 c0       	rjmp	.+8      	; 0x23c2 <strrev+0x18>
    23ba:	7c 91       	ld	r23, X
    23bc:	6d 93       	st	X+, r22
    23be:	70 83       	st	Z, r23
    23c0:	62 91       	ld	r22, -Z
    23c2:	ae 17       	cp	r26, r30
    23c4:	bf 07       	cpc	r27, r31
    23c6:	c8 f3       	brcs	.-14     	; 0x23ba <strrev+0x10>
    23c8:	08 95       	ret

000023ca <_exit>:
    23ca:	f8 94       	cli

000023cc <__stop_program>:
    23cc:	ff cf       	rjmp	.-2      	; 0x23cc <__stop_program>
